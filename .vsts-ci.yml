variables:
  Build.Repository.Clean: true
  _HelixType: build/product
  
  # Change helix sources based on build project/reason
  # TODO: Once we go public, remove the build definition name check
  ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'github')) }}:
    _HelixSource: pr/dotnet/winforms/$(Build.SourceBranch)
  ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), not(contains(variables['Build.DefinitionName'], 'github'))) }}:
    _TeamName: DotNetCore
    _HelixSource: official/dotnet/winforms/$(Build.SourceBranch)

# only trigger builds for the master branch
trigger:
- master

# To be added in the future when VSTS supports this feature
# pr:
# - master

phases:
- template: /eng/build.yml
  parameters:
    name: Windows_NT
    queue:
      # Always use the internal pool. This is temporary while the github project is private.
      # TODO: Once we go public, remove the following line and uncomment the lines below
      name: dotnet-internal-temp
      # If project is public, use the external pool. Otherwise, use internal.
      #${{ if eq(variables['System.TeamProject'], 'public') }}:
      #  name: dotnet-external-temp
      #${{ if ne(variables['System.TeamProject'], 'public') }}:
      #  name: dotnet-internal-temp
      parallel: 99
      matrix:
        Build_Debug:
          _BuildConfig: netcoreapp-Windows_NT-Debug
          _PublishType: none
          _SignType: test
          _DotNetPublishToBlobFeed : false
        Build_Release:
          _BuildConfig: netcoreapp-Windows_NT-Release
          # If the project is public or the build is for a PR, test sign and don't publish package updates to dotnet feed.
          # If the project is not public AND the build is NOT for a PR, real sign and publish.
          # TODO: Once we go public, remove the build definition name check
          ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'github')) }}:
            _PublishType: none
            _SignType: test
            _DotNetPublishToBlobFeed : false
          ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), not(contains(variables['Build.DefinitionName'], 'github'))) }}:
            _PublishType: blob
            _SignType: test # set to real once our build definition has signing approval
            _DotNetPublishToBlobFeed : true

- phase: Prep for helix
  steps:
  # prepare the helix package
  - task: CopyFiles@2
    displayName: Copy test binaries to helix package dir
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/artifacts/bin/System.Windows.Forms.Tests/$(_BuildConfig)/netcoreapp2.0
      contents: '**'
      targetFolder: $(Build.StagingDirectory)/helixPackage
      overWrite: true
  
  - task: CopyFiles@2
    displayName: Copy xunit.runner.console to helix package dir
    inputs:
      sourceFolder: $(NuGetPackageRoot)/xunit.runner.console/2.4.1-pre.build.4059/tools/netcoreapp2.0
      contents: '**'
      targetFolder: $(Build.StagingDirectory)/helixPackage
      overWrite: true

- phase: Helix publish
  # send the unit tests to helix
  - template: /eng/common/templates/steps/helix-publish.yml
    parameters:
      HelixSource: $(_HelixSource)
      HelixType: type/tests
      HelixTargetQueues: Windows.10.Amd64.Open
      HelixAccessToken: $(helix-token)
      # HelixPreCommands: '' -- any commands that you would like to run prior to running your job
      # HelixPostCommands: '' -- any commands that you would like to run after running your job
      WorkItemDirectory: $(Build.StagingDirectory)/helixPackage
      WorkItemCommand: 'dotnet exec --depsfile System.Windows.Forms.Tests.deps.json --runtimeconfig System.Windows.Forms.Tests.runtimeconfig.json xunit.console.dll System.Windows.Forms.Tests.dll -noautoreporters -xml testResults.xml'
      EnableXUnitReporter: true # required for reporting out xUnit test results to Mission Control
      IncludeDotNetCli: true # install the dot net cli
      DotNetCliPackageType: sdk
      DotNetCliVersion: 3.0.100-alpha1-009703

# If the project is NOT public AND the build is NOT for a PR, publish build assets
# TODO: Once we go public, remove the build definition name check
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), not(contains(variables['Build.DefinitionName'], 'github'))) }}:
  - template: /eng/common/templates/phases/publish-build-assets.yml
    parameters:
      dependsOn:
        - Windows_NT
      queue:
        name: Hosted VS2017
      configuration: netcoreapp-Windows_NT-Debug