<Project Sdk="Microsoft.NET.Sdk" InitialTargets="SetOutputItemType">
  <!-- 
    This pkgproj is used to create a nuget package.
    The ArcadeSDK uses vanilla 'dotnet pack', but creates one package per csproj, which is not what we want.

    There are two main ways to work around this: 
    
    1. A pull model where a single project pulls in everything that the package needs.
        a. This is the model we're using because it's less work and we only have a few more binaries coming in the future.
        b. An example of the pull model is at https://github.com/nuget/home/issues/3891#issuecomment-377319939, with official docs
        at https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#targetsfortfmspecificbuildoutput

    2. A push model where projects control what they contribute to the package.
        a. An example of the push model is at https://github.com/dotnet/machinelearning/blob/master/pkg/Directory.Build.props. 
  -->

  <PropertyGroup>

    <!-- Don't build this project -->
    <!-- Todo: this doesn't seem to work, find another way to prevent build outputs -->
    <NoBuild>true</NoBuild>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IncludeSymbols>false</IncludeSymbols>

    <TargetFramework>netcoreapp3.0</TargetFramework>
    <IsPackable>true</IsPackable>
    <NoWarn>$(NoWarn);NU5125</NoWarn>

    <!-- Disable a VS-specific target that is failing when building this csproj -->
    <GenerateDependencyFile>false</GenerateDependencyFile>

  </PropertyGroup>

  <!-- nuspec properties -->
  <PropertyGroup>
    <PackageId>Microsoft.Private.Winforms</PackageId>
    <Description>Private Windows Forms package, public consumption is not supported</Description>
    <Authors>Microsoft</Authors>
    <RepositoryUrl>https://github.com/dotnet/winforms</RepositoryUrl>
    <PackageLicenseUrl>https://github.com/dotnet/winforms/blob/master/LICENSE.TXT</PackageLicenseUrl>
    <PackageTags>WinForms Windows Forms</PackageTags>
  </PropertyGroup>

  <!-- Force project references to avoid packaging their dependencies -->
  <ItemDefinitionGroup>
    <ProjectReference>
      <PrivateAssets>All</PrivateAssets>
    </ProjectReference>
  </ItemDefinitionGroup>

  <!-- Any projects referenced here will have their outputs automatically put into the package -->
  <!-- If you add a new csproj, and you want the outputs in the package, you must add it here -->
  <ItemGroup>
    <!-- Facade for System.Drawing include -->
    <ProjectReference Include="..\src\System.Drawing\src\System.Drawing.Facade.csproj" />

    <!-- Facade for System.Design include -->
    <ProjectReference Include="..\src\System.Design\src\System.Design.Facade.csproj" />

    <!-- Facade for System.Drawing.Design include -->
    <ProjectReference Include="..\src\System.Drawing.Design\src\System.Drawing.Design.Facade.csproj" />

    <!-- Reference and Source System.Windows.Forms includes -->
    <ProjectReference Include="..\src\System.Windows.Forms\ref\System.Windows.Forms.Ref.csproj" />
    <ProjectReference Include="..\src\System.Windows.Forms\src\System.Windows.Forms.csproj" />

    <!-- Reference and Source System.Windows.Forms.Design includes -->
    <ProjectReference Include="..\src\System.Windows.Forms.Design\ref\System.Windows.Forms.Design.Ref.csproj" />
    <ProjectReference Include="..\src\System.Windows.Forms.Design\src\System.Windows.Forms.Design.csproj" />
    
    <!-- Reference and Source System.Windows.Forms.Design.Editors includes -->
    <ProjectReference Include="..\src\System.Windows.Forms.Design.Editors\ref\System.Windows.Forms.Design.Editors.Ref.csproj" />
    <ProjectReference Include="..\src\System.Windows.Forms.Design.Editors\src\System.Windows.Forms.Design.Editors.csproj" />
  </ItemGroup>

  <!-- Force the output item type for all project references to "TfmSpecificPackageFile", which makes them get packed -->
  <Target Name="SetOutputItemType">
    <ItemGroup>
      <ProjectReference>
        <OutputItemType>TfmSpecificPackageFile</OutputItemType>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <!-- Call custom targets (defined below) when creating the package -->
  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificBuildOutput);SetPackagePath;AddRelativePackageFiles</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <!-- Set package paths for project reference outputs -->
  <Target Name="SetPackagePath" DependsOnTargets="ResolveReferences">
  
    <!-- Create booleans for Refs and Facades to use in settting package paths and packaging pdbs -->
    <ItemGroup>
      <TfmSpecificPackageFile>
        <IsReference>$([System.String]::Copy('%(TfmSpecificPackageFile.OriginalItemSpec)').EndsWith('Ref.csproj'))</IsReference>
        <IsFacade>$([System.String]::Copy('%(TfmSpecificPackageFile.OriginalItemSpec)').EndsWith('Facade.csproj'))</IsFacade>
      </TfmSpecificPackageFile>
    </ItemGroup>

    <ItemGroup>
      <TfmSpecificPackageFile>
        <!-- Put everything under lib by default -->
        <PackagePath>lib/$(TargetFramework)</PackagePath>
        <!-- If the reference ends with Ref.csproj, it's a reference binary, so put it under ref instead -->
        <PackagePath Condition="'%(TfmSpecificPackageFile.IsReference)' == 'true'">ref/$(TargetFramework)</PackagePath>
        <!-- If the reference ends with Facade.csproj, it's a facade binary, so put it under both lib and ref  -->
        <PackagePath Condition="'%(TfmSpecificPackageFile.IsFacade)' == 'true'">lib/$(TargetFramework);ref/$(TargetFramework)</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>
  
  <!-- Look next to each file going into the package for companion files (pdb, xml, resources) -->
  <Target Name="AddRelativePackageFiles"
          Inputs="%(TfmSpecificPackageFile.Identity);%(TfmSpecificPackageFile.PackagePath)"
          Outputs="unused">
    
    <!-- Set some variables for the item group below -->
    <PropertyGroup>
      <_baseDirectory>%(TfmSpecificPackageFile.RootDir)%(TfmSpecificPackageFile.Directory)</_baseDirectory>
      <_baseFileName>%(TfmSpecificPackageFile.FileName)</_baseFileName>
      <_packagePath>%(TfmSpecificPackageFile.PackagePath)</_packagePath>
      <_isReferenceAssembly>%(TfmSpecificPackageFile.IsReference)</_isReferenceAssembly>
      <_isFacadeAssembly>%(TfmSpecificPackageFile.IsFacade)</_isFacadeAssembly>
    </PropertyGroup>
    
    <ItemGroup>

      <!-- Get pdbs, but not for neither reference binaries nor facade binaries -->
      <TfmSpecificPackageFile Include="$(_baseDirectory)$(_baseFileName).pdb" 
                              Condition="Exists('$(_baseDirectory)$(_baseFileName).pdb') And !$(_isReferenceAssembly) And !$(_isFacadeAssembly)">
        <PackagePath>$(_packagePath)</PackagePath>
      </TfmSpecificPackageFile>

      <!-- Commenting out until we decide to use XML files in the package -->
      <!-- Get xml files -->
      <!--<TfmSpecificPackageFile Include="$(_baseDirectory)**\$(_baseFileName).xml">
        <PackagePath>$(_packagePath)%(RecursiveDir)</PackagePath>
      </TfmSpecificPackageFile>-->

      <!-- commenting out until we decide to use them in the WindowsDesktop package -->
      <!-- Get resource dlls -->
      <!--TfmSpecificPackageFile Include="$(_baseDirectory)**\$(_baseFileName).resources.dll">
        <PackagePath>$(_packagePath)%(RecursiveDir)</PackagePath>
      </TfmSpecificPackageFile-->

    </ItemGroup>
  </Target>

</Project>
