parameters:
  # parameters should default to values for running in the External / Public
  # be read from a user-defined variable (Azure DevOps limitation)
  agentPoolName: NetCorePublic-Pool
  agentPool: 'BuildPool.Windows.10.Amd64.VS2019.Pre.Open'
  repoName: dotnet/winforms

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishTestResults: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableTelemetry: true
      helixRepo: ${{ parameters.repoName }}

      jobs:
      - job: Windows
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: NetCorePublic-Pool
            queue: BuildPool.Windows.10.Amd64.VS2019.Pre.Open
          ${{ if ne(variables['System.TeamProject'], 'public') }}:
            name: NetCoreInternal-Pool
            queue: BuildPool.Windows.10.Amd64.VS2019.Pre

        variables:

          # needed for signing
          - _TeamName: DotNetCore
          - _SignType: test
          - _SignArgs: ''
          - _Sign: true

          # needed for darc (dependency flow) publishing
          - _PublishType: none
          - _DotNetPublishToBlobFeed: false
          - _PublishArgs: ''
          - _OfficialBuildIdArgs: ''
          - _InternalRuntimeDownloadArgs: ''

          # Override some values if we're building internally (not public)
          - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:

            - _PublishType: blob
            - _SignType: real
            - _DotNetPublishToBlobFeed: true
            - group: DotNet-Blob-Feed
            - group: DotNet-Symbol-Server-Pats
            - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json

            # note: Even though they are referenced here, user defined variables (like $(_SignType)) 
            # are not resolved until the agent is running on the machine. They can be overridden any 
            # time before they are resolved, like in the job matrix below (see Build_Debug)
            - _SignArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
            - _PublishArgs: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
                /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
                /p:DotNetPublishUsingPipelines=true
                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
            - _OfficialBuildIdArgs: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

          - ${{ if ne(variables['System.TeamProject'], 'public') }}:
            - _InternalRuntimeDownloadArgs: /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
                /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)

        strategy:
          matrix:
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
              Debug:
                _BuildConfig: Debug
                # override some variables for debug
                _PublishType: none
                _SignType: test
                _DotNetPublishToBlobFeed : false
                # Code coverage uploads fail on internal PRs
                ${{ if eq(variables['System.TeamProject'], 'public') }}:
                  _Coverage: true
            Release:
              _BuildConfig: Release
              _Coverage: false

        steps:
        - checkout: self
          clean: true

        - ${{ if ne(variables['System.TeamProject'], 'public') }}:
          - task: PowerShell@2
            displayName: Setup Private Feeds Credentials
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
              arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
            env:
              Token: $(dn-bot-dnceng-artifact-feeds-rw)

        # Build and rename binlog
        # The /p:Coverage argument is passed here since some build properties change to accommodate running with
        # coverage. This is part of the workarounds for https://github.com/tonerdo/coverlet/issues/362 and
        # https://github.com/tonerdo/coverlet/issues/363.
        - script: eng\cibuild.cmd
            -restore
            -build
            -configuration $(_BuildConfig)
            $(_OfficialBuildIdArgs)
            $(_InternalRuntimeDownloadArgs)
            /p:Coverage=$(_Coverage)
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\BuildSrc.binlog
          displayName: Build

        # Run Unit Tests
        # Tests are run with /m:1 to work around https://github.com/tonerdo/coverlet/issues/364
        - script: eng\cibuild.cmd
            -test
            -configuration $(_BuildConfig)
            $(_OfficialBuildIdArgs)
            $(_InternalRuntimeDownloadArgs)
            /p:Coverage=$(_Coverage)
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\Test.binlog
            /m:1
          displayName: Run Unit Tests

        # Run Integration Tests
        # Tests are run with /m:1 to avoid parallelism across different assemblies which can lead to
        # UI race conditions
        - script: eng\cibuild.cmd
            -integrationTest
            -configuration $(_BuildConfig)
            $(_OfficialBuildIdArgs)
            $(_InternalRuntimeDownloadArgs)
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\IntegrationTest.binlog
            /m:1
          displayName: Run Integration Tests

        # Create Nuget package, sign, and publish
        - script: eng\cibuild.cmd
            -restore
            -pack
            -sign $(_SignArgs)
            -publish $(_PublishArgs)
            -configuration $(_BuildConfig)
            $(_OfficialBuildIdArgs)
            $(_InternalRuntimeDownloadArgs)
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish.binlog
          displayName: Pack, Sign, and Publish

        # Upload code coverage data
        - script: $(Build.SourcesDirectory)/.dotnet/dotnet msbuild -restore
            eng/CodeCoverage.proj
            /p:Configuration=$(_BuildConfig)
            $(_InternalRuntimeDownloadArgs)
            /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage.binlog
          displayName: Upload coverage to codecov.io (Debug)
          condition: and(succeeded(), eq(variables._Coverage, 'true'))

# Copied from the arcade repo and modified for winforms
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      enableSymbolValidation: false
      enableSigningValidation: false
      enableNugetValidation: false
      enableSourceLinkValidation: false
      # these param values come from the DotNet-Winforms-SDLValidation-Params azdo variable group
      SDLValidationParameters:
        enable: false
        params: ' -SourceToolsList $(_TsaSourceToolsList)
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName $(_TsaRepositoryName)
        -TsaCodebaseName $(_TsaCodebaseName)
        -TsaOnboard $(_TsaOnboard)
        -TsaPublish $(_TsaPublish)'
