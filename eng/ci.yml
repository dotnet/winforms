parameters:
  # parameters should default to values for running in the External / Public
  # be read from a user-defined variable (Azure DevOps limitation)
  agentPoolName: NetCorePublic-Int-Pool
  agentPool: BuildPool.Windows.10.Amd64.VS2019.BT.Open 
  runAsPublic: true                      
  repoName: dotnet/winforms              

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    runAsPublic: ${{ parameters.runAsPublic }}
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: true
    enablePublishUsingPipelines: $(_PublishUsingPipelines)
    enableTelemetry: true
    helixRepo: $(repoName)

    jobs:
    - job: Windows_NT
      pool: 
        name: ${{ parameters.agentPoolName }}
        queue: ${{ parameters.agentPool }}

      variables:

        # needed for signing
        - name: _TeamName
          value: DotNetCore
        - name: _SignType
          value: test
        - name: _SignArgs
          value: ''
        - name: _Sign
          value: true

        # needed for darc (dependency flow) publishing
        - name: _PublishType
          value: none
        - name: _DotNetPublishToBlobFeed
          value: false
        - name: _PublishArgs
          value: ''
        - name: _OfficialBuildIdArgs
          value: ''

        # needed for helix jobs
        - name: _TestHelixAgentPool
          value: 'Windows.10.Amd64.ClientRS5.Open'
        - name: _HelixSource
          value: ${{ parameters.repoName }}/$(Build.SourceBranch)
        - name: _HelixToken
          value: ''
        - name: _HelixCreator
          value: ${{ parameters.repoName }}


        # Override some values if we're building internally (not public)
        - ${{ if eq(parameters.runAsPublic, 'false') }}:

          # note: You have to use list syntax here (-name: value) or 
          # you will get errors about declaring the same variable multiple times
          - name: _PublishType
            value: blob
          - name: _SignType
            value: real
          - name: _DotNetPublishToBlobFeed
            value: true
          - group: DotNet-Blob-Feed
          - group: DotNet-Symbol-Server-Pats
          # DotNet-HelixApi-Access provides: HelixApiAccessToken
          - group: DotNet-HelixApi-Access
          - name: _PublishBlobFeedUrl
            value: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json

          # note: Even though they are referenced here, user defined variables (like $(_SignType)) 
          # are not resolved until the agent is running on the machine. They can be overridden any 
          # time before they are resolved, like in the job matrix below (see Build_Debug)
          - name: _SignArgs
            value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
          - name: _PublishArgs
            value: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
              /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          - name: _OfficialBuildIdArgs
            value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

          # Windows.81.Amd64 will fail on Debug.Assert in TryGetSystemMetricsForDpi in UnsafeNativeMethods
          - name: _TestHelixAgentPool
            value: 'Windows.10.Amd64.ClientRS5'
          - name: _HelixSource
            value: official/${{ parameters.repoName }}/$(Build.SourceBranch)
          - name: _HelixToken
            value: '$(HelixApiAccessToken)' # from DotNet-HelixApi-Access group
          - name: _HelixCreator
            value: '' #if _HelixToken is set, Creator must be empty

      strategy:
        matrix:
          Build_Debug:
            _BuildConfig: Debug
            # override some variables for debug
            _PublishType: none
            _SignType: test
            _DotNetPublishToBlobFeed : false
            _Coverage: true
          Build_Release:
            _BuildConfig: Release
            _Coverage: false

      steps:
      - checkout: self
        clean: true

      # Set VSO Variable(s)
      - powershell: eng\pre-build.ps1
        displayName: Pre-Build - Set VSO Variables

      # Build and rename binlog
      # Note: The /p:Coverage argument is passed here since some build properties change to accommodate running with
      #       coverage. This is part of the workarounds for https://github.com/tonerdo/coverlet/issues/362 and
      #       https://github.com/tonerdo/coverlet/issues/363.
      - script: eng\cibuild.cmd
          -restore
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -build
          /p:Coverage=$(_Coverage)
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\BuildSrc.binlog          
        displayName: Build

    # Run Unit Tests
        # this should no longer be necessary once Helix is ready to report back code coverage
        # Tests are run with /m:1 to work around https://github.com/tonerdo/coverlet/issues/364
      - script: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -test
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\Test.binlog
          /p:Coverage=$(_Coverage)
          /m:1
        displayName: Run Unit Tests on Build Machine (Debug)
        condition: and(succeeded() ,  eq(variables['_BuildConfig'], 'Debug')) # on build machine (with test signing)

      - powershell: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs) 
          -test
          -projects $(Build.SourcesDirectory)\eng\helixpublish.proj
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\HelixUnit.binlog
        displayName: Run Unit Tests on Helix Machine (Release)
        env:
          HelixSource: $(_HelixSource)
          HelixType: 'tests/unit'
          HelixBuild: $(Build.BuildNumber)
          HelixTargetQueues: $(_TestHelixAgentPool)
          HelixAccessToken: $(_HelixToken)              # only defined for internal CI
          Creator: $(_HelixCreator)
          XUnitProjects: '..\src\**\*.Tests.csproj'     # the test projects blob
          XUnitPublishTargetFramework: netcoreapp3.0
          XUnitRuntimeTargetFramework: netcoreapp2.0
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        condition: and(succeeded() ,  eq(variables['_BuildConfig'], 'Release')) # on helix machine (with real signing)

      # Run integration tests
      - powershell: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs) 
          -integrationTest
          -projects $(Build.SourcesDirectory)\eng\helixpublish.proj
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\HelixIntegration.binlog
        displayName: Run Integration Tests on Helix Machine Windows.10.Amd64 (Release)
        env:
          HelixSource: $(_HelixSource)
          HelixType: 'tests/integration'
          HelixBuild: $(Build.BuildNumber)
          HelixTargetQueues: $(_TestHelixAgentPool)
          HelixAccessToken: $(_HelixToken)              # only defined for internal CI
          Creator: $(_HelixCreator)
          XUnitProjects: '..\src\**\*.IntegrationTests.csproj'     # the test projects blob
          XUnitPublishTargetFramework: netcoreapp3.0
          XUnitRuntimeTargetFramework: netcoreapp2.0
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        condition: and(succeeded() ,  eq(variables['_BuildConfig'], 'Release')) # on helix machine (with real signing)

      # Create Nuget package, sign, and publish; and rename binlog
      - script: eng\cibuild.cmd
          -restore
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -pack
          -sign $(_SignArgs)
          -publish $(_PublishArgs)
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish.binlog
        displayName: Pack, Sign, and Publish

      # Upload code coverage data
      - script: $(Build.SourcesDirectory)/.dotnet/dotnet msbuild
          eng/CodeCoverage.proj
          /p:Configuration=$(_BuildConfig)
          /p:CodeCovToken=$(CODECOV_TOKEN)
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage.binlog
        displayName: Upload coverage to codecov.io (Debug)
        condition: and(succeeded(), eq(variables._Coverage, 'true'))

      # Perform some internal-build-only tasks
      - ${{ if eq(parameters.runAsPublic, 'false') }}:

        # Publish the nuget package as a build artifact (only for release, ensuring package contents are real-signed)
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'Packages'
            targetPath: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping'
          displayName: Publish transport NuGet package & templates package to build artifacts
          continueOnError: true
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))

        # Run component governance detection (only for release; only for internal)
        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
          displayName: Component Governance Detection
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))