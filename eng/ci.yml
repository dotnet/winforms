parameters:
  # This section is required because agent pool can't be read from a user-defined variable (Azure DevOps limitation)
  agentPool: dotnet-external-temp-vs2019 
  runAsPublic: true                      
  repoName: dotnet/winforms              

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    runAsPublic: ${{ parameters.runAsPublic }}
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    helixRepo: $(repoName)

    jobs:
    - job: Windows_NT
      pool: ${{ parameters.agentPool }}

      variables:

        # needed for signing
        - name: _TeamName
          value: DotNetCore
        - name: _SignType
          value: test
        - name: _SignArgs
          value: ''
        - name: _Sign
          value: true

        # needed for darc (dependency flow) publishing
        - name: _PublishType
          value: none
        - name: _DotNetPublishToBlobFeed
          value: false
        - name: _PublishArgs
          value: ''
        - name: _OfficialBuildIdArgs
          value: ''

        # needed for helix jobs
        - name: _HelixAgentPool
          value: 'Windows.81.Amd64.Open'
        - name: _WinformsControlsTestBinDir
          value: $(BUILD.SOURCESDIRECTORY)\artifacts\bin\WinformsControlsTest\$(_BuildConfig)\netcoreapp3.0
        - name: _WinformsFuncTestBinDir
          value: $(BUILD.SOURCESDIRECTORY)\artifacts\bin\System.Windows.Forms.Func.Tests\$(_BuildConfig)\netcoreapp3.0
        - name: _HelixStagingDir
          value: $(BUILD.STAGINGDIRECTORY)\helix\functests
        - name: _HelixToken
          value: ''

        # Override some values if we're building internally (not public)
        - ${{ if eq(parameters.runAsPublic, 'false') }}:

          # note: You have to use list syntax here (-name: value) or you will get errors about declaring the same variable multiple times
          - name: _PublishType
            value: blob
          - name: _SignType
            value: real
          - name: _DotNetPublishToBlobFeed
            value: true
          - group: DotNet-Blob-Feed
          - group: DotNet-Symbol-Server-Pats
          - name: _PublishBlobFeedUrl
            value: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json

          # note: Even though they are referenced here, user defined variables (like $(_SignType)) are not resolved until the agent
          # is running on the machine. They can be overridden any time before they are resolved, like in the job matrix below (see Build_Debug)
          - name: _SignArgs
            value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:Sign=$(_Sign)
          - name: _PublishArgs
            value: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          - name: _OfficialBuildIdArgs
            value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

          # The win10 pool isn't ready for us yet, so using Windows.81.Amd64 in the meantime
          # When ready, change value to 'Windows.10.Amd64'
          - name: _HelixAgentPool
            value: 'Windows.81.Amd64'
          - name: _HelixToken
            value: '$(helix-token)'

      strategy:
        matrix:
          Build_Debug:
            _BuildConfig: Debug
            # override some variables for debug
            _PublishType: none
            _SignType: test
            _DotNetPublishToBlobFeed : false
          Build_Release:
            _BuildConfig: Release

      steps:
      - checkout: self
        clean: true

      # Build and rename binlog
      - script: eng\cibuild.cmd
          -prepareMachine
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -build
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\Build.binlog          
        displayName: Build

      # Run unit tests on Helix
      - template: /eng/common/templates/steps/send-to-helix.yml
        parameters:
          HelixSource: ${{ parameters.repoName }}
          HelixType: 'tests/default/'      
          HelixBuild: $(Build.BuildNumber)
          HelixTargetQueues: $(_HelixAgentPool)
          HelixAccessToken: $(_HelixToken)            # only defined for internal CI
          Creator: $(repoName)                        # required for public / external (when there is no access token)
          XUnitProjects: '$(BUILD.SOURCESDIRECTORY)/src/System.Windows.Forms/tests/UnitTests/System.Windows.Forms.Tests.csproj'
          XUnitPublishTargetFramework: netcoreapp3.0  # Whatever tfm will work for our test projects for `dotnet publish`
          XUnitRuntimeTargetFramework: netcoreapp2.0  # Whatever tfm to pick from the xunit package, it must exist in that package or the helix job will fail
          XUnitRunnerVersion: '2.4.1'                 # Should match XUnitRunnerConsoleVersion in eng/Versions.props
          IncludeDotNetCli: true
          DotNetCliPackageType: 'sdk'
          DotNetCliVersion: '3.0.100-preview-010184'  # MUST be official release: https://dotnet.microsoft.com/download/dotnet-core/3.0 ; does not need to match sdk we build against
          #EnableXUnitReporter: true
          WaitForWorkItemCompletion: true
          DisplayNamePrefix: 'Send Unit Tests to Helix'
          condition: succeeded()
          continueOnError: false

      # Run integration tests and rename binlog
      - script: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -integrationTest
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\IntegrationTest.binlog
        displayName: Run Integration Tests

      # Create Nuget package, sign, and publish; and rename binlog
      - script: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -pack
          -sign $(_SignArgs)
          -publish $(_PublishArgs)
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish.binlog
        displayName: Pack, Sign, and Publish

      # Perform some internal-build-only tasks
      - ${{ if eq(parameters.runAsPublic, 'false') }}:

        # Publish the nuget package as a build artifact (only for release, ensuring package contents are real-signed)
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'Package'
            targetPath: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping'
          displayName: Publish package to build artifacts
          continueOnError: true
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))

        # Run component governance detection (only for release; only for internal)
        - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
          displayName: Component Governance Detection
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))
