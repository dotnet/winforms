parameters:
  name: ''
  targetArchitecture: null
  timeoutInMinutes: 120
  enableMicrobuild: true
  enablePublishBuildArtifacts: true
  enablePublishTestResults: true
  enablePublishBuildAssets: true
  enablePublishUsingPipelines: true
jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.name }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml@self
  pool:
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      name: $(DncEngPublicBuildPool)
      demands: ImageOverride -equals windows.vs2022preview.amd64.open
    ${{ if ne(variables['System.TeamProject'], 'public') }}:
      name: $(DncEngInternalBuildPool)
      demands: ImageOverride -equals windows.vs2022preview.amd64
  strategy:
    matrix:
      ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        Debug:
          _BuildConfig: Debug
          _SignType: test
          ${{ if and(eq(variables['System.TeamProject'], 'public'), eq(parameters.targetArchitecture, 'x64')) }}:
            _Coverage: true
          ${{ else }}:
            _Coverage: false
      Release:
        _BuildConfig: Release
        _Coverage: false
  workspace:
    clean: all
  templateContext:
    mb:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - signing:
          enabled: true
          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
          signType: $(_SignType)
          zipSources: false
    outputs:
    - ${{ if and(ne(parameters.artifacts.publish, ''), or(eq(parameters.artifacts.publish.artifacts, 'true'), ne(parameters.artifacts.publish.artifacts, ''))) }}:
      - output: pipelineArtifact
        displayName: 'Publish pipeline artifacts'
        condition: always()
        targetPath: '$(Build.ArtifactStagingDirectory)/artifacts'
        publishLocation: Container
        artifactName: ${{ coalesce(parameters.artifacts.publish.artifacts.name , 'Artifacts_$(Agent.Os)_$(_BuildConfig)') }}
    - ${{ if and(ne(parameters.artifacts.publish, ''), or(eq(parameters.artifacts.publish.logs, 'true'), ne(parameters.artifacts.publish.logs, ''))) }}:
      - output: pipelineArtifact
        displayName: 'Publish logs'
        condition: always()
        targetPath: artifacts/log
        artifactName: ${{ coalesce(parameters.artifacts.publish.logs.name, 'Logs_Build_$(Agent.Os)_$(_BuildConfig)') }}
    - ${{ if ne(parameters.enablePublishBuildArtifacts, 'false') }}:
      - output: pipelineArtifact
        displayName: 'Publish Logs'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
        publishLocation: Container
        artifactName: ${{ coalesce(parameters.enablePublishBuildArtifacts.artifactName, '$(Agent.Os)_$(Agent.JobName)' ) }}
  steps:
  - checkout: self
    clean: true
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - task: PowerShell@2
      displayName: Setup Private Feeds Credentials
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
        arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
      env:
        Token: $(dn-bot-dnceng-artifact-feeds-rw)
  - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
    displayName: Clear NuGet http cache (if exists)
  - script: C:\Windows\Microsoft.NET\Framework\v4.0.30319\ngen.exe queue pause
    displayName: Pause NGEN x86
  - script: C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe queue pause
    displayName: Pause NGEN x64
  - script: eng\cibuild.cmd -restore -build -configuration $(_BuildConfig) /p:Platform=${{ parameters.targetArchitecture }} /p:TargetArchitecture=${{ parameters.targetArchitecture }} $(_OfficialBuildIdArgs) $(_InternalRuntimeDownloadArgs) /p:Coverage=$(_Coverage) /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\BuildSrc-${{ parameters.targetArchitecture }}.binlog
    displayName: Build
  - script: eng\cibuild.cmd -test -configuration $(_BuildConfig) /p:Platform=${{ parameters.targetArchitecture }} /p:TargetArchitecture=${{ parameters.targetArchitecture }} $(_OfficialBuildIdArgs) $(_InternalRuntimeDownloadArgs) /p:Coverage=$(_Coverage) /p:TestRunnerAdditionalArguments='-notrait Category=IgnoreForCI -notrait Category=failing' /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\Test-${{ parameters.targetArchitecture }}.binlog /m:1
    displayName: Run Unit Tests
    condition: and(eq(variables['System.TeamProject'], 'public'), ne('${{ parameters.targetArchitecture }}', 'arm64'))
  - script: eng\cibuild.cmd -integrationTest -configuration $(_BuildConfig) /p:Platform=${{ parameters.targetArchitecture }} /p:TargetArchitecture=${{ parameters.targetArchitecture }} $(_OfficialBuildIdArgs) $(_InternalRuntimeDownloadArgs) /p:Coverage=$(_Coverage) /p:TestRunnerAdditionalArguments='-notrait Category=IgnoreForCI -notrait Category=failing' /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\IntegrationTest-${{ parameters.targetArchitecture }}.binlog /m:1
    env:
      XUNIT_LOGS: $(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)
    displayName: Run Integration Tests
    condition: and(eq(variables['System.TeamProject'], 'public'), ne('${{ parameters.targetArchitecture }}', 'arm64'))
  - script: eng\cibuild.cmd -restore -pack -sign $(_SignArgs) -publish $(_PublishArgs) -configuration $(_BuildConfig) $(_OfficialBuildIdArgs) $(_InternalRuntimeDownloadArgs) /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish-${{ parameters.targetArchitecture }}.binlog
    displayName: Pack, Sign, and Publish
  - script: $(Build.SourcesDirectory)/.dotnet/dotnet msbuild -restore eng/CodeCoverage.proj /p:Configuration=$(_BuildConfig) $(_InternalRuntimeDownloadArgs) /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage-${{ parameters.targetArchitecture }}.binlog
    displayName: Upload coverage to codecov.io
    condition: and(succeeded(), eq(variables._Coverage, 'true'), eq('${{ parameters.targetArchitecture }}', 'x64'))
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)\artifacts\bin\CodeCoverage\coverage\full\Cobertura.xml'
      pathToSources: '$(Build.SourcesDirectory)'
      reportDirectory: '$(Build.SourcesDirectory)\artifacts\bin\CodeCoverage\coverage\full'
    displayName: PublishCodeCoverageResults
    condition: and(eq(variables['_BuildConfig'], 'Debug'), eq('${{ parameters.targetArchitecture }}', 'x64'))
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/templates/steps/generate-sbom.yml@self
      parameters:
        name: Generate_SBOM_${{ parameters.name }}
  - template: /eng/pipelines/post-build.yml@self
    parameters:
      name: ${{ parameters.name }}