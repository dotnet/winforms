parameters:
  name: ''
  targetArchitecture: null
  timeoutInMinutes: 120
  enableMicrobuild: true
  enablePublishBuildArtifacts: true
  enablePublishTestResults: true
  enablePublishBuildAssets: true
  enablePublishUsingPipelines: true

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.name }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  strategy:
    matrix:
      Release:
        _BuildConfig: Release
        _Coverage: false
  workspace:
    clean: all
  templateContext:
    outputs:
    - ${{ if and(ne(parameters.artifacts.publish, ''), or(eq(parameters.artifacts.publish.artifacts, 'true'), ne(parameters.artifacts.publish.artifacts, ''))) }}:
      - output: pipelineArtifact
        displayName: 'Publish pipeline artifacts'
        condition: always()
        targetPath: '$(Build.ArtifactStagingDirectory)/artifacts'
        publishLocation: Container
        artifactName: ${{ coalesce(parameters.artifacts.publish.artifacts.name , 'Artifacts_$(Agent.Os)_$(_BuildConfig)') }}
    - ${{ if and(ne(parameters.artifacts.publish, ''), or(eq(parameters.artifacts.publish.logs, 'true'), ne(parameters.artifacts.publish.logs, ''))) }}:
      - output: pipelineArtifact
        displayName: 'Publish logs'
        condition: always()
        targetPath: artifacts/log
        artifactName: ${{ coalesce(parameters.artifacts.publish.logs.name, 'Logs_Build_$(Agent.Os)_$(_BuildConfig)') }}
    - ${{ if ne(parameters.enablePublishBuildArtifacts, 'false') }}:
      - output: pipelineArtifact
        displayName: 'Publish Logs'
        condition: always()
        targetPath: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
        publishLocation: Container
        artifactName: ${{ coalesce(parameters.enablePublishBuildArtifacts.artifactName, '$(Agent.Os)_$(Agent.JobName)' ) }}
  steps:
  - checkout: self
    clean: true
  - task: PowerShell@2
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - task: MicroBuildSigningPlugin@2
    displayName: Install MicroBuild plugin for Signing
    inputs:
      signType: $(_SignType)
      zipSources: false
      feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
    continueOnError: false
    condition: and(succeeded(), in(variables['_SignType'], 'real', 'test'))
  # NuGet's http cache lasts 30 minutes. If we're on a static machine, this may interfere with
  # auto-update PRs by preventing the CI build from fetching the new version. Delete the cache.
  - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
    displayName: Clear NuGet http cache (if exists)

  # Build and rename binlog
  # The /p:Coverage argument is passed here since some build properties change to accommodate running with
  # coverage. This is part of the workarounds for https://github.com/tonerdo/coverlet/issues/362 and
  # https://github.com/tonerdo/coverlet/issues/363.
  - script: eng\cibuild.cmd
      -restore
      -build
      -configuration $(_BuildConfig)
      /p:Platform=${{ parameters.targetArchitecture }}
      /p:TargetArchitecture=${{ parameters.targetArchitecture }}
      $(_OfficialBuildIdArgs)
      $(_InternalRuntimeDownloadArgs)
      /p:Coverage=$(_Coverage)
      /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\BuildSrc-${{ parameters.targetArchitecture }}.binlog
    displayName: Build
  
  # Create Nuget package, sign, and publish
  - script: eng\cibuild.cmd
      -restore
      -pack
      -sign $(_SignArgs)
      -publish $(_PublishArgs)
      -configuration $(_BuildConfig)
      $(_OfficialBuildIdArgs)
      $(_InternalRuntimeDownloadArgs)
      /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish-${{ parameters.targetArchitecture }}.binlog
    displayName: Pack, Sign, and Publish

  # Upload code coverage data
  - script: $(Build.SourcesDirectory)/.dotnet/dotnet msbuild -restore
      eng/CodeCoverage.proj
      /p:Configuration=$(_BuildConfig)
      $(_InternalRuntimeDownloadArgs)
      /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\CodeCoverage-${{ parameters.targetArchitecture }}.binlog
    displayName: Upload coverage to codecov.io
    condition: and(succeeded(), eq(variables._Coverage, 'true'))

  - template: /eng/pipelines/post-build.yml@self
    parameters:
      name: ${{ parameters.name }}