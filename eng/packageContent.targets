<Project>

  <Target Name="GetPackageContent"
          DependsOnTargets="SatelliteDllsProjectOutputGroup"
          Returns="@(PackageFile)">

    <PropertyGroup>
      <RefPackagePath Condition="'$(RefPackagePath)' == ''">ref/$(TargetFramework)</RefPackagePath>
      <IncludePdbInPackage Condition="'$(IncludePdbInPackage)' == '' AND '$(IsFacadeAssembly)' != 'true' AND '$(DebugType)' != 'embedded'">true</IncludePdbInPackage>
      <IncludeResourcesInPackage>true</IncludeResourcesInPackage>
    </PropertyGroup>

    <PropertyGroup Condition="'$(PackagePath)' == ''">
      <PackagePath>lib/$(TargetFramework)</PackagePath>
      <PackagePath Condition="'$(IsFacadeAssembly)' == 'true'">lib/$(TargetFramework);$(RefPackagePath)</PackagePath>
    </PropertyGroup>

    <PropertyGroup>
      <!-- Also in global.json -->
      <DotNetApiDocsNet50>0.0.0.3</DotNetApiDocsNet50>

      <!-- 
        The xml file should ALWAYS come from the dotnet-api-docs artifact.
        This blob lives in Azure storage at https://netcorenativeassets.blob.core.windows.net/resource-packages/external/windows/dotnet-api-docs_net5.0/
        Instructions for updating these artifacts are at https://github.com/dotnet/winforms/blob/master/docs/intellisense.md
      -->
      <IntellisenseXmlDir>$(CommonLibrary_NativeInstallDir)\bin\dotnet-api-docs_net5.0\$(DotNetApiDocsNet50)\_intellisense\net-5.0\</IntellisenseXmlDir>
      <IntellisenseXmlFileSource>$(IntellisenseXmlDir)$(AssemblyName).xml</IntellisenseXmlFileSource>

      <!-- Set the xml destination (for a later step that copies files from the dotnet-api-docs to local build artifacts) -->
      <IntellisenseXmlDest Condition="'$(ProduceReferenceAssembly)' == 'true' And '$(PackageAsRefAndLib)' != 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetRefPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDest Condition="'$(PackageAsRefAndLib)' == 'true'" >$([System.IO.Path]::ChangeExtension('$(TargetPath)', '.xml'))</IntellisenseXmlDest>
      <IntellisenseXmlDestDir Condition="'$(IntellisenseXmlDest)' != ''">$([System.IO.Path]::GetDirectoryName('$(IntellisenseXml)'))</IntellisenseXmlDestDir>

    </PropertyGroup>

    <!-- 
      If this file does NOT exist, and the assembly is NOT a facade assembly, this is an error. 
      This means we build a real assembly that has no associated official intellisense docs.
      Contact the intellisense team for guidance.
    -->
    <Error  Condition="!Exists('$(IntellisenseXmlFileSource)') and '$(IsFacadeAssembly)' != 'true'" 
            Text="$(AssemblyName).xml not found in dotnet-api-docs package. Contact the intellisense team about adding the docs for this assembly."
    />

    <ItemGroup>
      <PackageFile Include="$(TargetPath)" PackagePath="$(PackagePath)" />
      <PackageFile Condition="'$(IncludePdbInPackage)' == 'true'" Include="$(TargetDir)$(TargetName).pdb" PackagePath="$(PackagePath)" />
      <PackageFile Condition="'$(ProduceReferenceAssembly)' == 'true'" Include="$(TargetRefPath)" PackagePath="$(RefPackagePath)" />
      <PackageFile Condition="'$(ProduceReferenceAssembly)' == 'true' Or '$(PackageAsRefAndLib)' == 'true'"
                   Include="$(IntellisenseXmlFileSource)"
                   PackagePath="$(RefPackagePath)" />
      <PackageFile Condition="'$(PackageAsRefAndLib)' == 'true'" Include="$(TargetPath)" PackagePath="$(RefPackagePath)" />
      <PackageFile Condition="'$(IncludeResourcesInPackage)' == 'true'"
                   Include="@(SatelliteDllsProjectOutputGroupOutput->'%(FinalOutputPath)')"
                   PackagePath="$(PackagePath)/%(SatelliteDllsProjectOutputGroupOutput.Culture)" />
    </ItemGroup>
  </Target>

  <!-- xml files can be added here for intellisense -->
  <Target Name="CopyIntellisenseXmlsToTargetRefPath"
          AfterTargets="Build"
          Inputs="$(IntellisenseXmlFileSource)"
          Outputs="$(IntellisenseXmlDest)"
          Condition="'$(ProduceReferenceAssembly)' == 'true' Or '$(PackageAsRefAndLib)' == 'true'">

    <Message Condition="!Exists('$(IntellisenseXmlFileSource)')"
             Text="$(IntellisenseXmlFileSource) is missing" />

    <MakeDir Condition="!Exists('$(IntellisenseXmlDestDir)')"
             Directories="$([System.IO.Path]::GetDirectoryName('$(IntellisenseXmlDest)'))" />

    <Copy SourceFiles="$(IntellisenseXmlFileSource)"
          Condition="Exists('$(IntellisenseXmlFileSource)')"
          DestinationFiles="$(IntellisenseXmlDest)"
          SkipUnchangedFiles="true" />
  </Target>
</Project>