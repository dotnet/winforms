parameters:
  configuration: 'Debug'
  condition: ''
  continueOnError: false
  dependsOn: ''
  enablePublishBuildArtifacts: false
  pool: {}
  runAsPublic: false
  publishUsingPipelines: false
  publishAssetsImmediately: false
  artifactsPublishingAdditionalParameters: ''
  signingValidationAdditionalParameters: ''
jobs:
- job: Asset_Registry_Publish
  dependsOn: ${{ parameters.dependsOn }}
  timeoutInMinutes: 150
  ${{ if eq(parameters.publishAssetsImmediately, 'true') }}:
    displayName: Publish Assets
  ${{ else }}:
    displayName: Publish to Build Asset Registry
  variables:
  - template: /eng/common/templates/variables/pool-providers.yml@self
  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - group: Publish-Build-Assets
    - group: AzureDevOps-Artifact-Feeds-Pats
    - name: runCodesignValidationInjection
      value: false
    - template: /eng/common/templates/post-build/common-variables.yml@self
  pool:
    ${{ if eq(variables['System.TeamProject'], 'DevDiv') }}:
      name: VSEngSS-MicroBuild2022-1ES
      demands: Cmd
    ${{ if ne(variables['System.TeamProject'], 'DevDiv') }}:
      name: $(DncEngInternalBuildPool)
      demands: ImageOverride -equals windows.vs2019.amd64
  templateContext:
    outputs:
    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - output: pipelineArtifact
        displayName: 'Publish ReleaseConfigs Artifact'
        targetPath: '$(Build.StagingDirectory)/ReleaseConfigs.txt'
        publishLocation: Container
        artifactName: ReleaseConfigs
    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - output: pipelineArtifact
        displayName: 'Publish SymbolPublishingExclusionsFile Artifact'
        condition: eq(variables['SymbolExclusionFile'], 'true')
        targetPath: '$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
        publishLocation: Container
        artifactName: ReleaseConfigs
    - output: pipelineArtifact
      displayName: 'Publish Logs'
      condition: always()
      targetPath: '$(Build.SourcesDirectory)/PostBuildLogs'
      publishLocation: Container
      artifactName: PostBuildLogs
  steps:
  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - checkout: self
      fetchDepth: 3
      clean: true
    - task: DownloadBuildArtifacts@0
      displayName: Download artifact
      inputs:
        artifactName: AssetManifests
        downloadPath: '$(Build.StagingDirectory)/Download'
        checkDownloadedFiles: true
      condition: ${{ parameters.condition }}
      continueOnError: ${{ parameters.continueOnError }}
    - task: NuGetAuthenticate@1
    - task: PowerShell@2
      displayName: Publish Build Assets
      inputs:
        filePath: eng\common\sdk-task.ps1
        arguments: -task PublishBuildAssets -restore -msbuildEngine dotnet /p:ManifestsPath='$(Build.StagingDirectory)/Download/AssetManifests' /p:BuildAssetRegistryToken=$(MaestroAccessToken) /p:MaestroApiEndpoint=https://maestro.dot.net /p:PublishUsingPipelines=${{ parameters.publishUsingPipelines }} /p:OfficialBuildId=$(Build.BuildNumber)
      condition: ${{ parameters.condition }}
      continueOnError: ${{ parameters.continueOnError }}
    - task: powershell@2
      displayName: Create ReleaseConfigs Artifact
      inputs:
        targetType: inline
        script: |
          Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value $(BARBuildId)
          Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value "$(DefaultChannels)"
          Add-Content -Path "$(Build.StagingDirectory)/ReleaseConfigs.txt" -Value $(IsStableBuild)
    - task: powershell@2
      displayName: Check if SymbolPublishingExclusionsFile.txt exists
      inputs:
        targetType: inline
        script: |
          $symbolExclusionfile = "$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt"
          if(Test-Path -Path $symbolExclusionfile)
          {
            Write-Host "SymbolExclusionFile exists"
            Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]true"
          }
          else{
           Write-Host "Symbols Exclusion file does not exists"
           Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]false"
          }
    - ${{ if eq(parameters.publishAssetsImmediately, 'true') }}:
      - template: /eng/common/templates/post-build/setup-maestro-vars.yml@self
        parameters:
          BARBuildId: ${{ parameters.BARBuildId }}
          PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
      - task: PowerShell@2
        displayName: Publish Using Darc
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
          arguments: -BuildId $(BARBuildId) -PublishingInfraVersion 3 -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)' -MaestroToken '$(MaestroApiAccessToken)' -WaitPublishingFinish true -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}' -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
    - ${{ if eq(parameters.enablePublishBuildArtifacts, 'true') }}:
      - template: /eng/common/templates/steps/publish-logs.yml@self
        parameters:
          JobLabel: 'Publish_Artifacts_Logs'