<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="pt-BR" original="../SR.resx">
    <body>
      <trans-unit id="WFO1000AnalyzerDescription">
        <source>A property should determine its property content serialization with the DesignerSerializationVisibilityAttribute, DefaultValueAttribute or the ShouldSerializeProperty method.</source>
        <target state="translated">Uma propriedade deve determinar a serialização do conteúdo da propriedade com o método DesignerSerializationVisibilityAttribute, DefaultValueAttribute ou ShouldSerializeProperty.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerMessageFormat">
        <source>Property '{0}' does not configure the code serialization for its property content</source>
        <target state="translated">A propriedade '{0}' não configura a serialização de código para seu conteúdo de propriedade</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerTitle">
        <source>Missing code serialization configuration for property content</source>
        <target state="translated">Configuração de serialização de código ausente para o conteúdo da propriedade</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerDescription">
        <source>Avoid passing a `Func&lt;T&gt;` to `InvokeAsync` where `T` is a `Task` or `ValueTask`, unless your intention is for the delegate to simply be kicked off as an unsupervised task. Instead, use `Func&lt;CancellationToken, ValueTask&gt;` or `Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;`, so that the delegate passed to `InvokeAsync` can be awaited, allowing exceptions to be properly handled.</source>
        <target state="translated">Evite passar uma `Func&lt;T&gt;` para `InvokeAsync` em que `T` é uma `Task` ou `ValueTask`, a menos que sua intenção seja que o delegado seja simplesmente iniciado como uma tarefa não supervisionada. Em vez disso, use `Func&lt;CancellationToken, ValueTask&gt;` ou `Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;`, para que o delegado passado para `InvokeAsync` possa ser aguardado, permitindo que as exceções sejam tratadas adequadamente.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerMessageFormat">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">A tarefa está sendo passada para InvokeAsync sem um token de cancelamento</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerTitle">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">A tarefa está sendo passada para InvokeAsync sem um token de cancelamento</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>