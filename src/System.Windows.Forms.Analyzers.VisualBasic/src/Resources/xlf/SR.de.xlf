<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="de" original="../SR.resx">
    <body>
      <trans-unit id="WFO1000AnalyzerDescription">
        <source>A property should determine its property content serialization with the DesignerSerializationVisibilityAttribute, DefaultValueAttribute or the ShouldSerializeProperty method.</source>
        <target state="translated">Eine Eigenschaft sollte ihre Eigenschafteninhaltsserialisierung mit der DesignerSerializationVisibilityAttribute-, DefaultValueAttribute- oder ShouldSerializeProperty-Methode bestimmen.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerMessageFormat">
        <source>Property '{0}' does not configure the code serialization for its property content</source>
        <target state="translated">Die Eigenschaft "{0}" konfiguriert die Codeserialisierung für ihren Eigenschafteninhalt nicht.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerTitle">
        <source>Missing code serialization configuration for property content</source>
        <target state="translated">Fehlende Codeserialisierungskonfiguration für Eigenschafteninhalt</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerDescription">
        <source>Avoid passing a `Func&lt;T&gt;` to `InvokeAsync` where `T` is a `Task` or `ValueTask`, unless your intention is for the delegate to simply be kicked off as an unsupervised task. Instead, use `Func&lt;CancellationToken, ValueTask&gt;` or `Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;`, so that the delegate passed to `InvokeAsync` can be awaited, allowing exceptions to be properly handled.</source>
        <target state="translated">Vermeiden Sie die Übergabe von „Func&lt;T&gt;“ an „InvokeAsync“, wobei „T“ ein „Task“ oder „ValueTask“ ist, es sei denn, Sie möchten, dass der Delegat einfach als nicht überwachte Aufgabe gestartet wird. Verwenden Sie stattdessen „Func&lt;CancellationToken, ValueTask&gt;“ oder „Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;“, damit der an „InvokeAsync“ übergebene Delegat erwartet werden kann, sodass Ausnahmen ordnungsgemäß behandelt werden können.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerMessageFormat">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">Die Aufgabe wird ohne Abbruchtoken an InvokeAsync übergeben.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerTitle">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">Die Aufgabe wird ohne Abbruchtoken an InvokeAsync übergeben.</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>