<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" source-language="en" target-language="ru" original="../SR.resx">
    <body>
      <trans-unit id="WFO1000AnalyzerDescription">
        <source>A property should determine its property content serialization with the DesignerSerializationVisibilityAttribute, DefaultValueAttribute or the ShouldSerializeProperty method.</source>
        <target state="translated">Свойство должно определять сериализацию содержимого своего свойства с помощью свойства DesignerSerializationVisibilityAttribute, DefaultValueAttribute или метода ShouldSerializeProperty.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerMessageFormat">
        <source>Property '{0}' does not configure the code serialization for its property content</source>
        <target state="translated">Свойство "{0}" не настраивает сериализацию кода для содержимого его свойства</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO1000AnalyzerTitle">
        <source>Missing code serialization configuration for property content</source>
        <target state="translated">Отсутствует конфигурация сериализации кода для содержимого свойства</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerDescription">
        <source>Avoid passing a `Func&lt;T&gt;` to `InvokeAsync` where `T` is a `Task` or `ValueTask`, unless your intention is for the delegate to simply be kicked off as an unsupervised task. Instead, use `Func&lt;CancellationToken, ValueTask&gt;` or `Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;`, so that the delegate passed to `InvokeAsync` can be awaited, allowing exceptions to be properly handled.</source>
        <target state="translated">Избегайте передачи "Func&lt;T&gt;" в "InvokeAsync", где "T" является "Task" или "ValueTask", если вы не хотите, чтобы делегат был просто отброшен как неконтролируемая задача. Вместо этого используйте "Func&lt;CancellationToken, ValueTask&gt;" или "Func&lt;CancellationToken, ValueTask&lt;T&gt;&gt;", чтобы можно было ожидать делегата, переданного в "InvokeAsync". Это позволяет правильно обрабатывать исключения.</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerMessageFormat">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">Задача передается в InvokeAsync без маркера отмены</target>
        <note />
      </trans-unit>
      <trans-unit id="WFO2001AnalyzerTitle">
        <source>Task is being passed to InvokeAsync without a cancellation token</source>
        <target state="translated">Задача передается в InvokeAsync без маркера отмены</target>
        <note />
      </trans-unit>
    </body>
  </file>
</xliff>