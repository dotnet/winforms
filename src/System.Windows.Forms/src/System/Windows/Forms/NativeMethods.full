// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace System.Windows.Forms {
    using Accessibility;
    using System.Runtime.InteropServices;
    using System;
    using System.Security.Permissions;
    using System.Collections;
    using System.IO;
    using System.Text;
    using Microsoft.Win32;



    [System.Runtime.InteropServices.ComVisible(false)]
    internal class NativeMethods {
        public static IntPtr NullIntPtr = ((IntPtr)((int)(0)));
        public static IntPtr InvalidIntPtr = ((IntPtr)((int)(-1)));
        
        public const int APPCMD_CLIENTONLY = 0x00000010,
        APPCMD_FILTERINITS = 0x00000020,
        APPCMD_MASK = 0x00000FF0,
        APPCLASS_STANDARD = 0x00000000,
        APPCLASS_MASK = 0x0000000F,
        APPCLASS_MONITOR = 0x00000001,
        ATTR_INPUT = 0x00,
        ATTR_TARGET_CONVERTED = 0x01,
        ATTR_CONVERTED = 0x02,
        ATTR_TARGET_NOTCONVERTED = 0x03,
        ATTR_INPUT_ERROR = 0x04,
        AUXCAPS_CDAUDIO = 1,
        AUXCAPS_AUXIN = 2,
        AUXCAPS_VOLUME = 0x0001,
        AUXCAPS_LRVOLUME = 0x0002,
        ASYNCH = unchecked((int)0x80),
        ASYNC_MODE_COMPATIBILITY = 0x00000001,
        ASYNC_MODE_DEFAULT = 0x00000000,
        ACTIVEOBJECT_STRONG = 0x0,
        ACTIVEOBJECT_WEAK = 0x1,
        ABM_NEW = 0x00000000,
        ABM_REMOVE = 0x00000001,
        ABM_QUERYPOS = 0x00000002,
        ABM_SETPOS = 0x00000003,
        ABM_GETSTATE = 0x00000004,
        ABM_GETTASKBARPOS = 0x00000005,
        ABM_ACTIVATE = 0x00000006,
        ABM_GETAUTOHIDEBAR = 0x00000007,
        ABM_SETAUTOHIDEBAR = 0x00000008,
        ABM_WINDOWPOSCHANGED = 0x0000009,
        ABN_STATECHANGE = 0x0000000,
        ABN_POSCHANGED = 0x0000001,
        ABN_FULLSCREENAPP = 0x0000002,
        ABN_WINDOWARRANGE = 0x0000003,
        ABS_AUTOHIDE = 0x0000001,
        ABS_ALWAYSONTOP = 0x0000002,
        ABE_LEFT = 0,
        ABE_TOP = 1,
        ABE_RIGHT = 2,
        ABE_BOTTOM = 3,
        AC_LINE_OFFLINE = 0x00,
        AC_LINE_ONLINE = 0x01,
        AC_LINE_BACKUP_POWER = 0x02,
        AC_LINE_UNKNOWN = 0xFF,
        ALG_CLASS_ANY = (0),
        /* NT5 begin */
        AC_SRC_OVER                 =0x00,
        AC_SRC_ALPHA                =0x01,
        /* NT5 end */

        ALG_CLASS_SIGNATURE = (1<<13),
        ALG_CLASS_MSG_ENCRYPT = (2<<13),
        ALG_CLASS_DATA_ENCRYPT = (3<<13),
        ALG_CLASS_HASH = (4<<13),
        ALG_CLASS_KEY_EXCHANGE = (5<<13),
        ALG_TYPE_ANY = (0),
        ALG_TYPE_DSS = (1<<9),
        ALG_TYPE_RSA = (2<<9),
        ALG_TYPE_BLOCK = (3<<9),
        ALG_TYPE_STREAM = (4<<9),
        ALG_SID_ANY = (0),
        ALG_SID_RSA_ANY = 0,
        ALG_SID_RSA_PKCS = 1,
        ALG_SID_RSA_MSATWORK = 2,
        ALG_SID_RSA_ENTRUST = 3,
        ALG_SID_RSA_PGP = 4,
        ALG_SID_DSS_ANY = 0,
        ALG_SID_DSS_PKCS = 1,
        ALG_SID_DSS_DMS = 2,
        ALG_SID_DES = 1,
        ALG_SID_3DES = 3,
        ALG_SID_DESX = 4,
        ALG_SID_IDEA = 5,
        ALG_SID_CAST = 6,
        ALG_SID_SAFERSK64 = 7,
        ALD_SID_SAFERSK128 = 8,
        ALG_SID_RC2 = 2,
        ALG_SID_RC4 = 1,
        ALG_SID_SEAL = 2,
        ALG_SID_MD2 = 1,
        ALG_SID_MD4 = 2,
        ALG_SID_MD5 = 3,
        ALG_SID_SHA = 4,
        ALG_SID_MAC = 5,
        ALG_SID_RIPEMD = 6,
        ALG_SID_RIPEMD160 = 7,
        ALG_SID_SSL3SHAMD5 = 8,
        ALG_SID_EXAMPLE = 80,
        AT_KEYEXCHANGE = 1,
        AT_SIGNATURE = 2,
        ALTERNATE = 1,
        ASPECT_FILTERING = 0x0001,
        ABORTDOC = 2,
        ANTIALIASED_QUALITY = 4,
        ANSI_CHARSET = 0,
        ARABIC_CHARSET = 178,
        ABSOLUTE = 1,
        ANSI_FIXED_FONT = 11,
        ANSI_VAR_FONT = 12,
        AD_COUNTERCLOCKWISE = 1,
        AD_CLOCKWISE = 2,
        ASPECTX = 40,
        ASPECTY = 42,
        ASPECTXY = 44,
        ANYSIZE_ARRAY = 1,
        APPLICATION_ERROR_MASK = 0x20000000,
        ACCESS_SYSTEM_SECURITY = (0x01000000),
        ACL_REVISION = (2),
        ACL_REVISION1 = (1),
        ACL_REVISION2 = (2),
        ACL_REVISION3 = (3),
        ACCESS_ALLOWED_ACE_TYPE = (0x0),
        ACCESS_DENIED_ACE_TYPE = (0x1),
        ARW_BOTTOMLEFT = 0x0000,
        ARW_BOTTOMRIGHT = 0x0001,
        ARW_TOPLEFT = 0x0002,
        ARW_TOPRIGHT = 0x0003,
        ARW_STARTMASK = 0x0003,
        ARW_STARTRIGHT = 0x0001,
        ARW_STARTTOP = 0x0002,
        ARW_LEFT = 0x0000,
        ARW_RIGHT = 0x0000,
        ARW_UP = 0x0004,
        ARW_DOWN = 0x0004,
        ARW_HIDE = 0x0008,
        ARW_VALID = 0x000F,
        ATF_TIMEOUTON = 0x00000001,
        ATF_ONOFFFEEDBACK = 0x00000002,
        ACS_CENTER = 0x0001,
        ACS_TRANSPARENT = 0x0002,
        ACS_AUTOPLAY = 0x0004,
        ACS_TIMER = 0x0008,
        ACM_OPENA = (0x0400+100),
        ACM_OPENW = (0x0400+103),
        ACM_PLAY = (0x0400+101),
        ACM_STOP = (0x0400+102),
        ACN_START = 1,
        ACN_STOP = 2,
        ADVF_NODATA = 1,
        ADVF_ONLYONCE = 2,
        ADVF_PRIMEFIRST = 4,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32,
        ADVFCACHE_DATAONSTOP = 64;

        public const int BOLD_FONTTYPE = 0x0100,
        BAUD_075 = (0x00000001),
        BAUD_110 = (0x00000002),
        BAUD_134_5 = (0x00000004),
        BAUD_150 = (0x00000008),
        BAUD_300 = (0x00000010),
        BAUD_600 = (0x00000020),
        BAUD_1200 = (0x00000040),
        BAUD_1800 = (0x00000080),
        BAUD_2400 = (0x00000100),
        BAUD_4800 = (0x00000200),
        BAUD_7200 = (0x00000400),
        BAUD_9600 = (0x00000800),
        BAUD_14400 = (0x00001000),
        BAUD_19200 = (0x00002000),
        BAUD_38400 = (0x00004000),
        BAUD_56K = (0x00008000),
        BAUD_128K = (0x00010000),
        BAUD_115200 = (0x00020000),
        BAUD_57600 = (0x00040000),
        BAUD_USER = (0x10000000),
        BACKUP_INVALID = 0x00000000,
        BACKUP_DATA = 0x00000001,
        BACKUP_EA_DATA = 0x00000002,
        BACKUP_SECURITY_DATA = 0x00000003,
        BACKUP_ALTERNATE_DATA = 0x00000004,
        BACKUP_LINK = 0x00000005,
        BACKUP_PROPERTY_DATA = 0x00000006,
        BATTERY_FLAG_HIGH = 0x01,
        BATTERY_FLAG_LOW = 0x02,
        BATTERY_FLAG_CRITICAL = 0x04,
        BATTERY_FLAG_CHARGING = 0x08,
        BATTERY_FLAG_NO_BATTERY = unchecked((int)0x80),
        BATTERY_FLAG_UNKNOWN = 0xFF,
        BATTERY_PERCENTAGE_UNKNOWN = 0xFF,
        BATTERY_LIFE_UNKNOWN = unchecked((int)0xFFFFFFFF),
        BACKGROUND_BLUE = 0x0010,
        BACKGROUND_GREEN = 0x0020,
        BACKGROUND_RED = 0x0040,
        BACKGROUND_INTENSITY = 0x0080,
        BLACKONWHITE = 1,
        BANDINFO = 24,
        BEGIN_PATH = 4096,
        BI_RGB = 0,
        BI_RLE8 = 1,
        BI_RLE4 = 2,
        BI_BITFIELDS = 3,
        BALTIC_CHARSET = 186,
        BKMODE_LAST = 2,
        BLACK_BRUSH = 4,
        BLACK_PEN = 7,
        BS_SOLID = 0,
        BS_NULL = 1,
        BS_HOLLOW = 1,
        BS_HATCHED = 2,
        BS_PATTERN = 3,
        BS_INDEXED = 4,
        BS_DIBPATTERN = 5,
        BS_DIBPATTERNPT = 6,
        BS_PATTERN8X8 = 7,
        BS_DIBPATTERN8X8 = 8,
        BS_MONOPATTERN = 9,
        BITSPIXEL = 12,
        BLTALIGNMENT = 119,
        BDR_RAISEDOUTER = 0x0001,
        BDR_SUNKENOUTER = 0x0002,
        BDR_RAISEDINNER = 0x0004,
        BDR_SUNKENINNER = 0x0008,
        BDR_OUTER = 0x0003,
        BDR_INNER = 0x000c,
        BDR_RAISED = 0x0005,
        BDR_SUNKEN = 0x000a,
        BF_LEFT = 0x0001,
        BF_TOP = 0x0002,
        BF_RIGHT = 0x0004,
        BF_BOTTOM = 0x0008,
        BF_TOPLEFT = (0x0002|0x0001),
        BF_TOPRIGHT = (0x0002|0x0004),
        BF_BOTTOMLEFT = (0x0008|0x0001),
        BF_BOTTOMRIGHT = (0x0008|0x0004),
        BF_RECT = (0x0001|0x0002|0x0004|0x0008),
        BF_DIAGONAL = 0x0010,
        BF_DIAGONAL_ENDTOPRIGHT = (0x0010|0x0002|0x0004),
        BF_DIAGONAL_ENDTOPLEFT = (0x0010|0x0002|0x0001),
        BF_DIAGONAL_ENDBOTTOMLEFT = (0x0010|0x0008|0x0001),
        BF_DIAGONAL_ENDBOTTOMRIGHT = (0x0010|0x0008|0x0004),
        BF_MIDDLE = 0x0800,
        BF_SOFT = 0x1000,
        BF_ADJUST = 0x2000,
        BF_FLAT = 0x4000,
        BF_MONO = unchecked((int)0x8000),
        BSM_ALLCOMPONENTS = 0x00000000,
        BSM_VXDS = 0x00000001,
        BSM_NETDRIVER = 0x00000002,
        BSM_INSTALLABLEDRIVERS = 0x00000004,
        BSM_APPLICATIONS = 0x00000008,
        BSM_ALLDESKTOPS = 0x00000010,
        BSF_QUERY = 0x00000001,
        BSF_IGNORECURRENTTASK = 0x00000002,
        BSF_FLUSHDISK = 0x00000004,
        BSF_NOHANG = 0x00000008,
        BSF_POSTMESSAGE = 0x00000010,
        BSF_FORCEIFHUNG = 0x00000020,
        BSF_NOTIMEOUTIFNOTHUNG = 0x00000040,
        BROADCAST_QUERY_DENY = 0x424D5144,
        BS_PUSHBUTTON = 0x00000000,
        BS_DEFPUSHBUTTON = 0x00000001,
        BS_CHECKBOX = 0x00000002,
        BS_AUTOCHECKBOX = 0x00000003,
        BS_RADIOBUTTON = 0x00000004,
        BS_3STATE = 0x00000005,
        BS_AUTO3STATE = 0x00000006,
        BS_GROUPBOX = 0x00000007,
        BS_USERBUTTON = 0x00000008,
        BS_AUTORADIOBUTTON = 0x00000009,
        BS_OWNERDRAW = 0x0000000B,
        BS_LEFTTEXT = 0x00000020,
        BS_TEXT = 0x00000000,
        BS_ICON = 0x00000040,
        BS_BITMAP = 0x00000080,
        BS_LEFT = 0x00000100,
        BS_RIGHT = 0x00000200,
        BS_CENTER = 0x00000300,
        BS_TOP = 0x00000400,
        BS_BOTTOM = 0x00000800,
        BS_VCENTER = 0x00000C00,
        BS_PUSHLIKE = 0x00001000,
        BS_MULTILINE = 0x00002000,
        BS_NOTIFY = 0x00004000,
        BS_FLAT = 0x00008000,
        BS_RIGHTBUTTON = 0x00000020,
        BN_CLICKED = 0,
        BN_PAINT = 1,
        BN_HILITE = 2,
        BN_UNHILITE = 3,
        BN_DISABLE = 4,
        BN_DOUBLECLICKED = 5,
        BN_PUSHED = 2,
        BN_UNPUSHED = 3,
        BN_DBLCLK = 5,
        BN_SETFOCUS = 6,
        BN_KILLFOCUS = 7,
        BM_GETCHECK = 0x00F0,
        BM_SETCHECK = 0x00F1,
        BM_GETSTATE = 0x00F2,
        BM_SETSTATE = 0x00F3,
        BM_SETSTYLE = 0x00F4,
        BM_CLICK = 0x00F5,
        BM_GETIMAGE = 0x00F6,
        BM_SETIMAGE = 0x00F7,
        BST_UNCHECKED = 0x0000,
        BST_CHECKED = 0x0001,
        BST_INDETERMINATE = 0x0002,
        BST_PUSHED = 0x0004,
        BST_FOCUS = 0x0008,
        BLACKNESS = 0x00000042;

        public const int CDERR_DIALOGFAILURE = 0xFFFF,
        CDERR_GENERALCODES = 0x0000,
        CDERR_STRUCTSIZE = 0x0001,
        CDERR_INITIALIZATION = 0x0002,
        CDERR_NOTEMPLATE = 0x0003,
        CDERR_NOHINSTANCE = 0x0004,
        CDERR_LOADSTRFAILURE = 0x0005,
        CDERR_FINDRESFAILURE = 0x0006,
        CDERR_LOADRESFAILURE = 0x0007,
        CDERR_LOCKRESFAILURE = 0x0008,
        CDERR_MEMALLOCFAILURE = 0x0009,
        CDERR_MEMLOCKFAILURE = 0x000A,
        CDERR_NOHOOK = 0x000B,
        CDERR_REGISTERMSGFAIL = 0x000C,
        CFERR_CHOOSEFONTCODES = 0x2000,
        CFERR_NOFONTS = 0x2001,
        CFERR_MAXLESSTHANMIN = 0x2002,
        CCERR_CHOOSECOLORCODES = 0x5000,
        CDN_FIRST = (0-601),
        CDN_LAST = (0-699),
        CDN_INITDONE = ((0-601)-0x0000),
        CDN_SELCHANGE = ((0-601)-0x0001),
        CDN_FOLDERCHANGE = ((0-601)-0x0002),
        CDN_SHAREVIOLATION = ((0-601)-0x0003),
        CDN_HELP = ((0-601)-0x0004),
        CDN_FILEOK = ((0-601)-0x0005),
        CDN_TYPECHANGE = ((0-601)-0x0006),
        CC_RGBINIT = 0x00000001,
        CC_FULLOPEN = 0x00000002,
        CC_PREVENTFULLOPEN = 0x00000004,
        CC_SHOWHELP = 0x00000008,
        CC_ENABLEHOOK = 0x00000010,
        CC_ENABLETEMPLATE = 0x00000020,
        CC_ENABLETEMPLATEHANDLE = 0x00000040,
        CC_SOLIDCOLOR = 0x00000080,
        CC_ANYCOLOR = 0x00000100,
        CF_SCREENFONTS = 0x00000001,
        CF_PRINTERFONTS = 0x00000002,
        CF_BOTH = (0x00000001|0x00000002),
        CF_SHOWHELP = 0x00000004,
        CF_ENABLEHOOK = 0x00000008,
        CF_ENABLETEMPLATE = 0x00000010,
        CF_ENABLETEMPLATEHANDLE = 0x00000020,
        CF_INITTOLOGFONTSTRUCT = 0x00000040,
        CF_USESTYLE = 0x00000080,
        CF_EFFECTS = 0x00000100,
        CF_APPLY = 0x00000200,
        CF_ANSIONLY = 0x00000400,
        CF_SCRIPTSONLY = 0x00000400,
        CF_NOVECTORFONTS = 0x00000800,
        CF_NOOEMFONTS = 0x00000800,
        CF_NOSIMULATIONS = 0x00001000,
        CF_LIMITSIZE = 0x00002000,
        CF_FIXEDPITCHONLY = 0x00004000,
        CF_WYSIWYG = 0x00008000,
        CF_FORCEFONTEXIST = 0x00010000,
        CF_SCALABLEONLY = 0x00020000,
        CF_TTONLY = 0x00040000,
        CF_NOFACESEL = 0x00080000,
        CF_NOSTYLESEL = 0x00100000,
        CF_NOSIZESEL = 0x00200000,
        CF_SELECTSCRIPT = 0x00400000,
        CF_NOSCRIPTSEL = 0x00800000,
        CF_NOVERTFONTS = 0x01000000,
        CD_LBSELNOITEMS = -1,
        CD_LBSELCHANGE = 0,
        CD_LBSELSUB = 1,
        CD_LBSELADD = 2,
        CADV_LATEACK = 0xFFFF,
        CP_WINANSI = 1004,
        CP_WINUNICODE = 1200;
        // CP_WINNEUTRAL = 1004;
        public const int CBF_FAIL_SELFCONNECTIONS = 0x00001000,
        CBF_FAIL_CONNECTIONS = 0x00002000,
        CBF_FAIL_ADVISES = 0x00004000,
        CBF_FAIL_EXECUTES = 0x00008000,
        CBF_FAIL_POKES = 0x00010000,
        CBF_FAIL_REQUESTS = 0x00020000,
        CBF_FAIL_ALLSVRXACTIONS = 0x0003f000,
        CBF_SKIP_CONNECT_CONFIRMS = 0x00040000,
        CBF_SKIP_REGISTRATIONS = 0x00080000,
        CBF_SKIP_UNREGISTRATIONS = 0x00100000,
        CBF_SKIP_DISCONNECTS = 0x00200000,
        CBF_SKIP_ALLNOTIFICATIONS = 0x003c0000,
        ctlFirst = 0x0400,
        ctlLast = 0x04ff,
        chx1 = 0x0410,
        chx2 = 0x0411,
        chx3 = 0x0412,
        chx4 = 0x0413,
        chx5 = 0x0414,
        chx6 = 0x0415,
        chx7 = 0x0416,
        chx8 = 0x0417,
        chx9 = 0x0418,
        chx10 = 0x0419,
        chx11 = 0x041a,
        chx12 = 0x041b,
        chx13 = 0x041c,
        chx14 = 0x041d,
        chx15 = 0x041e,
        chx16 = 0x041f,
        cmb1 = 0x0470,
        cmb2 = 0x0471,
        cmb3 = 0x0472,
        cmb4 = 0x0473,
        cmb5 = 0x0474,
        cmb6 = 0x0475,
        cmb7 = 0x0476,
        cmb8 = 0x0477,
        cmb9 = 0x0478,
        cmb10 = 0x0479,
        cmb11 = 0x047a,
        cmb12 = 0x047b,
        cmb13 = 0x047c,
        cmb14 = 0x047d,
        cmb15 = 0x047e,
        cmb16 = 0x047f,
        CPS_COMPLETE = 0x0001,
        CPS_CONVERT = 0x0002,
        CPS_REVERT = 0x0003,
        CPS_CANCEL = 0x0004,
        CS_INSERTCHAR = 0x2000,
        CS_NOMOVECARET = 0x4000,
        CFS_DEFAULT = 0x0000,
        CFS_RECT = 0x0001,
        CFS_POINT = 0x0002,
        CFS_FORCE_POSITION = 0x0020,
        CFS_CANDIDATEPOS = 0x0040,
        CFS_EXCLUDE = 0x0080,
        CALLBACK_TYPEMASK = 0x00070000,
        CALLBACK_NULL = 0x00000000,
        CALLBACK_WINDOW = 0x00010000,
        CALLBACK_TASK = 0x00020000,
        CALLBACK_FUNCTION = 0x00030000,
        CALLBACK_THREAD = (0x00020000),
        CALLBACK_EVENT = 0x00050000;
        public const char CFSEPCHAR = '+';
        public const int CALL_PENDING = 0x02,
        CWCSTORAGENAME = 32,
        COM_RIGHTS_EXECUTE = 1,
        cbNDRContext = 20,
        CREATE_NEW = 1,
        CREATE_ALWAYS = 2,
        CALLBACK_CHUNK_FINISHED = 0x00000000,
        CALLBACK_STREAM_SWITCH = 0x00000001,
        COPY_FILE_FAIL_IF_EXISTS = 0x00000001,
        COPY_FILE_RESTARTABLE = 0x00000002,
        COMMPROP_INITIALIZED = (unchecked((int)0xE73CF52E)),
                               CREATE_SUSPENDED = 0x00000004,
        CREATE_NEW_CONSOLE = 0x00000010,
        CREATE_NEW_PROCESS_GROUP = 0x00000200,
        CREATE_UNICODE_ENVIRONMENT = 0x00000400,
        CREATE_SEPARATE_WOW_VDM = 0x00000800,
        CREATE_SHARED_WOW_VDM = 0x00001000,
        CREATE_FORCEDOS = 0x00002000,
        CREATE_DEFAULT_ERROR_MODE = 0x04000000,
        CREATE_NO_WINDOW = 0x08000000,
        CREATE_THREAD_DEBUG_EVENT = 2,
        CREATE_PROCESS_DEBUG_EVENT = 3,
        CBR_110 = 110,
        CBR_300 = 300,
        CBR_600 = 600,
        CBR_1200 = 1200,
        CBR_2400 = 2400,
        CBR_4800 = 4800,
        CBR_9600 = 9600,
        CBR_14400 = 14400,
        CBR_19200 = 19200,
        CBR_38400 = 38400,
        CBR_56000 = 56000,
        CBR_57600 = 57600,
        CBR_115200 = 115200,
        CBR_128000 = 128000,
        CBR_256000 = 256000,
        CE_RXOVER = 0x0001,
        CE_OVERRUN = 0x0002,
        CE_RXPARITY = 0x0004,
        CE_FRAME = 0x0008,
        CE_BREAK = 0x0010,
        CE_TXFULL = 0x0100,
        CE_PTO = 0x0200,
        CE_IOE = 0x0400,
        CE_DNS = 0x0800,
        CE_OOP = 0x1000,
        CE_MODE = unchecked((int)0x8000),
        CLRRTS = 4,
        CLRDTR = 6,
        CLRBREAK = 9,
        CAPSLOCK_ON = 0x0080,
        CTRL_C_EVENT = 0,
        CTRL_BREAK_EVENT = 1,
        CTRL_CLOSE_EVENT = 2,
        CTRL_LOGOFF_EVENT = 5,
        CTRL_SHUTDOWN_EVENT = 6,
        CONSOLE_TEXTMODE_BUFFER = 1,
        CRYPT_MODE_CBCI = 6,
        CRYPT_MODE_CFBP = 7,
        CRYPT_MODE_OFBP = 8,
        CRYPT_MODE_CBCOFM = 9,
        CRYPT_MODE_CBCOFMI = 10,
        CALG_MD2 = ((4<<13)|(0)|1),
        CALG_MD4 = ((4<<13)|(0)|2),
        CALG_MD5 = ((4<<13)|(0)|3),
        CALG_SHA = ((4<<13)|(0)|4),
        CALG_MAC = ((4<<13)|(0)|5),
        CALG_RSA_SIGN = ((1<<13)|(2<<9)|0),
        CALG_DSS_SIGN = ((1<<13)|(1<<9)|0),
        CALG_RSA_KEYX = ((5<<13)|(2<<9)|0),
        CALG_DES = ((3<<13)|(3<<9)|1),
        CALG_RC2 = ((3<<13)|(3<<9)|2),
        CALG_RC4 = ((3<<13)|(4<<9)|1),
        CALG_SEAL = ((3<<13)|(4<<9)|2),
        CRYPT_VERIFYCONTEXT = unchecked((int)0xF0000000),
        CRYPT_NEWKEYSET = unchecked((int)0x8),
        CRYPT_DELETEKEYSET = 0x10,
        CRYPT_EXPORTABLE = 0x00000001,
        CRYPT_USER_PROTECTED = 0x00000002,
        CRYPT_CREATE_SALT = 0x00000004,
        CRYPT_UPDATE_KEY = 0x00000008,
        CRYPT_USERDATA = 1,
        CRYPT_MODE_CBC = 1,
        CRYPT_MODE_ECB = 2,
        CRYPT_MODE_OFB = 3,
        CRYPT_MODE_CFB = 4,
        CRYPT_MODE_CTS = 5,
        CRYPT_ENCRYPT = 0x0001,
        CRYPT_DECRYPT = 0x0002,
        CRYPT_READ = 0x0008,
        CRYPT_WRITE = 0x0010,
        CRYPT_MAC = 0x0020;
        public const bool CRYPT_FAILED = false,
        CRYPT_SUCCEED = true;
        public const int CRYPT_FIRST = 1,
        CRYPT_NEXT = 2,
        CRYPT_IMPL_HARDWARE = 1,
        CRYPT_IMPL_SOFTWARE = 2,
        CRYPT_IMPL_MIXED = 3,
        CRYPT_IMPL_UNKNOWN = 4,
        CUR_BLOB_VERSION = 2,
        CO_E_INIT_TLS = (int)unchecked((int)0x80004006),
        CO_E_INIT_SHARED_ALLOCATOR = (int)unchecked((int)0x80004007),
        CO_E_INIT_MEMORY_ALLOCATOR = (int)unchecked((int)0x80004008),
        CO_E_INIT_CLASS_CACHE = (int)unchecked((int)0x80004009),
        CO_E_INIT_RPC_CHANNEL = (int)unchecked((int)0x8000400A),
        CO_E_INIT_TLS_SET_CHANNEL_CONTROL = (int)unchecked((int)0x8000400B),
        CO_E_INIT_TLS_CHANNEL_CONTROL = (int)unchecked((int)0x8000400C),
        CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = (int)unchecked((int)0x8000400D),
        CO_E_INIT_SCM_MUTEX_EXISTS = (int)unchecked((int)0x8000400E),
        CO_E_INIT_SCM_FILE_MAPPING_EXISTS = (int)unchecked((int)0x8000400F),
        CO_E_INIT_SCM_MAP_VIEW_OF_FILE = (int)unchecked((int)0x80004010),
        CO_E_INIT_SCM_EXEC_FAILURE = (int)unchecked((int)0x80004011),
        CO_E_INIT_ONLY_SINGLE_THREADED = (int)unchecked((int)0x80004012),
        CO_E_CANT_REMOTE = (int)unchecked((int)0x80004013),
        CO_E_BAD_SERVER_NAME = (int)unchecked((int)0x80004014),
        CO_E_WRONG_SERVER_IDENTITY = (int)unchecked((int)0x80004015),
        CO_E_OLE1DDE_DISABLED = (int)unchecked((int)0x80004016),
        CO_E_RUNAS_SYNTAX = (int)unchecked((int)0x80004017),
        CO_E_CREATEPROCESS_FAILURE = (int)unchecked((int)0x80004018),
        CO_E_RUNAS_CREATEPROCESS_FAILURE = (int)unchecked((int)0x80004019),
        CO_E_RUNAS_LOGON_FAILURE = (int)unchecked((int)0x8000401A),
        CO_E_LAUNCH_PERMSSION_DENIED = (int)unchecked((int)0x8000401B),
        CO_E_START_SERVICE_FAILURE = (int)unchecked((int)0x8000401C),
        CO_E_REMOTE_COMMUNICATION_FAILURE = (int)unchecked((int)0x8000401D),
        CO_E_SERVER_START_TIMEOUT = (int)unchecked((int)0x8000401E),
        CO_E_CLSREG_INCONSISTENT = (int)unchecked((int)0x8000401F),
        CO_E_IIDREG_INCONSISTENT = (int)unchecked((int)0x80004020),
        CO_E_NOT_SUPPORTED = (int)unchecked((int)0x80004021),
        CLASSFACTORY_E_FIRST = (int)unchecked((int)0x80040110),
        CLASSFACTORY_E_LAST = (int)unchecked((int)0x8004011F),
        CLASSFACTORY_S_FIRST = 0x00040110,
        CLASSFACTORY_S_LAST = 0x0004011F,
        CLASS_E_NOAGGREGATION = (int)unchecked((int)0x80040110),
        CLASS_E_CLASSNOTAVAILABLE = (int)unchecked((int)0x80040111),
        CACHE_E_FIRST = (int)unchecked((int)0x80040170),
        CACHE_E_LAST = (int)unchecked((int)0x8004017F),
        CACHE_S_FIRST = 0x00040170,
        CACHE_S_LAST = 0x0004017F,
        CACHE_E_NOCACHE_UPDATED = (int)unchecked((int)0x80040170),
        CLIENTSITE_E_FIRST = (int)unchecked((int)0x80040190),
        CLIENTSITE_E_LAST = (int)unchecked((int)0x8004019F),
        CLIENTSITE_S_FIRST = 0x00040190,
        CLIENTSITE_S_LAST = 0x0004019F,
        CONVERT10_E_FIRST = unchecked((int)0x800401C0),
        CONVERT10_E_LAST = unchecked((int)0x800401CF),
        CONVERT10_S_FIRST = 0x000401C0,
        CONVERT10_S_LAST = 0x000401CF,
        CONVERT10_E_OLESTREAM_GET = unchecked((int)0x800401C0),
        CONVERT10_E_OLESTREAM_PUT = unchecked((int)0x800401C1),
        CONVERT10_E_OLESTREAM_FMT = unchecked((int)0x800401C2),
        CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = unchecked((int)0x800401C3),
        CONVERT10_E_STG_FMT = unchecked((int)0x800401C4),
        CONVERT10_E_STG_NO_STD_STREAM = unchecked((int)0x800401C5),
        CONVERT10_E_STG_DIB_TO_BITMAP = unchecked((int)0x800401C6),
        CLIPBRD_E_FIRST = unchecked((int)0x800401D0),
        CLIPBRD_E_LAST = unchecked((int)0x800401DF),
        CLIPBRD_S_FIRST = 0x000401D0,
        CLIPBRD_S_LAST = 0x000401DF,
        CLIPBRD_E_CANT_OPEN = unchecked((int)0x800401D0),
        CLIPBRD_E_CANT_EMPTY = unchecked((int)0x800401D1),
        CLIPBRD_E_CANT_SET = unchecked((int)0x800401D2),
        CLIPBRD_E_BAD_DATA = unchecked((int)0x800401D3),
        CLIPBRD_E_CANT_CLOSE = unchecked((int)0x800401D4),
        CO_E_FIRST = unchecked((int)0x800401F0),
        CO_E_LAST = unchecked((int)0x800401FF),
        CO_S_FIRST = 0x000401F0,
        CO_S_LAST = 0x000401FF,
        CO_E_NOTINITIALIZED = unchecked((int)0x800401F0),
        CO_E_ALREADYINITIALIZED = unchecked((int)0x800401F1),
        CO_E_CANTDETERMINECLASS = unchecked((int)0x800401F2),
        CO_E_CLASSSTRING = unchecked((int)0x800401F3),
        CO_E_IIDSTRING = unchecked((int)0x800401F4),
        CO_E_APPNOTFOUND = unchecked((int)0x800401F5),
        CO_E_APPSINGLEUSE = unchecked((int)0x800401F6),
        CO_E_ERRORINAPP = unchecked((int)0x800401F7),
        CO_E_DLLNOTFOUND = unchecked((int)0x800401F8),
        CO_E_ERRORINDLL = unchecked((int)0x800401F9),
        CO_E_WRONGOSFORAPP = unchecked((int)0x800401FA),
        CO_E_OBJNOTREG = unchecked((int)0x800401FB),
        CO_E_OBJISREG = unchecked((int)0x800401FC),
        CO_E_OBJNOTCONNECTED = unchecked((int)0x800401FD),
        CO_E_APPDIDNTREG = unchecked((int)0x800401FE),
        CO_E_RELEASED = unchecked((int)0x800401FF),
        CACHE_S_FORMATETC_NOTSUPPORTED = 0x00040170,
        CACHE_S_SAMECACHE = 0x00040171,
        CACHE_S_SOMECACHES_NOTUPDATED = 0x00040172,
        CONVERT10_S_NO_PRESENTATION = 0x000401C0,
        CO_E_CLASS_CREATE_FAILED = unchecked((int)0x80080001),
        CO_E_SCM_ERROR = unchecked((int)0x80080002),
        CO_E_SCM_RPC_FAILURE = unchecked((int)0x80080003),
        CO_E_BAD_PATH = unchecked((int)0x80080004),
        CO_E_SERVER_EXEC_FAILURE = unchecked((int)0x80080005),
        CO_E_OBJSRV_RPC_FAILURE = unchecked((int)0x80080006),
        CO_E_SERVER_STOPPING = unchecked((int)0x80080008),
        CO_S_NOTALLINTERFACES = 0x00080012,
        CERT_E_EXPIRED = unchecked((int)0x800B0101),
        CERT_E_VALIDIYPERIODNESTING = unchecked((int)0x800B0102),
        CERT_E_ROLE = unchecked((int)0x800B0103),
        CERT_E_CRITICAL = unchecked((int)0x800B0105),
        CERT_E_PURPOSE = unchecked((int)0x800B0106),
        CERT_E_ISSUERCHAINING = unchecked((int)0x800B0107),
        CERT_E_MALFORMED = unchecked((int)0x800B0108),
        CERT_E_UNTRUSTEDROOT = unchecked((int)0x800B0109),
        CERT_E_CHAINING = unchecked((int)0x800B010A),
        COMPLEXREGION = 3,
        COLORONCOLOR = 3,
        CLIP_TO_PATH = 4097,
        CLOSECHANNEL = 4112,
        CM_OUT_OF_GAMUT = 255,
        CM_IN_GAMUT = 0,
        CLIP_DEFAULT_PRECIS = 0,
        CLIP_CHARACTER_PRECIS = 1,
        CLIP_STROKE_PRECIS = 2,
        CLIP_MASK = 0xf,
        CLIP_LH_ANGLES = (1<<4),
        CLIP_TT_ALWAYS = (2<<4),
        CLIP_EMBEDDED = (8<<4),
        CHINESEBIG5_CHARSET = 136,
        CLR_INVALID = unchecked((int)0xFFFFFFFF),
        CURVECAPS = 28,
        CLIPCAPS = 36,
        COLORRES = 108,
        CC_NONE = 0,
        CC_CIRCLES = 1,
        CC_PIE = 2,
        CC_CHORD = 4,
        CC_ELLIPSES = 8,
        CC_WIDE = 16,
        CC_STYLED = 32,
        CC_WIDESTYLED = 64,
        CC_INTERIORS = 128,
        CC_ROUNDRECT = 256,
        CP_NONE = 0,
        CP_RECTANGLE = 1,
        CP_REGION = 2,
        CBM_INIT = 0x04,
        CCHDEVICENAME = 32,
        CCHFORMNAME = 32,
        CA_NEGATIVE = 0x0001,
        CA_LOG_FILTER = 0x0002,
        CONNECT_UPDATE_PROFILE = 0x00000001,
        CONNECT_UPDATE_RECENT = 0x00000002,
        CONNECT_TEMPORARY = 0x00000004,
        CONNECT_INTERACTIVE = 0x00000008,
        CONNECT_PROMPT = 0x00000010,
        CONNECT_NEED_DRIVE = 0x00000020,
        CONNECT_REFCOUNT = 0x00000040,
        CONNECT_REDIRECT = 0x00000080,
        CONNECT_LOCALDRIVE = 0x00000100,
        CONNECT_CURRENT_MEDIA = 0x00000200,
        CONNECT_DEFERRED = 0x00000400,
        CONNECT_RESERVED = unchecked((int)0xFF000000),
        CONNDLG_RO_PATH = 0x00000001,
        CONNDLG_CONN_POINT = 0x00000002,
        CONNDLG_USE_MRU = 0x00000004,
        CONNDLG_HIDE_BOX = 0x00000008,
        CONNDLG_PERSIST = 0x00000010,
        CONNDLG_NOT_PERSIST = 0x00000020,
        CT_CTYPE1 = 0x00000001,
        CT_CTYPE2 = 0x00000002,
        CT_CTYPE3 = 0x00000004,
        C1_UPPER = 0x0001,
        C1_LOWER = 0x0002,
        C1_DIGIT = 0x0004,
        C1_SPACE = 0x0008,
        C1_PUNCT = 0x0010,
        C1_CNTRL = 0x0020,
        C1_BLANK = 0x0040,
        C1_XDIGIT = 0x0080,
        C1_ALPHA = 0x0100,
        C2_LEFTTORIGHT = 0x0001,
        C2_RIGHTTOLEFT = 0x0002,
        C2_EUROPENUMBER = 0x0003,
        C2_EUROPESEPARATOR = 0x0004,
        C2_EUROPETERMINATOR = 0x0005,
        C2_ARABICNUMBER = 0x0006,
        C2_COMMONSEPARATOR = 0x0007,
        C2_BLOCKSEPARATOR = 0x0008,
        C2_SEGMENTSEPARATOR = 0x0009,
        C2_WHITESPACE = 0x000A,
        C2_OTHERNEUTRAL = 0x000B,
        C2_NOTAPPLICABLE = 0x0000,
        C3_NONSPACING = 0x0001,
        C3_DIACRITIC = 0x0002,
        C3_VOWELMARK = 0x0004,
        C3_SYMBOL = 0x0008,
        C3_KATAKANA = 0x0010,
        C3_HIRAGANA = 0x0020,
        C3_HALFWIDTH = 0x0040,
        C3_FULLWIDTH = 0x0080,
        C3_IDEOGRAPH = 0x0100,
        C3_KASHIDA = 0x0200,
        C3_LEXICAL = 0x0400,
        C3_ALPHA = unchecked((int)0x8000),
        C3_NOTAPPLICABLE = 0x0000,
        CP_INSTALLED = 0x00000001,
        CP_SUPPORTED = 0x00000002,
        CP_ACP = 0,
        CP_OEMCP = 1,
        CP_MACCP = 2,
        CP_UTF7 = 65000,
        CP_UTF8 = 65001,
        CTRY_DEFAULT = 0,
        CTRY_AUSTRALIA = 61,
        CTRY_AUSTRIA = 43,
        CTRY_BELGIUM = 32,
        CTRY_BRAZIL = 55,
        CTRY_BULGARIA = 359,
        CTRY_CANADA = 2,
        CTRY_CROATIA = 385,
        CTRY_CZECH = 42,
        CTRY_DENMARK = 45,
        CTRY_FINLAND = 358,
        CTRY_FRANCE = 33,
        CTRY_GERMANY = 49,
        CTRY_GREECE = 30,
        CTRY_HONG_KONG = 852,
        CTRY_HUNGARY = 36,
        CTRY_ICELAND = 354,
        CTRY_IRELAND = 353,
        CTRY_ITALY = 39,
        CTRY_JAPAN = 81,
        CTRY_MEXICO = 52,
        CTRY_NETHERLANDS = 31,
        CTRY_NEW_ZEALAND = 64,
        CTRY_NORWAY = 47,
        CTRY_POLAND = 48,
        CTRY_PORTUGAL = 351,
        CTRY_PRCHINA = 86,
        CTRY_ROMANIA = 40,
        CTRY_RUSSIA = 7,
        CTRY_SINGAPORE = 65,
        CTRY_SLOVAK = 42,
        CTRY_SLOVENIA = 386,
        CTRY_SOUTH_KOREA = 82,
        CTRY_SPAIN = 34,
        CTRY_SWEDEN = 46,
        CTRY_SWITZERLAND = 41,
        CTRY_TAIWAN = 886,
        CTRY_TURKEY = 90,
        CTRY_UNITED_KINGDOM = 44,
        CTRY_UNITED_STATES = 1,
        CAL_ICALINTVALUE = 0x00000001,
        CAL_SCALNAME = 0x00000002,
        CAL_IYEAROFFSETRANGE = 0x00000003,
        CAL_SERASTRING = 0x00000004,
        CAL_SSHORTDATE = 0x00000005,
        CAL_SLONGDATE = 0x00000006,
        CAL_SDAYNAME1 = 0x00000007,
        CAL_SDAYNAME2 = 0x00000008,
        CAL_SDAYNAME3 = 0x00000009,
        CAL_SDAYNAME4 = 0x0000000a,
        CAL_SDAYNAME5 = 0x0000000b,
        CAL_SDAYNAME6 = 0x0000000c,
        CAL_SDAYNAME7 = 0x0000000d,
        CAL_SABBREVDAYNAME1 = 0x0000000e,
        CAL_SABBREVDAYNAME2 = 0x0000000f,
        CAL_SABBREVDAYNAME3 = 0x00000010,
        CAL_SABBREVDAYNAME4 = 0x00000011,
        CAL_SABBREVDAYNAME5 = 0x00000012,
        CAL_SABBREVDAYNAME6 = 0x00000013,
        CAL_SABBREVDAYNAME7 = 0x00000014,
        CAL_SMONTHNAME1 = 0x00000015,
        CAL_SMONTHNAME2 = 0x00000016,
        CAL_SMONTHNAME3 = 0x00000017,
        CAL_SMONTHNAME4 = 0x00000018,
        CAL_SMONTHNAME5 = 0x00000019,
        CAL_SMONTHNAME6 = 0x0000001a,
        CAL_SMONTHNAME7 = 0x0000001b,
        CAL_SMONTHNAME8 = 0x0000001c,
        CAL_SMONTHNAME9 = 0x0000001d,
        CAL_SMONTHNAME10 = 0x0000001e,
        CAL_SMONTHNAME11 = 0x0000001f,
        CAL_SMONTHNAME12 = 0x00000020,
        CAL_SMONTHNAME13 = 0x00000021,
        CAL_SABBREVMONTHNAME1 = 0x00000022,
        CAL_SABBREVMONTHNAME2 = 0x00000023,
        CAL_SABBREVMONTHNAME3 = 0x00000024,
        CAL_SABBREVMONTHNAME4 = 0x00000025,
        CAL_SABBREVMONTHNAME5 = 0x00000026,
        CAL_SABBREVMONTHNAME6 = 0x00000027,
        CAL_SABBREVMONTHNAME7 = 0x00000028,
        CAL_SABBREVMONTHNAME8 = 0x00000029,
        CAL_SABBREVMONTHNAME9 = 0x0000002a,
        CAL_SABBREVMONTHNAME10 = 0x0000002b,
        CAL_SABBREVMONTHNAME11 = 0x0000002c,
        CAL_SABBREVMONTHNAME12 = 0x0000002d,
        CAL_SABBREVMONTHNAME13 = 0x0000002e,
        CAL_GREGORIAN = 1,
        CAL_GREGORIAN_US = 2,
        CAL_JAPAN = 3,
        CAL_TAIWAN = 4,
        CAL_KOREA = 5,
        CAL_HIJRI = 6,
        CAL_THAI = 7,
        CAL_HEBREW = 8;
        public const int CONTAINER_INHERIT_ACE = (0x2),
        COMPRESSION_FORMAT_NONE = (0x0000),
        COMPRESSION_FORMAT_DEFAULT = (0x0001),
        COMPRESSION_FORMAT_LZNT1 = (0x0002),
        COMPRESSION_ENGINE_STANDARD = (0x0000),
        COMPRESSION_ENGINE_MAXIMUM = (0x0100),
        CS_VREDRAW = 0x0001,
        CS_HREDRAW = 0x0002,
        CS_KEYCVTWINDOW = 0x0004,
        CS_DBLCLKS = 0x0008,
        CS_OWNDC = 0x0020,
        CS_CLASSDC = 0x0040,
        CS_PARENTDC = 0x0080,
        CS_NOKEYCVT = 0x0100,
        CS_NOCLOSE = 0x0200,
        CS_SAVEBITS = 0x0800,
        CS_BYTEALIGNCLIENT = 0x1000,
        CS_BYTEALIGNWINDOW = 0x2000,
        CS_GLOBALCLASS = 0x4000,
        CS_IME = 0x00010000,
        CF_TEXT = 1,
        CF_BITMAP = 2,
        CF_METAFILEPICT = 3,
        CF_SYLK = 4,
        CF_DIF = 5,
        CF_TIFF = 6,
        CF_OEMTEXT = 7,
        CF_DIB = 8,
        CF_PALETTE = 9,
        CF_PENDATA = 10,
        CF_RIFF = 11,
        CF_WAVE = 12,
        CF_UNICODETEXT = 13,
        CF_ENHMETAFILE = 14,
        CF_HDROP = 15,
        CF_LOCALE = 16,
        CF_MAX = 17,
        CF_OWNERDISPLAY = 0x0080,
        CF_DSPTEXT = 0x0081,
        CF_DSPBITMAP = 0x0082,
        CF_DSPMETAFILEPICT = 0x0083,
        CF_DSPENHMETAFILE = 0x008E,
        CF_PRIVATEFIRST = 0x0200,
        CF_PRIVATELAST = 0x02FF,
        CF_GDIOBJFIRST = 0x0300,
        CF_GDIOBJLAST = 0x03FF,
        CW_USEDEFAULT = (unchecked((int)0x80000000)),
        CWP_ALL = 0x0000,
        CWP_SKIPINVISIBLE = 0x0001,
        CWP_SKIPDISABLED = 0x0002,
        CWP_SKIPTRANSPARENT = 0x0004,
        CTLCOLOR_MSGBOX = 0,
        CTLCOLOR_EDIT = 1,
        CTLCOLOR_LISTBOX = 2,
        CTLCOLOR_BTN = 3,
        CTLCOLOR_DLG = 4,
        CTLCOLOR_SCROLLBAR = 5,
        CTLCOLOR_STATIC = 6,
        CTLCOLOR_MAX = 7,
        COLOR_SCROLLBAR = 0,
        COLOR_BACKGROUND = 1,
        COLOR_ACTIVECAPTION = 2,
        COLOR_INACTIVECAPTION = 3,
        COLOR_MENU = 4,
        COLOR_WINDOW = 5,
        COLOR_WINDOWFRAME = 6,
        COLOR_MENUTEXT = 7,
        COLOR_WINDOWTEXT = 8,
        COLOR_CAPTIONTEXT = 9,
        COLOR_ACTIVEBORDER = 10,
        COLOR_INACTIVEBORDER = 11,
        COLOR_APPWORKSPACE = 12,
        COLOR_HIGHLIGHT = 13,
        COLOR_HIGHLIGHTTEXT = 14,
        COLOR_BTNFACE = 15,
        COLOR_BTNSHADOW = 16,
        COLOR_GRAYTEXT = 17,
        COLOR_BTNTEXT = 18,
        COLOR_INACTIVECAPTIONTEXT = 19,
        COLOR_BTNHIGHLIGHT = 20,
        COLOR_3DDKSHADOW = 21,
        COLOR_3DLIGHT = 22,
        COLOR_INFOTEXT = 23,
        COLOR_INFOBK = 24,
        COLOR_DESKTOP = 1,
        COLOR_3DFACE = 15,
        COLOR_3DSHADOW = 16,
        COLOR_3DHIGHLIGHT = 20,
        COLOR_3DHILIGHT = 20,
        COLOR_BTNHILIGHT = 20,
        CB_OKAY = 0,
        CB_ERR = (-1),
        CB_ERRSPACE = (-2),
        CBN_ERRSPACE = (-1),
        CBN_SELCHANGE = 1,
        CBN_DBLCLK = 2,
        CBN_SETFOCUS = 3,
        CBN_KILLFOCUS = 4,
        CBN_EDITCHANGE = 5,
        CBN_EDITUPDATE = 6,
        CBN_DROPDOWN = 7,
        CBN_CLOSEUP = 8,
        CBN_SELENDOK = 9,
        CBN_SELENDCANCEL = 10,
        CBS_SIMPLE = 0x0001,
        CBS_DROPDOWN = 0x0002,
        CBS_DROPDOWNLIST = 0x0003,
        CBS_OWNERDRAWFIXED = 0x0010,
        CBS_OWNERDRAWVARIABLE = 0x0020,
        CBS_AUTOHSCROLL = 0x0040,
        CBS_OEMCONVERT = 0x0080,
        CBS_SORT = 0x0100,
        CBS_HASSTRINGS = 0x0200,
        CBS_NOINTEGRALHEIGHT = 0x0400,
        CBS_DISABLENOSCROLL = 0x0800,
        CBS_UPPERCASE = 0x2000,
        CBS_LOWERCASE = 0x4000,
        CB_GETEDITSEL = 0x0140,
        CB_LIMITTEXT = 0x0141,
        CB_SETEDITSEL = 0x0142,
        CB_ADDSTRING = 0x0143,
        CB_DELETESTRING = 0x0144,
        CB_DIR = 0x0145,
        CB_GETCOUNT = 0x0146,
        CB_GETCURSEL = 0x0147,
        CB_GETLBTEXT = 0x0148,
        CB_GETLBTEXTLEN = 0x0149,
        CB_INSERTSTRING = 0x014A,
        CB_RESETCONTENT = 0x014B,
        CB_FINDSTRING = 0x014C,
        CB_SELECTSTRING = 0x014D,
        CB_SETCURSEL = 0x014E,
        CB_SHOWDROPDOWN = 0x014F,
        CB_GETITEMDATA = 0x0150,
        CB_SETITEMDATA = 0x0151,
        CB_GETDROPPEDCONTROLRECT = 0x0152,
        CB_SETITEMHEIGHT = 0x0153,
        CB_GETITEMHEIGHT = 0x0154,
        CB_SETEXTENDEDUI = 0x0155,
        CB_GETEXTENDEDUI = 0x0156,
        CB_GETDROPPEDSTATE = 0x0157,
        CB_FINDSTRINGEXACT = 0x0158,
        CB_SETLOCALE = 0x0159,
        CB_GETLOCALE = 0x015A,
        CB_GETTOPINDEX = 0x015b,
        CB_SETTOPINDEX = 0x015c,
        CB_GETHORIZONTALEXTENT = 0x015d,
        CB_SETHORIZONTALEXTENT = 0x015e,
        CB_GETDROPPEDWIDTH = 0x015f,
        CB_SETDROPPEDWIDTH = 0x0160,
        CB_INITSTORAGE = 0x0161,
        CB_MSGMAX = 0x0162;
        // CB_MSGMAX = 0x015B;
        public const int CDS_UPDATEREGISTRY = 0x00000001,
        CDS_TEST = 0x00000002,
        CDS_FULLSCREEN = 0x00000004,
        CDS_GLOBAL = 0x00000008,
        CDS_SET_PRIMARY = 0x00000010,
        CDS_RESET = 0x40000000,
        CDS_SETRECT = 0x20000000,
        CDS_NORESET = 0x10000000,
        CBEN_FIRST = (0-800),
        CBEN_LAST = (0-830),
        CDRF_DODEFAULT = 0x00000000,
        CDRF_NEWFONT = 0x00000002,
        CDRF_SKIPDEFAULT = 0x00000004,
        CDRF_NOTIFYPOSTPAINT = 0x00000010,
        CDRF_NOTIFYITEMDRAW = 0x00000020,
        CDRF_NOTIFYSUBITEMDRAW = CDRF_NOTIFYITEMDRAW,
        CDRF_NOTIFYPOSTERASE = 0x00000040,
        CDRF_NOTIFYITEMERASE = 0x00000080,
        CDDS_PREPAINT = 0x00000001,
        CDDS_POSTPAINT = 0x00000002,
        CDDS_PREERASE = 0x00000003,
        CDDS_POSTERASE = 0x00000004,
        CDDS_ITEM = 0x00010000,
        CDDS_SUBITEM = 0x00020000,
        CDDS_ITEMPREPAINT = (0x00010000|0x00000001),
        CDDS_ITEMPOSTPAINT = (0x00010000|0x00000002),
        CDDS_ITEMPREERASE = (0x00010000|0x00000003),
        CDDS_ITEMPOSTERASE = (0x00010000|0x00000004),
        CDIS_SELECTED = 0x0001,
        CDIS_GRAYED = 0x0002,
        CDIS_DISABLED = 0x0004,
        CDIS_CHECKED = 0x0008,
        CDIS_FOCUS = 0x0010,
        CDIS_DEFAULT = 0x0020,
        CDIS_HOT = 0x0040,
        CDIS_MARKED = 0x0080,
        CDIS_INDETERMINATE = 0x0100,
        CLR_NONE = unchecked((int)0xFFFFFFFF),
        CLR_DEFAULT = unchecked((int)0xFF000000),
        CLR_HILIGHT = unchecked((int)0xFF000000),
        CMB_MASKED = 0x02,
        CCS_TOP = 0x00000001,
        CCS_NOMOVEY = 0x00000002,
        CCS_BOTTOM = 0x00000003,
        CCS_NORESIZE = 0x00000004,
        CCS_NOPARENTALIGN = 0x00000008,
        CCS_ADJUSTABLE = 0x00000020,
        CCS_NODIVIDER = 0x00000040,
        CCS_VERT = 0x00000080,
        CCS_LEFT = (0x00000080|0x00000001),
        CCS_RIGHT = (0x00000080|0x00000003),
        CCS_NOMOVEX = (0x00000080|0x00000002),
        CBEIF_TEXT = 0x00000001,
        CBEIF_IMAGE = 0x00000002,
        CBEIF_SELECTEDIMAGE = 0x00000004,
        CBEIF_OVERLAY = 0x00000008,
        CBEIF_INDENT = 0x00000010,
        CBEIF_LPARAM = 0x00000020,
        CBEIF_DI_SETITEM = 0x10000000,
        CBEM_INSERTITEMA = (0x0400+1),
        CBEM_SETIMAGELIST = (0x0400+2),
        CBEM_GETIMAGELIST = (0x0400+3),
        CBEM_GETITEMA = (0x0400+4),
        CBEM_SETITEMA = (0x0400+5),
        CBEM_DELETEITEM = 0x0144,
        CBEM_GETCOMBOCONTROL = (0x0400+6),
        CBEM_GETEDITCONTROL = (0x0400+7),
        CBEM_SETEXSTYLE = (0x0400+8),
        CBEM_GETEXSTYLE = (0x0400+9),
        CBEM_HASEDITCHANGED = (0x0400+10),
        CBEM_INSERTITEMW = (0x0400+11),
        CBEM_SETITEMW = (0x0400+12),
        CBEM_GETITEMW = (0x0400+13),
        CBES_EX_NOEDITIMAGE = 0x00000001,
        CBES_EX_NOEDITIMAGEINDENT = 0x00000002,
        CBES_EX_PATHWORDBREAKPROC = 0x00000004,
        CBEN_GETDISPINFO = ((0-800)-0),
        CBEN_INSERTITEM = ((0-800)-1),
        CBEN_DELETEITEM = ((0-800)-2),
        CBEN_BEGINEDIT = ((0-800)-4),
        CBEN_ENDEDITA = ((0-800)-5),
        CBEN_ENDEDITW = ((0-800)-6),
        CBENF_KILLFOCUS = 1,
        CBENF_RETURN = 2,
        CBENF_ESCAPE = 3,
        CBENF_DROPDOWN = 4,
        CBEMAXSTRLEN = 260,
        CDM_FIRST = (0x0400+100),
        CDM_LAST = (0x0400+200),
        CDM_GETSPEC = ((0x0400+100)+0x0000),
        CDM_GETFILEPATH = ((0x0400+100)+0x0001),
        CDM_GETFOLDERPATH = ((0x0400+100)+0x0002),
        CDM_GETFOLDERIDLIST = ((0x0400+100)+0x0003),
        CDM_SETCONTROLTEXT = ((0x0400+100)+0x0004),
        CDM_HIDECONTROL = ((0x0400+100)+0x0005),
        CDM_SETDEFEXT = ((0x0400+100)+0x0006),
        CONTROL_C_EXIT = (unchecked((int)0xC000013A)),
        CCM_FIRST = 0x2000,
        CCM_SETBKCOLOR = (CCM_FIRST + 1),
        CCM_SETCOLORSCHEME = (CCM_FIRST + 2),
        CCM_GETCOLORSCHEME = (CCM_FIRST + 3),
        CCM_GETDROPTARGET = (CCM_FIRST + 4),
        CCM_SETUNICODEFORMAT = (CCM_FIRST + 5),
        CCM_GETUNICODEFORMAT = (CCM_FIRST + 6);

        public const int  CLSCTX_INPROC_SERVER  = 0x1,
        CLSCTX_INPROC_HANDLER   = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16  = unchecked((int)0x8),
        CLSCTX_REMOTE_SERVER    = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_INPROC_SERVERX86 = 0x40,
        CLSCTX_INPROC_HANDLERX86    = unchecked((int)0x80),
        CLSCTX_ESERVER_HANDLER  = 0x100,
        CLSCTX_RESERVED = 0x200,
        CLSCTX_NO_CODE_DOWNLOAD = 0x400;
        
        public const int CTRLINFO_EATS_RETURN    = 1,
        CTRLINFO_EATS_ESCAPE    = 2;

        public const int DN_DEFAULTPRN = 0x0001,
        DDE_FACK = unchecked((int)0x8000),
        DDE_FBUSY = 0x4000,
        DDE_FDEFERUPD = 0x4000,
        DDE_FACKREQ = unchecked((int)0x8000),
        DDE_FRELEASE = 0x2000,
        DDE_FREQUESTED = 0x1000,
        DDE_FAPPSTATUS = 0x00ff,
        DDE_FNOTPROCESSED = 0x0000,
        DDE_FACKRESERVED = (~(unchecked((int)0x8000)|0x4000|0x00ff)),
        DDE_FADVRESERVED = (~(unchecked((int)0x8000)|0x4000)),
        DDE_FDATRESERVED = (~(unchecked((int)0x8000)|0x2000|0x1000)),
        DDE_FPOKRESERVED = (~(0x2000)),
        DNS_REGISTER = 0x0001,
        DNS_UNREGISTER = 0x0002,
        DNS_FILTERON = 0x0004,
        DNS_FILTEROFF = 0x0008,
        DMLERR_NO_ERROR = 0,
        DMLERR_FIRST = 0x4000,
        DMLERR_ADVACKTIMEOUT = 0x4000,
        DMLERR_BUSY = 0x4001,
        DMLERR_DATAACKTIMEOUT = 0x4002,
        DMLERR_DLL_NOT_INITIALIZED = 0x4003,
        DMLERR_DLL_USAGE = 0x4004,
        DMLERR_EXECACKTIMEOUT = 0x4005,
        DMLERR_INVALIDPARAMETER = 0x4006,
        DMLERR_LOW_MEMORY = 0x4007,
        DMLERR_MEMORY_ERROR = 0x4008,
        DMLERR_NOTPROCESSED = 0x4009,
        DMLERR_NO_CONV_ESTABLISHED = 0x400a,
        DMLERR_POKEACKTIMEOUT = 0x400b,
        DMLERR_POSTMSG_FAILED = 0x400c,
        DMLERR_REENTRANCY = 0x400d,
        DMLERR_SERVER_DIED = 0x400e,
        DMLERR_SYS_ERROR = 0x400f,
        DMLERR_UNADVACKTIMEOUT = 0x4010,
        DMLERR_UNFOUND_QUEUE_ID = 0x4011,
        DMLERR_LAST = 0x4011,
        DIALOPTION_BILLING = 0x00000040,
        DIALOPTION_QUIET = 0x00000080,
        DIALOPTION_DIALTONE = 0x00000100,
        DRV_LOAD = 0x0001,
        DRV_ENABLE = 0x0002,
        DRV_OPEN = 0x0003,
        DRV_CLOSE = 0x0004,
        DRV_DISABLE = 0x0005,
        DRV_FREE = 0x0006,
        DRV_CONFIGURE = 0x0007,
        DRV_QUERYCONFIGURE = 0x0008,
        DRV_INSTALL = 0x0009,
        DRV_REMOVE = 0x000A,
        DRV_EXITSESSION = 0x000B,
        DRV_POWER = 0x000F,
        DRV_RESERVED = 0x0800,
        DRV_USER = 0x4000,
        DRVCNF_CANCEL = 0x0000,
        DRVCNF_OK = 0x0001,
        DRVCNF_RESTART = 0x0002,
        DRV_CANCEL = 0x0000,
        DRV_OK = 0x0001,
        DRV_RESTART = 0x0002,
        DRV_MCI_FIRST = 0x0800,
        DRV_MCI_LAST = (0x0800+0xFFF),
                       DEREGISTERED = 0x05,
        DUPLICATE = 0x06,
        DUPLICATE_DEREG = 0x07,
        DISPID_UNKNOWN = (-1),
        DISPID_VALUE = (0),
        DISPID_PROPERTYPUT = (-3),
        DISPID_NEWENUM = (-4),
        DISPID_EVALUATE = (-5),
        DISPID_DESTRUCTOR = (-7),
        DISPID_COLLECT = (-8),
        DISPATCH_METHOD = 0x1,
        DISPATCH_PROPERTYGET = 0x2,
        DISPATCH_PROPERTYPUT = 0x4,
        DISPATCH_PROPERTYPUTREF = unchecked((int)0x8),
        DROPEFFECT_NONE = (0),
        DROPEFFECT_COPY = (1),
        DROPEFFECT_MOVE = (2),
        DROPEFFECT_LINK = (4),
        DROPEFFECT_SCROLL = (unchecked((int)0x80000000)),
        DD_DEFSCROLLINSET = (11),
        DD_DEFSCROLLDELAY = (50),
        DD_DEFSCROLLINTERVAL = (50),
        DD_DEFDRAGDELAY = (200),
        DD_DEFDRAGMINDIST = (2),
        DCE_C_ERROR_STRING_LEN = 256,
        DATABITS_5 = (0x0001),
        DATABITS_6 = (0x0002),
        DATABITS_7 = (0x0004),
        DATABITS_8 = (0x0008),
        DATABITS_16 = (0x0010),
        DATABITS_16X = (0x0020),
        DTR_CONTROL_DISABLE = 0x00,
        DTR_CONTROL_ENABLE = 0x01,
        DTR_CONTROL_HANDSHAKE = 0x02,
        DEBUG_PROCESS = 0x00000001,
        DEBUG_ONLY_THIS_PROCESS = 0x00000002,
        DETACHED_PROCESS = 0x00000008,
        DRIVE_UNKNOWN = 0,
        DRIVE_NO_ROOT_DIR = 1,
        DRIVE_REMOVABLE = 2,
        DRIVE_FIXED = 3,
        DRIVE_REMOTE = 4,
        DRIVE_CDROM = 5,
        DRIVE_RAMDISK = 6,
        DONT_RESOLVE_DLL_REFERENCES = 0x00000001,
        DDD_RAW_TARGET_PATH = 0x00000001,
        DDD_REMOVE_DEFINITION = 0x00000002,
        DDD_EXACT_MATCH_ON_REMOVE = 0x00000004,
        DDD_NO_BROADCAST_SYSTEM = 0x00000008,
        DOCKINFO_UNDOCKED = (0x1),
        DOCKINFO_DOCKED = (0x2),
        DOCKINFO_USER_SUPPLIED = (0x4),
        DOCKINFO_USER_UNDOCKED = ((0x4)|(0x1)),
        DOCKINFO_USER_DOCKED = ((0x4)|(0x2)),
        DOUBLE_CLICK = 0x0002,
        DM_UPDATE = 1,
        DM_COPY = 2,
        DM_PROMPT = 4,
        DM_MODIFY = 8,
        DM_IN_BUFFER = 8,
        DM_IN_PROMPT = 4,
        DM_OUT_BUFFER = 2,
        DM_OUT_DEFAULT = 1,
        DC_FIELDS = 1,
        DC_PAPERS = 2,
        DC_PAPERSIZE = 3,
        DC_MINEXTENT = 4,
        DC_MAXEXTENT = 5,
        DC_BINS = 6,
        DC_DUPLEX = 7,
        DC_SIZE = 8,
        DC_EXTRA = 9,
        DC_VERSION = 10,
        DC_DRIVER = 11,
        DC_BINNAMES = 12,
        DC_ENUMRESOLUTIONS = 13,
        DC_FILEDEPENDENCIES = 14,
        DC_TRUETYPE = 15,
        DC_PAPERNAMES = 16,
        DC_ORIENTATION = 17,
        DC_COPIES = 18,
        DV_E_FORMATETC = unchecked((int)0x80040064),
        DV_E_DVTARGETDEVICE = unchecked((int)0x80040065),
        DV_E_STGMEDIUM = unchecked((int)0x80040066),
        DV_E_STATDATA = unchecked((int)0x80040067),
        DV_E_LINDEX = unchecked((int)0x80040068),
        DV_E_TYMED = unchecked((int)0x80040069),
        DV_E_CLIPFORMAT = unchecked((int)0x8004006A),
        DV_E_DVASPECT = unchecked((int)0x8004006B),
        DV_E_DVTARGETDEVICE_SIZE = unchecked((int)0x8004006C),
        DV_E_NOIVIEWOBJECT = unchecked((int)0x8004006D),
        DRAGDROP_E_FIRST = unchecked((int)0x80040100),
        DRAGDROP_E_LAST = unchecked((int)0x8004010F),
        DRAGDROP_S_FIRST = 0x00040100,
        DRAGDROP_S_LAST = 0x0004010F,
        DRAGDROP_E_NOTREGISTERED = unchecked((int)0x80040100),
        DRAGDROP_E_ALREADYREGISTERED = unchecked((int)0x80040101),
        DRAGDROP_E_INVALIDHWND = unchecked((int)0x80040102),
        DATA_E_FIRST = unchecked((int)0x80040130),
        DATA_E_LAST = unchecked((int)0x8004013F),
        DATA_S_FIRST = 0x00040130,
        DATA_S_LAST = 0x0004013F,
        DRAGDROP_S_DROP = 0x00040100,
        DRAGDROP_S_CANCEL = 0x00040101,
        DRAGDROP_S_USEDEFAULTCURSORS = 0x00040102,
        DATA_S_SAMEFORMATETC = 0x00040130,
        DISP_E_UNKNOWNINTERFACE = unchecked((int)0x80020001),
        DISP_E_MEMBERNOTFOUND = unchecked((int)0x80020003),
        DISP_E_PARAMNOTFOUND = unchecked((int)0x80020004),
        DISP_E_TYPEMISMATCH = unchecked((int)0x80020005),
        DISP_E_UNKNOWNNAME = unchecked((int)0x80020006),
        DISP_E_NONAMEDARGS = unchecked((int)0x80020007),
        DISP_E_BADVARTYPE = unchecked((int)0x80020008),
        DISP_E_EXCEPTION = unchecked((int)0x80020009),
        DISP_E_OVERFLOW = unchecked((int)0x8002000A),
        DISP_E_BADINDEX = unchecked((int)0x8002000B),
        DISP_E_UNKNOWNLCID = unchecked((int)0x8002000C),
        DISP_E_ARRAYISLOCKED = unchecked((int)0x8002000D),
        DISP_E_BADPARAMCOUNT = unchecked((int)0x8002000E),
        DISP_E_PARAMNOTOPTIONAL = unchecked((int)0x8002000F),
        DISP_E_BADCALLEE = unchecked((int)0x80020010),
        DISP_E_NOTACOLLECTION = unchecked((int)0x80020011),
        DIGSIG_E_ENCODE = unchecked((int)0x800B0005),
        DIGSIG_E_DECODE = unchecked((int)0x800B0006),
        DIGSIG_E_EXTENSIBILITY = unchecked((int)0x800B0007),
        DIGSIG_E_CRYPTO = unchecked((int)0x800B0008),
        DCB_RESET = 0x0001,
        DCB_ACCUMULATE = 0x0002,
        DCB_DIRTY = 0x0002,
        DCB_SET = (0x0001|0x0002),
        DCB_ENABLE = 0x0004,
        DCB_DISABLE = 0x0008,
        DRAFTMODE = 7,
        DEVICEDATA = 19,
        DRAWPATTERNRECT = 25,
        DOWNLOADFACE = 514,
        DOWNLOADHEADER = 4111,
        DEFAULT_QUALITY = 0,
        DRAFT_QUALITY = 1,
        DEFAULT_PITCH = 0,
        DEFAULT_CHARSET = 1,
        DEVICE_FONTTYPE = 0x002,
        DKGRAY_BRUSH = 3,
        DEVICE_DEFAULT_FONT = 14,
        DEFAULT_PALETTE = 15,
        DEFAULT_GUI_FONT = 17,
        DRIVERVERSION = 0,
        DESKTOPVERTRES = 117,
        DESKTOPHORZRES = 118,
        DT_PLOTTER = 0,
        DT_RASDISPLAY = 1,
        DT_RASPRINTER = 2,
        DT_RASCAMERA = 3,
        DT_CHARSTREAM = 4,
        DT_METAFILE = 5,
        DT_DISPFILE = 6,
        DIB_RGB_COLORS = 0,
        DIB_PAL_COLORS = 1,
        DM_SPECVERSION = 0x0401,
        DM_ORIENTATION = 0x00000001,
        DM_PAPERSIZE = 0x00000002,
        DM_PAPERLENGTH = 0x00000004,
        DM_PAPERWIDTH = 0x00000008,
        DM_SCALE = 0x00000010,
        DM_COPIES = 0x00000100,
        DM_DEFAULTSOURCE = 0x00000200,
        DM_PRINTQUALITY = 0x00000400,
        DM_COLOR = 0x00000800,
        DM_DUPLEX = 0x00001000,
        DM_YRESOLUTION = 0x00002000,
        DM_TTOPTION = 0x00004000,
        DM_COLLATE = 0x00008000,
        DM_FORMNAME = 0x00010000,
        DM_LOGPIXELS = 0x00020000,
        DM_BITSPERPEL = 0x00040000,
        DM_PELSWIDTH = 0x00080000,
        DM_PELSHEIGHT = 0x00100000,
        DM_DISPLAYFLAGS = 0x00200000,
        DM_DISPLAYFREQUENCY = 0x00400000,
        DM_PANNINGWIDTH = 0x00800000,
        DM_PANNINGHEIGHT = 0x01000000,
        DM_ICMMETHOD = 0x02000000,
        DM_ICMINTENT = 0x04000000,
        DM_MEDIATYPE = 0x08000000,
        DM_DITHERTYPE = 0x10000000,
        DM_ICCMANUFACTURER = 0x20000000,
        DM_ICCMODEL = 0x40000000,
        DMORIENT_PORTRAIT = 1,
        DMORIENT_LANDSCAPE = 2,
        DMPAPER_LETTER = 1,
        DMPAPER_LETTERSMALL = 2,
        DMPAPER_TABLOID = 3,
        DMPAPER_LEDGER = 4,
        DMPAPER_LEGAL = 5,
        DMPAPER_STATEMENT = 6,
        DMPAPER_EXECUTIVE = 7,
        DMPAPER_A3 = 8,
        DMPAPER_A4 = 9,
        DMPAPER_A4SMALL = 10,
        DMPAPER_A5 = 11,
        DMPAPER_B4 = 12,
        DMPAPER_B5 = 13,
        DMPAPER_FOLIO = 14,
        DMPAPER_QUARTO = 15,
        DMPAPER_10X14 = 16,
        DMPAPER_11X17 = 17,
        DMPAPER_NOTE = 18,
        DMPAPER_ENV_9 = 19,
        DMPAPER_ENV_10 = 20,
        DMPAPER_ENV_11 = 21,
        DMPAPER_ENV_12 = 22,
        DMPAPER_ENV_14 = 23,
        DMPAPER_CSHEET = 24,
        DMPAPER_DSHEET = 25,
        DMPAPER_ESHEET = 26,
        DMPAPER_ENV_DL = 27,
        DMPAPER_ENV_C5 = 28,
        DMPAPER_ENV_C3 = 29,
        DMPAPER_ENV_C4 = 30,
        DMPAPER_ENV_C6 = 31,
        DMPAPER_ENV_C65 = 32,
        DMPAPER_ENV_B4 = 33,
        DMPAPER_ENV_B5 = 34,
        DMPAPER_ENV_B6 = 35,
        DMPAPER_ENV_ITALY = 36,
        DMPAPER_ENV_MONARCH = 37,
        DMPAPER_ENV_PERSONAL = 38,
        DMPAPER_FANFOLD_US = 39,
        DMPAPER_FANFOLD_STD_GERMAN = 40,
        DMPAPER_FANFOLD_LGL_GERMAN = 41,
        DMPAPER_ISO_B4 = 42,
        DMPAPER_JAPANESE_POSTCARD = 43,
        DMPAPER_9X11 = 44,
        DMPAPER_10X11 = 45,
        DMPAPER_15X11 = 46,
        DMPAPER_ENV_INVITE = 47,
        DMPAPER_RESERVED_48 = 48,
        DMPAPER_RESERVED_49 = 49,
        DMPAPER_LETTER_EXTRA = 50,
        DMPAPER_LEGAL_EXTRA = 51,
        DMPAPER_TABLOID_EXTRA = 52,
        DMPAPER_A4_EXTRA = 53,
        DMPAPER_LETTER_TRANSVERSE = 54,
        DMPAPER_A4_TRANSVERSE = 55,
        DMPAPER_LETTER_EXTRA_TRANSVERSE = 56,
        DMPAPER_A_PLUS = 57,
        DMPAPER_B_PLUS = 58,
        DMPAPER_LETTER_PLUS = 59,
        DMPAPER_A4_PLUS = 60,
        DMPAPER_A5_TRANSVERSE = 61,
        DMPAPER_B5_TRANSVERSE = 62,
        DMPAPER_A3_EXTRA = 63,
        DMPAPER_A5_EXTRA = 64,
        DMPAPER_B5_EXTRA = 65,
        DMPAPER_A2 = 66,
        DMPAPER_A3_TRANSVERSE = 67,
        DMPAPER_A3_EXTRA_TRANSVERSE = 68,

        // WINVER >= 0x0500
        DMPAPER_DBL_JAPANESE_POSTCARD = 69, /* Japanese Double Postcard 200 x 148 mm */
        DMPAPER_A6 =                  70,  /* A6 105 x 148 mm                 */
        DMPAPER_JENV_KAKU2 =          71,  /* Japanese Envelope Kaku #2       */
        DMPAPER_JENV_KAKU3 =          72,  /* Japanese Envelope Kaku #3       */
        DMPAPER_JENV_CHOU3 =          73,  /* Japanese Envelope Chou #3       */
        DMPAPER_JENV_CHOU4 =          74,  /* Japanese Envelope Chou #4       */
        DMPAPER_LETTER_ROTATED =      75,  /* Letter Rotated 11 x 8 1/2 11 in */
        DMPAPER_A3_ROTATED =          76,  /* A3 Rotated 420 x 297 mm         */
        DMPAPER_A4_ROTATED =          77,  /* A4 Rotated 297 x 210 mm         */
        DMPAPER_A5_ROTATED =          78,  /* A5 Rotated 210 x 148 mm         */
        DMPAPER_B4_JIS_ROTATED =      79,  /* B4 (JIS) Rotated 364 x 257 mm   */
        DMPAPER_B5_JIS_ROTATED =      80,  /* B5 (JIS) Rotated 257 x 182 mm   */
        DMPAPER_JAPANESE_POSTCARD_ROTATED = 81, /* Japanese Postcard Rotated 148 x 100 mm */
        DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82, /* Double Japanese Postcard Rotated 148 x 200 mm */
        DMPAPER_A6_ROTATED =          83,  /* A6 Rotated 148 x 105 mm         */
        DMPAPER_JENV_KAKU2_ROTATED =  84,  /* Japanese Envelope Kaku #2 Rotated */
        DMPAPER_JENV_KAKU3_ROTATED =  85,  /* Japanese Envelope Kaku #3 Rotated */
        DMPAPER_JENV_CHOU3_ROTATED =  86,  /* Japanese Envelope Chou #3 Rotated */
        DMPAPER_JENV_CHOU4_ROTATED =  87,  /* Japanese Envelope Chou #4 Rotated */
        DMPAPER_B6_JIS =              88,  /* B6 (JIS) 128 x 182 mm           */
        DMPAPER_B6_JIS_ROTATED =      89,  /* B6 (JIS) Rotated 182 x 128 mm   */
        DMPAPER_12X11 =               90,  /* 12 x 11 in                      */
        DMPAPER_JENV_YOU4 =           91,  /* Japanese Envelope You #4        */
        DMPAPER_JENV_YOU4_ROTATED =   92,  /* Japanese Envelope You #4 Rotated*/
        DMPAPER_P16K =                93,  /* PRC 16K 146 x 215 mm            */
        DMPAPER_P32K =                94,  /* PRC 32K 97 x 151 mm             */
        DMPAPER_P32KBIG =             95,  /* PRC 32K(Big) 97 x 151 mm        */
        DMPAPER_PENV_1 =              96,  /* PRC Envelope #1 102 x 165 mm    */
        DMPAPER_PENV_2 =              97,  /* PRC Envelope #2 102 x 176 mm    */
        DMPAPER_PENV_3 =              98,  /* PRC Envelope #3 125 x 176 mm    */
        DMPAPER_PENV_4 =              99,  /* PRC Envelope #4 110 x 208 mm    */
        DMPAPER_PENV_5 =              100, /* PRC Envelope #5 110 x 220 mm    */
        DMPAPER_PENV_6 =              101, /* PRC Envelope #6 120 x 230 mm    */
        DMPAPER_PENV_7 =              102, /* PRC Envelope #7 160 x 230 mm    */
        DMPAPER_PENV_8 =              103, /* PRC Envelope #8 120 x 309 mm    */
        DMPAPER_PENV_9 =              104, /* PRC Envelope #9 229 x 324 mm    */
        DMPAPER_PENV_10 =             105, /* PRC Envelope #10 324 x 458 mm   */
        DMPAPER_P16K_ROTATED =        106, /* PRC 16K Rotated                 */
        DMPAPER_P32K_ROTATED =        107, /* PRC 32K Rotated                 */
        DMPAPER_P32KBIG_ROTATED =     108, /* PRC 32K(Big) Rotated            */
        DMPAPER_PENV_1_ROTATED =      109, /* PRC Envelope #1 Rotated 165 x 102 mm */
        DMPAPER_PENV_2_ROTATED =      110, /* PRC Envelope #2 Rotated 176 x 102 mm */
        DMPAPER_PENV_3_ROTATED =      111, /* PRC Envelope #3 Rotated 176 x 125 mm */
        DMPAPER_PENV_4_ROTATED =      112, /* PRC Envelope #4 Rotated 208 x 110 mm */
        DMPAPER_PENV_5_ROTATED =      113, /* PRC Envelope #5 Rotated 220 x 110 mm */
        DMPAPER_PENV_6_ROTATED =      114, /* PRC Envelope #6 Rotated 230 x 120 mm */
        DMPAPER_PENV_7_ROTATED =      115, /* PRC Envelope #7 Rotated 230 x 160 mm */
        DMPAPER_PENV_8_ROTATED =      116, /* PRC Envelope #8 Rotated 309 x 120 mm */
        DMPAPER_PENV_9_ROTATED =      117, /* PRC Envelope #9 Rotated 324 x 229 mm */
        DMPAPER_PENV_10_ROTATED =     118, /* PRC Envelope #10 Rotated 458 x 324 mm */

        DMPAPER_LAST = DMPAPER_PENV_10_ROTATED,
        DMPAPER_USER = 256,

        DMBIN_UPPER = 1,
        DMBIN_ONLYONE = 1,
        DMBIN_LOWER = 2,
        DMBIN_MIDDLE = 3,
        DMBIN_MANUAL = 4,
        DMBIN_ENVELOPE = 5,
        DMBIN_ENVMANUAL = 6,
        DMBIN_AUTO = 7,
        DMBIN_TRACTOR = 8,
        DMBIN_SMALLFMT = 9,
        DMBIN_LARGEFMT = 10,
        DMBIN_LARGECAPACITY = 11,
        DMBIN_CASSETTE = 14,
        DMBIN_FORMSOURCE = 15,
        DMBIN_LAST = 15,
        DMBIN_USER = 256,
        DMRES_DRAFT = -1,
        DMRES_LOW = -2,
        DMRES_MEDIUM = -3,
        DMRES_HIGH = -4,
        DMCOLOR_MONOCHROME = 1,
        DMCOLOR_COLOR = 2,
        DMDUP_SIMPLEX = 1,
        DMDUP_VERTICAL = 2,
        DMDUP_HORIZONTAL = 3,
        DMTT_BITMAP = 1,
        DMTT_DOWNLOAD = 2,
        DMTT_SUBDEV = 3,
        DMTT_DOWNLOAD_OUTLINE = 4,
        DMCOLLATE_FALSE = 0,
        DMCOLLATE_TRUE = 1,
        DMDISPLAYFLAGS_TEXTMODE = 0x00000004,
        DMICMMETHOD_NONE = 1,
        DMICMMETHOD_SYSTEM = 2,
        DMICMMETHOD_DRIVER = 3,
        DMICMMETHOD_DEVICE = 4,
        DMICMMETHOD_USER = 256,
        DMICM_SATURATE = 1,
        DMICM_CONTRAST = 2,
        DMICM_COLORMETRIC = 3,
        DMICM_USER = 256,
        DMMEDIA_STANDARD = 1,
        DMMEDIA_TRANSPARENCY = 2,
        DMMEDIA_GLOSSY = 3,
        DMMEDIA_USER = 256,
        DMDITHER_NONE = 1,
        DMDITHER_COARSE = 2,
        DMDITHER_FINE = 3,
        DMDITHER_LINEART = 4,
        DMDITHER_GRAYSCALE = 5,
        DMDITHER_USER = 256,
        DC_BINADJUST = 19,
        DC_EMF_COMPLIANT = 20,
        DC_DATATYPE_PRODUCED = 21,
        DC_COLLATE = 22,
        DCTT_BITMAP = 0x0000001,
        DCTT_DOWNLOAD = 0x0000002,
        DCTT_SUBDEV = 0x0000004,
        DCTT_DOWNLOAD_OUTLINE = 0x0000008,
        DCBA_FACEUPNONE = 0x0000,
        DCBA_FACEUPCENTER = 0x0001,
        DCBA_FACEUPLEFT = 0x0002,
        DCBA_FACEUPRIGHT = 0x0003,
        DCBA_FACEDOWNNONE = 0x0100,
        DCBA_FACEDOWNCENTER = 0x0101,
        DCBA_FACEDOWNLEFT = 0x0102,
        DCBA_FACEDOWNRIGHT = 0x0103,
        DI_APPBANDING = 0x0001,
        DISC_UPDATE_PROFILE = 0x00000001,
        DISC_NO_FORCE = 0x00000040,
        DATE_SHORTDATE = 0x00000001,
        DATE_LONGDATE = 0x00000002,
        DATE_USE_ALT_CALENDAR = 0x00000004,
        DUPLICATE_CLOSE_SOURCE = 0x00000001,
        DUPLICATE_SAME_ACCESS = 0x00000002,
        DELETE = (0x00010000),
        DOMAIN_USER_RID_ADMIN = (0x000001F4),
        DOMAIN_USER_RID_GUEST = (0x000001F5),
        DOMAIN_GROUP_RID_ADMINS = (0x00000200),
        DOMAIN_GROUP_RID_USERS = (0x00000201),
        DOMAIN_GROUP_RID_GUESTS = (0x00000202),
        DOMAIN_ALIAS_RID_ADMINS = (0x00000220),
        DOMAIN_ALIAS_RID_USERS = (0x00000221),
        DOMAIN_ALIAS_RID_GUESTS = (0x00000222),
        DOMAIN_ALIAS_RID_POWER_USERS = (0x00000223),
        DOMAIN_ALIAS_RID_ACCOUNT_OPS = (0x00000224),
        DOMAIN_ALIAS_RID_SYSTEM_OPS = (0x00000225),
        DOMAIN_ALIAS_RID_PRINT_OPS = (0x00000226),
        DOMAIN_ALIAS_RID_BACKUP_OPS = (0x00000227),
        DOMAIN_ALIAS_RID_REPLICATOR = (0x00000228),
        DACL_SECURITY_INFORMATION = (0x00000004),
        DLL_PROCESS_ATTACH = 1,
        DLL_THREAD_ATTACH = 2,
        DLL_THREAD_DETACH = 3,
        DLL_PROCESS_DETACH = 0,
        DBG_CONTINUE = (0x00010002),
        DBG_TERMINATE_THREAD = (0x40010003),
        DBG_TERMINATE_PROCESS = (0x40010004),
        DBG_CONTROL_C = (0x40010005),
        DBG_CONTROL_BREAK = (0x40010008),
        DBG_EXCEPTION_NOT_HANDLED = (unchecked((int)0x80010001)),
        DEF_PRIORITY = 1,
        DI_CHANNEL = 1,
        DI_READ_SPOOL_JOB = 3,
        DIFFERENCE = 11,
        DESKTOP_READOBJECTS = 0x0001,
        DESKTOP_CREATEWINDOW = 0x0002,
        DESKTOP_CREATEMENU = 0x0004,
        DESKTOP_HOOKCONTROL = 0x0008,
        DESKTOP_JOURNALRECORD = 0x0010,
        DESKTOP_JOURNALPLAYBACK = 0x0020,
        DESKTOP_ENUMERATE = 0x0040,
        DESKTOP_WRITEOBJECTS = 0x0080,
        DESKTOP_SWITCHDESKTOP = 0x0100,
        DF_ALLOWOTHERACCOUNTHOOK = 0x0001,
        DFC_CAPTION = 1,
        DFC_MENU = 2,
        DFC_SCROLL = 3,
        DFC_BUTTON = 4,
        DFCS_CAPTIONCLOSE = 0x0000,
        DFCS_CAPTIONMIN = 0x0001,
        DFCS_CAPTIONMAX = 0x0002,
        DFCS_CAPTIONRESTORE = 0x0003,
        DFCS_CAPTIONHELP = 0x0004,
        DFCS_MENUARROW = 0x0000,
        DFCS_MENUCHECK = 0x0001,
        DFCS_MENUBULLET = 0x0002,
        DFCS_MENUARROWRIGHT = 0x0004,
        DFCS_SCROLLUP = 0x0000,
        DFCS_SCROLLDOWN = 0x0001,
        DFCS_SCROLLLEFT = 0x0002,
        DFCS_SCROLLRIGHT = 0x0003,
        DFCS_SCROLLCOMBOBOX = 0x0005,
        DFCS_SCROLLSIZEGRIP = 0x0008,
        DFCS_SCROLLSIZEGRIPRIGHT = 0x0010,
        DFCS_BUTTONCHECK = 0x0000,
        DFCS_BUTTONRADIOIMAGE = 0x0001,
        DFCS_BUTTONRADIOMASK = 0x0002,
        DFCS_BUTTONRADIO = 0x0004,
        DFCS_BUTTON3STATE = 0x0008,
        DFCS_BUTTONPUSH = 0x0010,
        DFCS_INACTIVE = 0x0100,
        DFCS_PUSHED = 0x0200,
        DFCS_CHECKED = 0x0400,
        DFCS_ADJUSTRECT = 0x2000,
        DFCS_FLAT = 0x4000,
        DFCS_MONO = unchecked((int)0x8000),
        DC_ACTIVE = 0x0001,
        DC_SMALLCAP = 0x0002,
        DC_ICON = 0x0004,
        DC_TEXT = 0x0008,
        DC_INBUTTON = 0x0010,
        DLGWINDOWEXTRA = 30,
        DOF_EXECUTABLE = unchecked((int)0x8001),
        DOF_DOCUMENT = unchecked((int)0x8002),
        DOF_DIRECTORY = unchecked((int)0x8003),
        DOF_MULTIPLE = unchecked((int)0x8004),
        DOF_PROGMAN = 0x0001,
        DOF_SHELLDATA = 0x0002,
        DO_DROPFILE = 0x454C4946,
        DO_PRINTFILE = 0x544E5250,
        DT_TOP = 0x00000000,
        DT_LEFT = 0x00000000,
        DT_CENTER = 0x00000001,
        DT_RIGHT = 0x00000002,
        DT_VCENTER = 0x00000004,
        DT_BOTTOM = 0x00000008,
        DT_WORDBREAK = 0x00000010,
        DT_SINGLELINE = 0x00000020,
        DT_EXPANDTABS = 0x00000040,
        DT_TABSTOP = 0x00000080,
        DT_NOCLIP = 0x00000100,
        DT_CALCRECT = 0x00000400,
        DT_NOPREFIX = 0x00000800,
        DT_INTERNAL = 0x00001000,
        DT_EDITCONTROL = 0x00002000,
        DT_PATH_ELLIPSIS = 0x00004000,
        DT_END_ELLIPSIS = 0x00008000,
        DT_MODIFYSTRING = 0x00010000,
        DT_RTLREADING = 0x00020000,
        DT_WORD_ELLIPSIS = 0x00040000,
        DST_COMPLEX = 0x0000,
        DST_TEXT = 0x0001,
        DST_PREFIXTEXT = 0x0002,
        DST_ICON = 0x0003,
        DST_BITMAP = 0x0004,
        DSS_NORMAL = 0x0000,
        DSS_UNION = 0x0010,
        DSS_DISABLED = 0x0020,
        DSS_MONO = 0x0080,
        DSS_RIGHT = unchecked((int)0x8000),
        DCX_WINDOW = 0x00000001,
        DCX_CACHE = 0x00000002,
        DCX_NORESETATTRS = 0x00000004,
        DCX_CLIPCHILDREN = 0x00000008,
        DCX_CLIPSIBLINGS = 0x00000010,
        DCX_PARENTCLIP = 0x00000020,
        DCX_EXCLUDERGN = 0x00000040,
        DCX_INTERSECTRGN = 0x00000080,
        DCX_EXCLUDEUPDATE = 0x00000100,
        DCX_INTERSECTUPDATE = 0x00000200,
        DCX_LOCKWINDOWUPDATE = 0x00000400,
        DCX_VALIDATE = 0x00200000,
        DI_MASK = 0x0001,
        DI_IMAGE = 0x0002,
        DI_NORMAL = 0x0003,
        DI_COMPAT = 0x0004,
        DI_DEFAULTSIZE = 0x0008,
        DWL_MSGRESULT = 0,
        DWL_DLGPROC = 4,
        DWL_USER = 8,
        DDL_READWRITE = 0x0000,
        DDL_READONLY = 0x0001,
        DDL_HIDDEN = 0x0002,
        DDL_SYSTEM = 0x0004,
        DDL_DIRECTORY = 0x0010,
        DDL_ARCHIVE = 0x0020,
        DDL_POSTMSGS = 0x2000,
        DDL_DRIVES = 0x4000,
        DDL_EXCLUSIVE = unchecked((int)0x8000),
        DS_ABSALIGN = 0x01,
        DS_SYSMODAL = 0x02,
        DS_LOCALEDIT = 0x20,
        DS_SETFONT = 0x40,
        DS_MODALFRAME = unchecked((int)0x80),
        DS_NOIDLEMSG = 0x100,
        DS_SETFOREGROUND = 0x200,
        DS_3DLOOK = 0x0004,
        DS_FIXEDSYS = 0x0008,
        DS_NOFAILCREATE = 0x0010,
        DS_CONTROL = 0x0400,
        DS_CENTER = 0x0800,
        DS_CENTERMOUSE = 0x1000,
        DS_CONTEXTHELP = 0x2000,
        DM_GETDEFID = (0x0400+0),
        DM_SETDEFID = (0x0400+1),
        DM_REPOSITION = (0x0400+2),
        DC_HASDEFID = 0x534B,
        DLGC_WANTARROWS = 0x0001,
        DLGC_WANTTAB = 0x0002,
        DLGC_WANTALLKEYS = 0x0004,
        DLGC_WANTMESSAGE = 0x0004,
        DLGC_HASSETSEL = 0x0008,
        DLGC_DEFPUSHBUTTON = 0x0010,
        DLGC_UNDEFPUSHBUTTON = 0x0020,
        DLGC_RADIOBUTTON = 0x0040,
        DLGC_WANTCHARS = 0x0080,
        DLGC_STATIC = 0x0100,
        DLGC_BUTTON = 0x2000,
        DISP_CHANGE_SUCCESSFUL = 0,
        DISP_CHANGE_RESTART = 1,
        DISP_CHANGE_FAILED = -1,
        DISP_CHANGE_BADMODE = -2,
        DISP_CHANGE_NOTUPDATED = -3,
        DISP_CHANGE_BADFLAGS = -4,
        DISP_CHANGE_BADPARAM = -5,
        DECIMAL_NEG = (unchecked((int)0x80)),
        DTN_FIRST = (0-760),
        DTN_LAST = (0-799),
        DL_BEGINDRAG = (0x0400+133),
        DL_DRAGGING = (0x0400+134),
        DL_DROPPED = (0x0400+135),
        DL_CANCELDRAG = (0x0400+136),
        DL_CURSORSET = 0,
        DL_STOPCURSOR = 1,
        DL_COPYCURSOR = 2,
        DL_MOVECURSOR = 3,
        DTM_FIRST = 0x1000,
        DTM_GETSYSTEMTIME = (0x1000+1),
        DTM_SETSYSTEMTIME = (0x1000+2),
        DTM_GETRANGE = (0x1000+3),
        DTM_SETRANGE = (0x1000+4),
        DTM_SETFORMATA = (0x1000+5),
        DTM_SETFORMATW = (0x1000+50),
        DTM_SETMCCOLOR = (0x1000+6),
        DTM_GETMCCOLOR = (0x1000+7),
        DTM_GETMONTHCAL = (0x1000+8),
        DTM_SETMCFONT = (0x1000+9),
        DTM_GETMCFONT = (0x1000+10),
        DTS_UPDOWN = 0x0001,
        DTS_SHOWNONE = 0x0002,
        DTS_SHORTDATEFORMAT = 0x0000,
        DTS_LONGDATEFORMAT = 0x0004,
        DTS_TIMEFORMAT = 0x0009,
        DTS_APPCANPARSE = 0x0010,
        DTS_RIGHTALIGN = 0x0020,
        DTN_DATETIMECHANGE = ((0-760)+1),
        DTN_USERSTRINGA = ((0-760)+2),
        DTN_USERSTRINGW = ((0-760)+15),
        DTN_WMKEYDOWNA = ((0-760)+3),
        DTN_WMKEYDOWNW = ((0-760)+16),
        DTN_FORMATA = ((0-760)+4),
        DTN_FORMATW = ((0-760)+17),
        DTN_FORMATQUERYA = ((0-760)+5),
        DTN_FORMATQUERYW = ((0-760)+18),
        DTN_DROPDOWN = ((0-760)+6),
        DTN_CLOSEUP = ((0-760)+7),
        DATA_E_FORMATETC = unchecked((int)0x80040064),
        DMPAPER_FIRST = 1,
        DMBIN_FIRST = 1,
        DSTINVERT = 0x00550009;

        public const int DVASPECT_CONTENT   = 1;
        public const int DVASPECT_THUMBNAIL = 2;
        public const int DVASPECT_ICON      = 4;
        public const int DVASPECT_DOCPRINT  = 8;
        public const int DVASPECT_OPAQUE    = 16;
        public const int DVASPECT_TRANSPARENT = 32;

        public const int DATADIR_GET = 1,
        DATADIR_SET = 2;

        public const int EC_ENABLEALL = 0,
        EC_ENABLEONE = 0x0080,
        EC_DISABLE = 0x0008,
        EC_QUERYWAITING = 2,
        edt1 = 0x0480,
        edt2 = 0x0481,
        edt3 = 0x0482,
        edt4 = 0x0483,
        edt5 = 0x0484,
        edt6 = 0x0485,
        edt7 = 0x0486,
        edt8 = 0x0487,
        edt9 = 0x0488,
        edt10 = 0x0489,
        edt11 = 0x048a,
        edt12 = 0x048b,
        edt13 = 0x048c,
        edt14 = 0x048d,
        edt15 = 0x048e,
        edt16 = 0x048f,
        EXCEPTION_EXECUTE_HANDLER = 1,
        EXCEPTION_CONTINUE_SEARCH = 0,
        EXCEPTION_CONTINUE_EXECUTION = -1,
        EMBDHLP_INPROC_HANDLER = 0x0000,
        EMBDHLP_INPROC_SERVER = 0x0001,
        EMBDHLP_CREATENOW = 0x00000000,
        EMBDHLP_DELAYCREATE = 0x00010000,
        EXCEPTION_DEBUG_EVENT = 1,
        EXIT_THREAD_DEBUG_EVENT = 4,
        EXIT_PROCESS_DEBUG_EVENT = 5,
        EVENPARITY = 2,
        EV_RXCHAR = 0x0001,
        EV_RXFLAG = 0x0002,
        EV_TXEMPTY = 0x0004,
        EV_CTS = 0x0008,
        EV_DSR = 0x0010,
        EV_RLSD = 0x0020,
        EV_BREAK = 0x0040,
        EV_ERR = 0x0080,
        EV_RING = 0x0100,
        EV_PERR = 0x0200,
        EV_RX80FULL = 0x0400,
        EV_EVENT1 = 0x0800,
        EV_EVENT2 = 0x1000,
        ENHANCED_KEY = 0x0100,
        ENABLE_PROCESSED_INPUT = 0x0001,
        ENABLE_LINE_INPUT = 0x0002,
        ENABLE_ECHO_INPUT = 0x0004,
        ENABLE_WINDOW_INPUT = 0x0008,
        ENABLE_MOUSE_INPUT = 0x0010,
        ENABLE_PROCESSED_OUTPUT = 0x0001,
        ENABLE_WRAP_AT_EOL_OUTPUT = 0x0002,
        ERROR_SUCCESS = 0,
        ERROR_INVALID_FUNCTION = 1,
        ERROR_FILE_NOT_FOUND = 2,
        ERROR_PATH_NOT_FOUND = 3,
        ERROR_TOO_MANY_OPEN_FILES = 4,
        ERROR_ACCESS_DENIED = 5,
        ERROR_INVALID_HANDLE = 6,
        ERROR_ARENA_TRASHED = 7,
        ERROR_NOT_ENOUGH_MEMORY = 8,
        ERROR_INVALID_BLOCK = 9,
        ERROR_BAD_ENVIRONMENT = 10,
        ERROR_BAD_FORMAT = 11,
        ERROR_INVALID_ACCESS = 12,
        ERROR_INVALID_DATA = 13,
        ERROR_OUTOFMEMORY = 14,
        ERROR_INVALID_DRIVE = 15,
        ERROR_CURRENT_DIRECTORY = 16,
        ERROR_NOT_SAME_DEVICE = 17,
        ERROR_NO_MORE_FILES = 18,
        ERROR_WRITE_PROTECT = 19,
        ERROR_BAD_UNIT = 20,
        ERROR_NOT_READY = 21,
        ERROR_BAD_COMMAND = 22,
        ERROR_CRC = 23,
        ERROR_BAD_LENGTH = 24,
        ERROR_SEEK = 25,
        ERROR_NOT_DOS_DISK = 26,
        ERROR_SECTOR_NOT_FOUND = 27,
        ERROR_OUT_OF_PAPER = 28,
        ERROR_WRITE_FAULT = 29,
        ERROR_READ_FAULT = 30,
        ERROR_GEN_FAILURE = 31,
        ERROR_SHARING_VIOLATION = 32,
        ERROR_LOCK_VIOLATION = 33,
        ERROR_WRONG_DISK = 34,
        ERROR_SHARING_BUFFER_EXCEEDED = 36,
        ERROR_HANDLE_EOF = 38,
        ERROR_HANDLE_DISK_FULL = 39,
        ERROR_NOT_SUPPORTED = 50,
        ERROR_REM_NOT_LIST = 51,
        ERROR_DUP_NAME = 52,
        ERROR_BAD_NETPATH = 53,
        ERROR_NETWORK_BUSY = 54,
        ERROR_DEV_NOT_EXIST = 55,
        ERROR_TOO_MANY_CMDS = 56,
        ERROR_ADAP_HDW_ERR = 57,
        ERROR_BAD_NET_RESP = 58,
        ERROR_UNEXP_NET_ERR = 59,
        ERROR_BAD_REM_ADAP = 60,
        ERROR_PRINTQ_FULL = 61,
        ERROR_NO_SPOOL_SPACE = 62,
        ERROR_PRINT_CANCELLED = 63,
        ERROR_NETNAME_DELETED = 64,
        ERROR_NETWORK_ACCESS_DENIED = 65,
        ERROR_BAD_DEV_TYPE = 66,
        ERROR_BAD_NET_NAME = 67,
        ERROR_TOO_MANY_NAMES = 68,
        ERROR_TOO_MANY_SESS = 69,
        ERROR_SHARING_PAUSED = 70,
        ERROR_REQ_NOT_ACCEP = 71,
        ERROR_REDIR_PAUSED = 72,
        ERROR_FILE_EXISTS = 80,
        ERROR_CANNOT_MAKE = 82,
        ERROR_FAIL_I24 = 83,
        ERROR_OUT_OF_STRUCTURES = 84,
        ERROR_ALREADY_ASSIGNED = 85,
        ERROR_INVALID_PASSWORD = 86,
        ERROR_INVALID_PARAMETER = 87,
        ERROR_NET_WRITE_FAULT = 88,
        ERROR_NO_PROC_SLOTS = 89,
        ERROR_TOO_MANY_SEMAPHORES = 100,
        ERROR_EXCL_SEM_ALREADY_OWNED = 101,
        ERROR_SEM_IS_SET = 102,
        ERROR_TOO_MANY_SEM_REQUESTS = 103,
        ERROR_INVALID_AT_INTERRUPT_TIME = 104,
        ERROR_SEM_OWNER_DIED = 105,
        ERROR_SEM_USER_LIMIT = 106,
        ERROR_DISK_CHANGE = 107,
        ERROR_DRIVE_LOCKED = 108,
        ERROR_BROKEN_PIPE = 109,
        ERROR_OPEN_FAILED = 110,
        ERROR_BUFFER_OVERFLOW = 111,
        ERROR_DISK_FULL = 112,
        ERROR_NO_MORE_SEARCH_HANDLES = 113,
        ERROR_INVALID_TARGET_HANDLE = 114,
        ERROR_INVALID_CATEGORY = 117,
        ERROR_INVALID_VERIFY_SWITCH = 118,
        ERROR_BAD_DRIVER_LEVEL = 119,
        ERROR_CALL_NOT_IMPLEMENTED = 120,
        ERROR_SEM_TIMEOUT = 121,
        ERROR_INSUFFICIENT_BUFFER = 122,
        ERROR_INVALID_NAME = 123,
        ERROR_INVALID_LEVEL = 124,
        ERROR_NO_VOLUME_LABEL = 125,
        ERROR_MOD_NOT_FOUND = 126,
        ERROR_PROC_NOT_FOUND = 127,
        ERROR_WAIT_NO_CHILDREN = 128,
        ERROR_CHILD_NOT_COMPLETE = 129,
        ERROR_DIRECT_ACCESS_HANDLE = 130,
        ERROR_NEGATIVE_SEEK = 131,
        ERROR_SEEK_ON_DEVICE = 132,
        ERROR_IS_JOIN_TARGET = 133,
        ERROR_IS_JOINED = 134,
        ERROR_IS_SUBSTED = 135,
        ERROR_NOT_JOINED = 136,
        ERROR_NOT_SUBSTED = 137,
        ERROR_JOIN_TO_JOIN = 138,
        ERROR_SUBST_TO_SUBST = 139,
        ERROR_JOIN_TO_SUBST = 140,
        ERROR_SUBST_TO_JOIN = 141,
        ERROR_BUSY_DRIVE = 142,
        ERROR_SAME_DRIVE = 143,
        ERROR_DIR_NOT_ROOT = 144,
        ERROR_DIR_NOT_EMPTY = 145,
        ERROR_IS_SUBST_PATH = 146,
        ERROR_IS_JOIN_PATH = 147,
        ERROR_PATH_BUSY = 148,
        ERROR_IS_SUBST_TARGET = 149,
        ERROR_SYSTEM_TRACE = 150,
        ERROR_INVALID_EVENT_COUNT = 151,
        ERROR_TOO_MANY_MUXWAITERS = 152,
        ERROR_INVALID_LIST_FORMAT = 153,
        ERROR_LABEL_TOO_LONG = 154,
        ERROR_TOO_MANY_TCBS = 155,
        ERROR_SIGNAL_REFUSED = 156,
        ERROR_DISCARDED = 157,
        ERROR_NOT_LOCKED = 158,
        ERROR_BAD_THREADID_ADDR = 159,
        ERROR_BAD_ARGUMENTS = 160,
        ERROR_BAD_PATHNAME = 161,
        ERROR_SIGNAL_PENDING = 162,
        ERROR_MAX_THRDS_REACHED = 164,
        ERROR_LOCK_FAILED = 167,
        ERROR_BUSY = 170,
        ERROR_CANCEL_VIOLATION = 173,
        ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174,
        ERROR_INVALID_SEGMENT_NUMBER = 180,
        ERROR_INVALID_ORDINAL = 182,
        ERROR_ALREADY_EXISTS = 183,
        ERROR_INVALID_FLAG_NUMBER = 186,
        ERROR_SEM_NOT_FOUND = 187,
        ERROR_INVALID_STARTING_CODESEG = 188,
        ERROR_INVALID_STACKSEG = 189,
        ERROR_INVALID_MODULETYPE = 190,
        ERROR_INVALID_EXE_SIGNATURE = 191,
        ERROR_EXE_MARKED_INVALID = 192,
        ERROR_BAD_EXE_FORMAT = 193,
        ERROR_ITERATED_DATA_EXCEEDS_64k = 194,
        ERROR_INVALID_MINALLOCSIZE = 195,
        ERROR_DYNLINK_FROM_INVALID_RING = 196,
        ERROR_IOPL_NOT_ENABLED = 197,
        ERROR_INVALID_SEGDPL = 198,
        ERROR_AUTODATASEG_EXCEEDS_64k = 199,
        ERROR_RING2SEG_MUST_BE_MOVABLE = 200,
        ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201,
        ERROR_INFLOOP_IN_RELOC_CHAIN = 202,
        ERROR_ENVVAR_NOT_FOUND = 203,
        ERROR_NO_SIGNAL_SENT = 205,
        ERROR_FILENAME_EXCED_RANGE = 206,
        ERROR_RING2_STACK_IN_USE = 207,
        ERROR_META_EXPANSION_TOO_LONG = 208,
        ERROR_INVALID_SIGNAL_NUMBER = 209,
        ERROR_THREAD_1_INACTIVE = 210,
        ERROR_LOCKED = 212,
        ERROR_TOO_MANY_MODULES = 214,
        ERROR_NESTING_NOT_ALLOWED = 215,
        ERROR_EXE_MACHINE_TYPE_MISMATCH = 216,
        ERROR_BAD_PIPE = 230,
        ERROR_PIPE_BUSY = 231,
        ERROR_NO_DATA = 232,
        ERROR_PIPE_NOT_CONNECTED = 233,
        ERROR_MORE_DATA = 234,
        ERROR_VC_DISCONNECTED = 240,
        ERROR_INVALID_EA_NAME = 254,
        ERROR_EA_LIST_INCONSISTENT = 255,
        ERROR_NO_MORE_ITEMS = 259,
        ERROR_CANNOT_COPY = 266,
        ERROR_DIRECTORY = 267,
        ERROR_EAS_DIDNT_FIT = 275,
        ERROR_EA_FILE_CORRUPT = 276,
        ERROR_EA_TABLE_FULL = 277,
        ERROR_INVALID_EA_HANDLE = 278,
        ERROR_EAS_NOT_SUPPORTED = 282,
        ERROR_NOT_OWNER = 288,
        ERROR_TOO_MANY_POSTS = 298,
        ERROR_PARTIAL_COPY = 299,
        ERROR_MR_MID_NOT_FOUND = 317,
        ERROR_INVALID_ADDRESS = 487,
        ERROR_ARITHMETIC_OVERFLOW = 534,
        ERROR_PIPE_CONNECTED = 535,
        ERROR_PIPE_LISTENING = 536,
        ERROR_EA_ACCESS_DENIED = 994,
        ERROR_OPERATION_ABORTED = 995,
        ERROR_IO_INCOMPLETE = 996,
        ERROR_IO_PENDING = 997,
        ERROR_NOACCESS = 998,
        ERROR_SWAPERROR = 999,
        ERROR_STACK_OVERFLOW = 1001,
        ERROR_INVALID_MESSAGE = 1002,
        ERROR_CAN_NOT_COMPLETE = 1003,
        ERROR_INVALID_FLAGS = 1004,
        ERROR_UNRECOGNIZED_VOLUME = 1005,
        ERROR_FILE_INVALID = 1006,
        ERROR_FULLSCREEN_MODE = 1007,
        ERROR_NO_TOKEN = 1008,
        ERROR_BADDB = 1009,
        ERROR_BADKEY = 1010,
        ERROR_CANTOPEN = 1011,
        ERROR_CANTREAD = 1012,
        ERROR_CANTWRITE = 1013,
        ERROR_REGISTRY_RECOVERED = 1014,
        ERROR_REGISTRY_CORRUPT = 1015,
        ERROR_REGISTRY_IO_FAILED = 1016,
        ERROR_NOT_REGISTRY_FILE = 1017,
        ERROR_KEY_DELETED = 1018,
        ERROR_NO_LOG_SPACE = 1019,
        ERROR_KEY_HAS_CHILDREN = 1020,
        ERROR_CHILD_MUST_BE_VOLATILE = 1021,
        ERROR_NOTIFY_ENUM_DIR = 1022,
        ERROR_DEPENDENT_SERVICES_RUNNING = 1051,
        ERROR_INVALID_SERVICE_CONTROL = 1052,
        ERROR_SERVICE_REQUEST_TIMEOUT = 1053,
        ERROR_SERVICE_NO_THREAD = 1054,
        ERROR_SERVICE_DATABASE_LOCKED = 1055,
        ERROR_SERVICE_ALREADY_RUNNING = 1056,
        ERROR_INVALID_SERVICE_ACCOUNT = 1057,
        ERROR_SERVICE_DISABLED = 1058,
        ERROR_CIRCULAR_DEPENDENCY = 1059,
        ERROR_SERVICE_DOES_NOT_EXIST = 1060,
        ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061,
        ERROR_SERVICE_NOT_ACTIVE = 1062,
        ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063,
        ERROR_EXCEPTION_IN_SERVICE = 1064,
        ERROR_DATABASE_DOES_NOT_EXIST = 1065,
        ERROR_SERVICE_SPECIFIC_ERROR = 1066,
        ERROR_PROCESS_ABORTED = 1067,
        ERROR_SERVICE_DEPENDENCY_FAIL = 1068,
        ERROR_SERVICE_LOGON_FAILED = 1069,
        ERROR_SERVICE_START_HANG = 1070,
        ERROR_INVALID_SERVICE_LOCK = 1071,
        ERROR_SERVICE_MARKED_FOR_DELETE = 1072,
        ERROR_SERVICE_EXISTS = 1073,
        ERROR_ALREADY_RUNNING_LKG = 1074,
        ERROR_SERVICE_DEPENDENCY_DELETED = 1075,
        ERROR_BOOT_ALREADY_ACCEPTED = 1076,
        ERROR_SERVICE_NEVER_STARTED = 1077,
        ERROR_DUPLICATE_SERVICE_NAME = 1078,
        ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079,
        ERROR_END_OF_MEDIA = 1100,
        ERROR_FILEMARK_DETECTED = 1101,
        ERROR_BEGINNING_OF_MEDIA = 1102,
        ERROR_SETMARK_DETECTED = 1103,
        ERROR_NO_DATA_DETECTED = 1104,
        ERROR_PARTITION_FAILURE = 1105,
        ERROR_INVALID_BLOCK_LENGTH = 1106,
        ERROR_DEVICE_NOT_PARTITIONED = 1107,
        ERROR_UNABLE_TO_LOCK_MEDIA = 1108,
        ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109,
        ERROR_MEDIA_CHANGED = 1110,
        ERROR_BUS_RESET = 1111,
        ERROR_NO_MEDIA_IN_DRIVE = 1112,
        ERROR_NO_UNICODE_TRANSLATION = 1113,
        ERROR_DLL_INIT_FAILED = 1114,
        ERROR_SHUTDOWN_IN_PROGRESS = 1115,
        ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116,
        ERROR_IO_DEVICE = 1117,
        ERROR_SERIAL_NO_DEVICE = 1118,
        ERROR_IRQ_BUSY = 1119,
        ERROR_MORE_WRITES = 1120,
        ERROR_COUNTER_TIMEOUT = 1121,
        ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122,
        ERROR_FLOPPY_WRONG_CYLINDER = 1123,
        ERROR_FLOPPY_UNKNOWN_ERROR = 1124,
        ERROR_FLOPPY_BAD_REGISTERS = 1125,
        ERROR_DISK_RECALIBRATE_FAILED = 1126,
        ERROR_DISK_OPERATION_FAILED = 1127,
        ERROR_DISK_RESET_FAILED = 1128,
        ERROR_EOM_OVERFLOW = 1129,
        ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130,
        ERROR_POSSIBLE_DEADLOCK = 1131,
        ERROR_MAPPED_ALIGNMENT = 1132,
        ERROR_SET_POWER_STATE_VETOED = 1140,
        ERROR_SET_POWER_STATE_FAILED = 1141,
        ERROR_TOO_MANY_LINKS = 1142,
        ERROR_OLD_WIN_VERSION = 1150,
        ERROR_APP_WRONG_OS = 1151,
        ERROR_SINGLE_INSTANCE_APP = 1152,
        ERROR_RMODE_APP = 1153,
        ERROR_INVALID_DLL = 1154,
        ERROR_NO_ASSOCIATION = 1155,
        ERROR_DDE_FAIL = 1156,
        ERROR_DLL_NOT_FOUND = 1157,
        ERROR_BAD_USERNAME = 2202,
        ERROR_NOT_CONNECTED = 2250,
        ERROR_OPEN_FILES = 2401,
        ERROR_ACTIVE_CONNECTIONS = 2402,
        ERROR_DEVICE_IN_USE = 2404,
        ERROR_BAD_DEVICE = 1200,
        ERROR_CONNECTION_UNAVAIL = 1201,
        ERROR_DEVICE_ALREADY_REMEMBERED = 1202,
        ERROR_NO_NET_OR_BAD_PATH = 1203,
        ERROR_BAD_PROVIDER = 1204,
        ERROR_CANNOT_OPEN_PROFILE = 1205,
        ERROR_BAD_PROFILE = 1206,
        ERROR_NOT_CONTAINER = 1207,
        ERROR_EXTENDED_ERROR = 1208,
        ERROR_INVALID_GROUPNAME = 1209,
        ERROR_INVALID_COMPUTERNAME = 1210,
        ERROR_INVALID_EVENTNAME = 1211,
        ERROR_INVALID_DOMAINNAME = 1212,
        ERROR_INVALID_SERVICENAME = 1213,
        ERROR_INVALID_NETNAME = 1214,
        ERROR_INVALID_SHARENAME = 1215,
        ERROR_INVALID_PASSWORDNAME = 1216,
        ERROR_INVALID_MESSAGENAME = 1217,
        ERROR_INVALID_MESSAGEDEST = 1218,
        ERROR_SESSION_CREDENTIAL_CONFLICT = 1219,
        ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220,
        ERROR_DUP_DOMAINNAME = 1221,
        ERROR_NO_NETWORK = 1222,
        ERROR_CANCELLED = 1223,
        ERROR_USER_MAPPED_FILE = 1224,
        ERROR_CONNECTION_REFUSED = 1225,
        ERROR_GRACEFUL_DISCONNECT = 1226,
        ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227,
        ERROR_ADDRESS_NOT_ASSOCIATED = 1228,
        ERROR_CONNECTION_INVALID = 1229,
        ERROR_CONNECTION_ACTIVE = 1230,
        ERROR_NETWORK_UNREACHABLE = 1231,
        ERROR_HOST_UNREACHABLE = 1232,
        ERROR_PROTOCOL_UNREACHABLE = 1233,
        ERROR_PORT_UNREACHABLE = 1234,
        ERROR_REQUEST_ABORTED = 1235,
        ERROR_CONNECTION_ABORTED = 1236,
        ERROR_RETRY = 1237,
        ERROR_CONNECTION_COUNT_LIMIT = 1238,
        ERROR_LOGIN_TIME_RESTRICTION = 1239,
        ERROR_LOGIN_WKSTA_RESTRICTION = 1240,
        ERROR_INCORRECT_ADDRESS = 1241,
        ERROR_ALREADY_REGISTERED = 1242,
        ERROR_SERVICE_NOT_FOUND = 1243,
        ERROR_NOT_AUTHENTICATED = 1244,
        ERROR_NOT_LOGGED_ON = 1245,
        ERROR_CONTINUE = 1246,
        ERROR_ALREADY_INITIALIZED = 1247,
        ERROR_NO_MORE_DEVICES = 1248,
        ERROR_NOT_ALL_ASSIGNED = 1300,
        ERROR_SOME_NOT_MAPPED = 1301,
        ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302,
        ERROR_LOCAL_USER_SESSION_KEY = 1303,
        ERROR_NULL_LM_PASSWORD = 1304,
        ERROR_UNKNOWN_REVISION = 1305,
        ERROR_REVISION_MISMATCH = 1306,
        ERROR_INVALID_OWNER = 1307,
        ERROR_INVALID_PRIMARY_GROUP = 1308,
        ERROR_NO_IMPERSONATION_TOKEN = 1309,
        ERROR_CANT_DISABLE_MANDATORY = 1310,
        ERROR_NO_LOGON_SERVERS = 1311,
        ERROR_NO_SUCH_LOGON_SESSION = 1312,
        ERROR_NO_SUCH_PRIVILEGE = 1313,
        ERROR_PRIVILEGE_NOT_HELD = 1314,
        ERROR_INVALID_ACCOUNT_NAME = 1315,
        ERROR_USER_EXISTS = 1316,
        ERROR_NO_SUCH_USER = 1317,
        ERROR_GROUP_EXISTS = 1318,
        ERROR_NO_SUCH_GROUP = 1319,
        ERROR_MEMBER_IN_GROUP = 1320,
        ERROR_MEMBER_NOT_IN_GROUP = 1321,
        ERROR_LAST_ADMIN = 1322,
        ERROR_WRONG_PASSWORD = 1323,
        ERROR_ILL_FORMED_PASSWORD = 1324,
        ERROR_PASSWORD_RESTRICTION = 1325,
        ERROR_LOGON_FAILURE = 1326,
        ERROR_ACCOUNT_RESTRICTION = 1327,
        ERROR_INVALID_LOGON_HOURS = 1328,
        ERROR_INVALID_WORKSTATION = 1329,
        ERROR_PASSWORD_EXPIRED = 1330,
        ERROR_ACCOUNT_DISABLED = 1331,
        ERROR_NONE_MAPPED = 1332,
        ERROR_TOO_MANY_LUIDS_REQUESTED = 1333,
        ERROR_LUIDS_EXHAUSTED = 1334,
        ERROR_INVALID_SUB_AUTHORITY = 1335,
        ERROR_INVALID_ACL = 1336,
        ERROR_INVALID_SID = 1337,
        ERROR_INVALID_SECURITY_DESCR = 1338,
        ERROR_BAD_INHERITANCE_ACL = 1340,
        ERROR_SERVER_DISABLED = 1341,
        ERROR_SERVER_NOT_DISABLED = 1342,
        ERROR_INVALID_ID_AUTHORITY = 1343,
        ERROR_ALLOTTED_SPACE_EXCEEDED = 1344,
        ERROR_INVALID_GROUP_ATTRIBUTES = 1345,
        ERROR_BAD_IMPERSONATION_LEVEL = 1346,
        ERROR_CANT_OPEN_ANONYMOUS = 1347,
        ERROR_BAD_VALIDATION_CLASS = 1348,
        ERROR_BAD_TOKEN_TYPE = 1349,
        ERROR_NO_SECURITY_ON_OBJECT = 1350,
        ERROR_CANT_ACCESS_DOMAIN_INFO = 1351,
        ERROR_INVALID_SERVER_STATE = 1352,
        ERROR_INVALID_DOMAIN_STATE = 1353,
        ERROR_INVALID_DOMAIN_ROLE = 1354,
        ERROR_NO_SUCH_DOMAIN = 1355,
        ERROR_DOMAIN_EXISTS = 1356,
        ERROR_DOMAIN_LIMIT_EXCEEDED = 1357,
        ERROR_INTERNAL_DB_CORRUPTION = 1358,
        ERROR_INTERNAL_ERROR = 1359,
        ERROR_GENERIC_NOT_MAPPED = 1360,
        ERROR_BAD_DESCRIPTOR_FORMAT = 1361,
        ERROR_NOT_LOGON_PROCESS = 1362,
        ERROR_LOGON_SESSION_EXISTS = 1363,
        ERROR_NO_SUCH_PACKAGE = 1364,
        ERROR_BAD_LOGON_SESSION_STATE = 1365,
        ERROR_LOGON_SESSION_COLLISION = 1366,
        ERROR_INVALID_LOGON_TYPE = 1367,
        ERROR_CANNOT_IMPERSONATE = 1368,
        ERROR_RXACT_INVALID_STATE = 1369,
        ERROR_RXACT_COMMIT_FAILURE = 1370,
        ERROR_SPECIAL_ACCOUNT = 1371,
        ERROR_SPECIAL_GROUP = 1372,
        ERROR_SPECIAL_USER = 1373,
        ERROR_MEMBERS_PRIMARY_GROUP = 1374,
        ERROR_TOKEN_ALREADY_IN_USE = 1375,
        ERROR_NO_SUCH_ALIAS = 1376,
        ERROR_MEMBER_NOT_IN_ALIAS = 1377,
        ERROR_MEMBER_IN_ALIAS = 1378,
        ERROR_ALIAS_EXISTS = 1379,
        ERROR_LOGON_NOT_GRANTED = 1380,
        ERROR_TOO_MANY_SECRETS = 1381,
        ERROR_SECRET_TOO_LONG = 1382,
        ERROR_INTERNAL_DB_ERROR = 1383,
        ERROR_TOO_MANY_CONTEXT_IDS = 1384,
        ERROR_LOGON_TYPE_NOT_GRANTED = 1385,
        ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386,
        ERROR_NO_SUCH_MEMBER = 1387,
        ERROR_INVALID_MEMBER = 1388,
        ERROR_TOO_MANY_SIDS = 1389,
        ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390,
        ERROR_NO_INHERITANCE = 1391,
        ERROR_FILE_CORRUPT = 1392,
        ERROR_DISK_CORRUPT = 1393,
        ERROR_NO_USER_SESSION_KEY = 1394,
        ERROR_LICENSE_QUOTA_EXCEEDED = 1395,
        ERROR_INVALID_WINDOW_HANDLE = 1400,
        ERROR_INVALID_MENU_HANDLE = 1401,
        ERROR_INVALID_CURSOR_HANDLE = 1402,
        ERROR_INVALID_ACCEL_HANDLE = 1403,
        ERROR_INVALID_HOOK_HANDLE = 1404,
        ERROR_INVALID_DWP_HANDLE = 1405,
        ERROR_TLW_WITH_WSCHILD = 1406,
        ERROR_CANNOT_FIND_WND_CLASS = 1407,
        ERROR_WINDOW_OF_OTHER_THREAD = 1408,
        ERROR_HOTKEY_ALREADY_REGISTERED = 1409,
        ERROR_CLASS_ALREADY_EXISTS = 1410,
        ERROR_CLASS_DOES_NOT_EXIST = 1411,
        ERROR_CLASS_HAS_WINDOWS = 1412,
        ERROR_INVALID_INDEX = 1413,
        ERROR_INVALID_ICON_HANDLE = 1414,
        ERROR_PRIVATE_DIALOG_INDEX = 1415,
        ERROR_LISTBOX_ID_NOT_FOUND = 1416,
        ERROR_NO_WILDCARD_CHARACTERS = 1417,
        ERROR_CLIPBOARD_NOT_OPEN = 1418,
        ERROR_HOTKEY_NOT_REGISTERED = 1419,
        ERROR_WINDOW_NOT_DIALOG = 1420,
        ERROR_CONTROL_ID_NOT_FOUND = 1421,
        ERROR_INVALID_COMBOBOX_MESSAGE = 1422,
        ERROR_WINDOW_NOT_COMBOBOX = 1423,
        ERROR_INVALID_EDIT_HEIGHT = 1424,
        ERROR_DC_NOT_FOUND = 1425,
        ERROR_INVALID_HOOK_FILTER = 1426,
        ERROR_INVALID_FILTER_PROC = 1427,
        ERROR_HOOK_NEEDS_HMOD = 1428,
        ERROR_GLOBAL_ONLY_HOOK = 1429,
        ERROR_JOURNAL_HOOK_SET = 1430,
        ERROR_HOOK_NOT_INSTALLED = 1431,
        ERROR_INVALID_LB_MESSAGE = 1432,
        ERROR_SETCOUNT_ON_BAD_LB = 1433,
        ERROR_LB_WITHOUT_TABSTOPS = 1434,
        ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435,
        ERROR_CHILD_WINDOW_MENU = 1436,
        ERROR_NO_SYSTEM_MENU = 1437,
        ERROR_INVALID_MSGBOX_STYLE = 1438,
        ERROR_INVALID_SPI_VALUE = 1439,
        ERROR_SCREEN_ALREADY_LOCKED = 1440,
        ERROR_HWNDS_HAVE_DIFF_PARENT = 1441,
        ERROR_NOT_CHILD_WINDOW = 1442,
        ERROR_INVALID_GW_COMMAND = 1443,
        ERROR_INVALID_THREAD_ID = 1444,
        ERROR_NON_MDICHILD_WINDOW = 1445,
        ERROR_POPUP_ALREADY_ACTIVE = 1446,
        ERROR_NO_SCROLLBARS = 1447,
        ERROR_INVALID_SCROLLBAR_RANGE = 1448,
        ERROR_INVALID_SHOWWIN_COMMAND = 1449,
        ERROR_NO_SYSTEM_RESOURCES = 1450,
        ERROR_NONPAGED_SYSTEM_RESOURCES = 1451,
        ERROR_PAGED_SYSTEM_RESOURCES = 1452,
        ERROR_WORKING_SET_QUOTA = 1453,
        ERROR_PAGEFILE_QUOTA = 1454,
        ERROR_COMMITMENT_LIMIT = 1455,
        ERROR_MENU_ITEM_NOT_FOUND = 1456,
        ERROR_INVALID_KEYBOARD_HANDLE = 1457,
        ERROR_HOOK_TYPE_NOT_ALLOWED = 1458,
        ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459,
        ERROR_TIMEOUT = 1460,
        ERROR_EVENTLOG_FILE_CORRUPT = 1500,
        ERROR_EVENTLOG_CANT_START = 1501,
        ERROR_LOG_FILE_FULL = 1502,
        ERROR_EVENTLOG_FILE_CHANGED = 1503,
        EPT_S_INVALID_ENTRY = 1751,
        EPT_S_CANT_PERFORM_OP = 1752,
        EPT_S_NOT_REGISTERED = 1753,
        ERROR_INVALID_USER_BUFFER = 1784,
        ERROR_UNRECOGNIZED_MEDIA = 1785,
        ERROR_NO_TRUST_LSA_SECRET = 1786,
        ERROR_NO_TRUST_SAM_ACCOUNT = 1787,
        ERROR_TRUSTED_DOMAIN_FAILURE = 1788,
        ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789,
        ERROR_TRUST_FAILURE = 1790,
        ERROR_NETLOGON_NOT_STARTED = 1792,
        ERROR_ACCOUNT_EXPIRED = 1793,
        ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794,
        ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795,
        ERROR_UNKNOWN_PORT = 1796,
        ERROR_UNKNOWN_PRINTER_DRIVER = 1797,
        ERROR_UNKNOWN_PRINTPROCESSOR = 1798,
        ERROR_INVALID_SEPARATOR_FILE = 1799,
        ERROR_INVALID_PRIORITY = 1800,
        ERROR_INVALID_PRINTER_NAME = 1801,
        ERROR_PRINTER_ALREADY_EXISTS = 1802,
        ERROR_INVALID_PRINTER_COMMAND = 1803,
        ERROR_INVALID_DATATYPE = 1804,
        ERROR_INVALID_ENVIRONMENT = 1805,
        ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807,
        ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808,
        ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809,
        ERROR_DOMAIN_TRUST_INCONSISTENT = 1810,
        ERROR_SERVER_HAS_OPEN_HANDLES = 1811,
        ERROR_RESOURCE_DATA_NOT_FOUND = 1812,
        ERROR_RESOURCE_TYPE_NOT_FOUND = 1813,
        ERROR_RESOURCE_NAME_NOT_FOUND = 1814,
        ERROR_RESOURCE_LANG_NOT_FOUND = 1815,
        ERROR_NOT_ENOUGH_QUOTA = 1816,
        EPT_S_CANT_CREATE = 1899,
        ERROR_INVALID_TIME = 1901,
        ERROR_INVALID_FORM_NAME = 1902,
        ERROR_INVALID_FORM_SIZE = 1903,
        ERROR_ALREADY_WAITING = 1904,
        ERROR_PRINTER_DELETED = 1905,
        ERROR_INVALID_PRINTER_STATE = 1906,
        ERROR_PASSWORD_MUST_CHANGE = 1907,
        ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908,
        ERROR_ACCOUNT_LOCKED_OUT = 1909,
        ERROR_NO_BROWSER_SERVERS_FOUND = 6118,
        ERROR_INVALID_PIXEL_FORMAT = 2000,
        ERROR_BAD_DRIVER = 2001,
        ERROR_INVALID_WINDOW_STYLE = 2002,
        ERROR_METAFILE_NOT_SUPPORTED = 2003,
        ERROR_TRANSFORM_NOT_SUPPORTED = 2004,
        ERROR_CLIPPING_NOT_SUPPORTED = 2005,
        ERROR_UNKNOWN_PRINT_MONITOR = 3000,
        ERROR_PRINTER_DRIVER_IN_USE = 3001,
        ERROR_SPOOL_FILE_NOT_FOUND = 3002,
        ERROR_SPL_NO_STARTDOC = 3003,
        ERROR_SPL_NO_ADDJOB = 3004,
        ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005,
        ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006,
        ERROR_INVALID_PRINT_MONITOR = 3007,
        ERROR_PRINT_MONITOR_IN_USE = 3008,
        ERROR_PRINTER_HAS_JOBS_QUEUED = 3009,
        ERROR_SUCCESS_REBOOT_REQUIRED = 3010,
        ERROR_SUCCESS_RESTART_REQUIRED = 3011,
        ERROR_WINS_INTERNAL = 4000,
        ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001,
        ERROR_STATIC_INIT = 4002,
        ERROR_INC_BACKUP = 4003,
        ERROR_FULL_BACKUP = 4004,
        ERROR_REC_NON_EXISTENT = 4005,
        ERROR_RPL_NOT_ALLOWED = 4006,
        E_UNEXPECTED = unchecked((int)0x8000FFFF),
        E_NOTIMPL = unchecked((int)0x80004001),
        E_OUTOFMEMORY = unchecked((int)0x8007000E),
        E_INVALIDARG = unchecked((int)0x80070057),
        E_NOINTERFACE = unchecked((int)0x80004002),
        E_POINTER = unchecked((int)0x80004003),
        E_HANDLE = unchecked((int)0x80070006),
        E_ABORT = unchecked((int)0x80004004),
        E_FAIL = unchecked((int)0x80004005),
        E_ACCESSDENIED = unchecked((int)0x80070005);
        // E_NOTIMPL = unchecked((int)0x80000001);
        // int E_OUTOFMEMORY = unchecked((int)0x80000002);
        // int E_INVALIDARG = unchecked((int)0x80000003);
        // int E_NOINTERFACE = unchecked((int)0x80000004);
        // int E_POINTER = unchecked((int)0x80000005);
        // int E_HANDLE = unchecked((int)0x80000006);
        // int E_ABORT = unchecked((int)0x80000007);
        // int E_FAIL = unchecked((int)0x80000008);
        // int E_ACCESSDENIED = unchecked((int)0x80000009);
        public const int E_PENDING = unchecked((int)0x8000000A),
        ENUM_E_FIRST = unchecked((int)0x800401B0),
        ENUM_E_LAST = unchecked((int)0x800401BF),
        ENUM_S_FIRST = 0x000401B0,
        ENUM_S_LAST = 0x000401BF,
        ERROR = 0,
        ETO_OPAQUE = 0x0002,
        ETO_CLIPPED = 0x0004,
        ETO_GLYPH_INDEX = 0x0010,
        ETO_RTLREADING = 0x0080,
        ETO_IGNORELANGUAGE = 0x1000,
        ENDDOC = 11,
        ENABLEDUPLEX = 28,
        ENUMPAPERBINS = 31,
        EPSPRINTING = 33,
        ENUMPAPERMETRICS = 34,
        EXTTEXTOUT = 512,
        ENABLERELATIVEWIDTHS = 768,
        ENABLEPAIRKERNING = 769,
        END_PATH = 4098,
        EXT_DEVICE_CAPS = 4099,
        ENCAPSULATED_POSTSCRIPT = 4116,
        EASTEUROPE_CHARSET = 238,
        ELF_VENDOR_SIZE = 4,
        ELF_VERSION = 0,
        ELF_CULTURE_LATIN = 0,
        ENHMETA_SIGNATURE = 0x464D4520,
        ENHMETA_STOCK_OBJECT = unchecked((int)0x80000000),
        EMR_HEADER = 1,
        EMR_POLYBEZIER = 2,
        EMR_POLYGON = 3,
        EMR_POLYLINE = 4,
        EMR_POLYBEZIERTO = 5,
        EMR_POLYLINETO = 6,
        EMR_POLYPOLYLINE = 7,
        EMR_POLYPOLYGON = 8,
        EMR_SETWINDOWEXTEX = 9,
        EMR_SETWINDOWORGEX = 10,
        EMR_SETVIEWPORTEXTEX = 11,
        EMR_SETVIEWPORTORGEX = 12,
        EMR_SETBRUSHORGEX = 13,
        EMR_EOF = 14,
        EMR_SETPIXELV = 15,
        EMR_SETMAPPERFLAGS = 16,
        EMR_SETMAPMODE = 17,
        EMR_SETBKMODE = 18,
        EMR_SETPOLYFILLMODE = 19,
        EMR_SETROP2 = 20,
        EMR_SETSTRETCHBLTMODE = 21,
        EMR_SETTEXTALIGN = 22,
        EMR_SETCOLORADJUSTMENT = 23,
        EMR_SETTEXTCOLOR = 24,
        EMR_SETBKCOLOR = 25,
        EMR_OFFSETCLIPRGN = 26,
        EMR_MOVETOEX = 27,
        EMR_SETMETARGN = 28,
        EMR_EXCLUDECLIPRECT = 29,
        EMR_INTERSECTCLIPRECT = 30,
        EMR_SCALEVIEWPORTEXTEX = 31,
        EMR_SCALEWINDOWEXTEX = 32,
        EMR_SAVEDC = 33,
        EMR_RESTOREDC = 34,
        EMR_SETWORLDTRANSFORM = 35,
        EMR_MODIFYWORLDTRANSFORM = 36,
        EMR_SELECTOBJECT = 37,
        EMR_CREATEPEN = 38,
        EMR_CREATEBRUSHINDIRECT = 39,
        EMR_DELETEOBJECT = 40,
        EMR_ANGLEARC = 41,
        EMR_ELLIPSE = 42,
        EMR_RECTANGLE = 43,
        EMR_ROUNDRECT = 44,
        EMR_ARC = 45,
        EMR_CHORD = 46,
        EMR_PIE = 47,
        EMR_SELECTPALETTE = 48,
        EMR_CREATEPALETTE = 49,
        EMR_SETPALETTEENTRIES = 50,
        EMR_RESIZEPALETTE = 51,
        EMR_REALIZEPALETTE = 52,
        EMR_EXTFLOODFILL = 53,
        EMR_LINETO = 54,
        EMR_ARCTO = 55,
        EMR_POLYDRAW = 56,
        EMR_SETARCDIRECTION = 57,
        EMR_SETMITERLIMIT = 58,
        EMR_BEGINPATH = 59,
        EMR_ENDPATH = 60,
        EMR_CLOSEFIGURE = 61,
        EMR_FILLPATH = 62,
        EMR_STROKEANDFILLPATH = 63,
        EMR_STROKEPATH = 64,
        EMR_FLATTENPATH = 65,
        EMR_WIDENPATH = 66,
        EMR_SELECTCLIPPATH = 67,
        EMR_ABORTPATH = 68,
        EMR_GDICOMMENT = 70,
        EMR_FILLRGN = 71,
        EMR_FRAMERGN = 72,
        EMR_INVERTRGN = 73,
        EMR_PAINTRGN = 74,
        EMR_EXTSELECTCLIPRGN = 75,
        EMR_BITBLT = 76,
        EMR_STRETCHBLT = 77,
        EMR_MASKBLT = 78,
        EMR_PLGBLT = 79,
        EMR_SETDIBITSTODEVICE = 80,
        EMR_STRETCHDIBITS = 81,
        EMR_EXTCREATEFONTINDIRECTW = 82,
        EMR_EXTTEXTOUTA = 83,
        EMR_EXTTEXTOUTW = 84,
        EMR_POLYBEZIER16 = 85,
        EMR_POLYGON16 = 86,
        EMR_POLYLINE16 = 87,
        EMR_POLYBEZIERTO16 = 88,
        EMR_POLYLINETO16 = 89,
        EMR_POLYPOLYLINE16 = 90,
        EMR_POLYPOLYGON16 = 91,
        EMR_POLYDRAW16 = 92,
        EMR_CREATEMONOBRUSH = 93,
        EMR_CREATEDIBPATTERNBRUSHPT = 94,
        EMR_EXTCREATEPEN = 95,
        EMR_POLYTEXTOUTA = 96,
        EMR_POLYTEXTOUTW = 97,
        EMR_SETICMMODE = 98,
        EMR_CREATECOLORSPACE = 99,
        EMR_SETCOLORSPACE = 100,
        EMR_DELETECOLORSPACE = 101,
        EMR_GLSRECORD = 102,
        EMR_GLSBOUNDEDRECORD = 103,
        EMR_PIXELFORMAT = 104,
        EMR_MIN = 1,
        EMR_MAX = 104;
        // EMR_MAX = 97;
        public const int EPS_SIGNATURE = 0x46535045,
        ENUM_ALL_CALENDARS = unchecked((int)0xFfffffff),
        ERROR_SEVERITY_SUCCESS = 0x00000000,
        ERROR_SEVERITY_INFORMATIONAL = 0x40000000,
        ERROR_SEVERITY_WARNING = unchecked((int)0x80000000),
        ERROR_SEVERITY_ERROR = unchecked((int)0xC0000000),
        EXCEPTION_NONCONTINUABLE = 0x1,
        EXCEPTION_MAXIMUM_PARAMETERS = 15,
        EVENT_MODIFY_STATE = 0x0002,
        EVENT_OBJECT_SELECTION = 0x8006,
        EVENTLOG_SEQUENTIAL_READ = 0x0001,
        EVENTLOG_SEEK_READ = 0x0002,
        EVENTLOG_FORWARDS_READ = 0x0004,
        EVENTLOG_BACKWARDS_READ = 0x0008,
        EVENTLOG_SUCCESS = 0x0000,
        EVENTLOG_ERROR_TYPE = 0x0001,
        EVENTLOG_WARNING_TYPE = 0x0002,
        EVENTLOG_INFORMATION_TYPE = 0x0004,
        EVENTLOG_AUDIT_SUCCESS = 0x0008,
        EVENTLOG_AUDIT_FAILURE = 0x0010,
        EVENTLOG_START_PAIRED_EVENT = 0x0001,
        EVENTLOG_END_PAIRED_EVENT = 0x0002,
        EVENTLOG_END_ALL_PAIRED_EVENTS = 0x0004,
        EVENTLOG_PAIRED_EVENT_ACTIVE = 0x0008,
        EVENTLOG_PAIRED_EVENT_INACTIVE = 0x0010,
        EDGE_RAISED = (0x0001|0x0004),
        EDGE_SUNKEN = (0x0002|0x0008),
        EDGE_ETCHED = (0x0002|0x0004),
        EDGE_BUMP = (0x0001|0x0008),
        EW_RESTARTWINDOWS = 0x0042,
        EW_REBOOTSYSTEM = 0x0043,
        EW_EXITANDEXECAPP = 0x0044,
        ENDSESSION_LOGOFF = unchecked((int)0x80000000),
        EWX_LOGOFF = 0,
        EWX_SHUTDOWN = 1,
        EWX_REBOOT = 2,
        EWX_FORCE = 4,
        EWX_POWEROFF = 8,
        ESB_ENABLE_BOTH = 0x0000,
        ESB_DISABLE_BOTH = 0x0003,
        ESB_DISABLE_LEFT = 0x0001,
        ESB_DISABLE_RIGHT = 0x0002,
        ESB_DISABLE_UP = 0x0001,
        ESB_DISABLE_DOWN = 0x0002,
        ESB_DISABLE_LTUP = 0x0001,
        ESB_DISABLE_RTDN = 0x0002,
        ES_LEFT = 0x0000,
        ES_CENTER = 0x0001,
        ES_RIGHT = 0x0002,
        ES_MULTILINE = 0x0004,
        ES_UPPERCASE = 0x0008,
        ES_LOWERCASE = 0x0010,
        ES_PASSWORD = 0x0020,
        ES_AUTOVSCROLL = 0x0040,
        ES_AUTOHSCROLL = 0x0080,
        ES_NOHIDESEL = 0x0100,
        ES_OEMCONVERT = 0x0400,
        ES_READONLY = 0x0800,
        ES_WANTRETURN = 0x1000,
        ES_NUMBER = 0x2000,
        EN_SETFOCUS = 0x0100,
        EN_KILLFOCUS = 0x0200,
        EN_CHANGE = 0x0300,
        EN_UPDATE = 0x0400,
        EN_ERRSPACE = 0x0500,
        EN_MAXTEXT = 0x0501,
        EN_HSCROLL = 0x0601,
        EN_VSCROLL = 0x0602,
        EC_LEFTMARGIN = 0x0001,
        EC_RIGHTMARGIN = 0x0002,
        EC_USEFONTINFO = 0xffff,
        EM_GETSEL = 0x00B0,
        EM_SETSEL = 0x00B1,
        EM_GETRECT = 0x00B2,
        EM_SETRECT = 0x00B3,
        EM_SETRECTNP = 0x00B4,
        EM_SCROLL = 0x00B5,
        EM_LINESCROLL = 0x00B6,
        EM_SCROLLCARET = 0x00B7,
        EM_GETMODIFY = 0x00B8,
        EM_SETMODIFY = 0x00B9,
        EM_GETLINECOUNT = 0x00BA,
        EM_LINEINDEX = 0x00BB,
        EM_SETHANDLE = 0x00BC,
        EM_GETHANDLE = 0x00BD,
        EM_GETTHUMB = 0x00BE,
        EM_LINELENGTH = 0x00C1,
        EM_REPLACESEL = 0x00C2,
        EM_GETLINE = 0x00C4,
        EM_LIMITTEXT = 0x00C5,
        EM_CANUNDO = 0x00C6,
        EM_UNDO = 0x00C7,
        EM_FMTLINES = 0x00C8,
        EM_LINEFROMCHAR = 0x00C9,
        EM_SETTABSTOPS = 0x00CB,
        EM_SETPASSWORDCHAR = 0x00CC,
        EM_EMPTYUNDOBUFFER = 0x00CD,
        EM_GETFIRSTVISIBLELINE = 0x00CE,
        EM_SETREADONLY = 0x00CF,
        EM_SETWORDBREAKPROC = 0x00D0,
        EM_GETWORDBREAKPROC = 0x00D1,
        EM_GETPASSWORDCHAR = 0x00D2,
        EM_SETMARGINS = 0x00D3,
        EM_GETMARGINS = 0x00D4,
        EM_SETLIMITTEXT = 0x00C5,
        EM_GETLIMITTEXT = 0x00D5,
        EM_POSFROMCHAR = 0x00D6,
        EM_CHARFROMPOS = 0x00D7,
        ENUM_CURRENT_SETTINGS = (-1),
        ENUM_REGISTRY_SETTINGS = (-2),
        E_DRAW = unchecked((int)0x80040140),
        EXCEPTION_ACCESS_VIOLATION = (unchecked((int)0xC0000005)),
        EXCEPTION_DATATYPE_MISALIGNMENT = (unchecked((int)0x80000002)),
        EXCEPTION_BREAKPOINT = (unchecked((int)0x80000003)),
        EXCEPTION_SINGLE_STEP = (unchecked((int)0x80000004)),
        EXCEPTION_ARRAY_BOUNDS_EXCEEDED = (unchecked((int)0xC000008C)),
        EXCEPTION_FLT_DENORMAL_OPERAND = (unchecked((int)0xC000008D)),
        EXCEPTION_FLT_DIVIDE_BY_ZERO = (unchecked((int)0xC000008E)),
        EXCEPTION_FLT_INEXACT_RESULT = (unchecked((int)0xC000008F)),
        EXCEPTION_FLT_INVALID_OPERATION = (unchecked((int)0xC0000090)),
        EXCEPTION_FLT_OVERFLOW = (unchecked((int)0xC0000091)),
        EXCEPTION_FLT_STACK_CHECK = (unchecked((int)0xC0000092)),
        EXCEPTION_FLT_UNDERFLOW = (unchecked((int)0xC0000093)),
        EXCEPTION_INT_DIVIDE_BY_ZERO = (unchecked((int)0xC0000094)),
        EXCEPTION_INT_OVERFLOW = (unchecked((int)0xC0000095)),
        EXCEPTION_PRIV_INSTRUCTION = (unchecked((int)0xC0000096)),
        EXCEPTION_IN_PAGE_ERROR = (unchecked((int)0xC0000006)),
        EXCEPTION_ILLEGAL_INSTRUCTION = (unchecked((int)0xC000001D)),
        EXCEPTION_NONCONTINUABLE_EXCEPTION = (unchecked((int)0xC0000025)),
        EXCEPTION_STACK_OVERFLOW = (unchecked((int)0xC00000FD)),
        EXCEPTION_INVALID_DISPOSITION = (unchecked((int)0xC0000026)),
        EXCEPTION_GUARD_PAGE = (unchecked((int)0x80000001)),
        EXCEPTION_INVALID_HANDLE = (unchecked((int)0xC0000008)),
        EVENT_ALL_ACCESS = ((0x000F0000)|(0x00100000)|0x3);


        public const int FNERR_FILENAMECODES = 0x3000,
        FNERR_SUBCLASSFAILURE = 0x3001,
        FNERR_INVALIDFILENAME = 0x3002,
        FNERR_BUFFERTOOSMALL = 0x3003,
        FRERR_FINDREPLACECODES = 0x4000,
        FRERR_BUFFERLENGTHZERO = 0x4001,
        FR_DOWN = 0x00000001,
        FR_WHOLEWORD = 0x00000002,
        FR_MATCHCASE = 0x00000004,
        FR_FINDNEXT = 0x00000008,
        FR_REPLACE = 0x00000010,
        FR_REPLACEALL = 0x00000020,
        FR_DIALOGTERM = 0x00000040,
        FR_SHOWHELP = 0x00000080,
        FR_ENABLEHOOK = 0x00000100,
        FR_ENABLETEMPLATE = 0x00000200,
        FR_NOUPDOWN = 0x00000400,
        FR_NOMATCHCASE = 0x00000800,
        FR_NOWHOLEWORD = 0x00001000,
        FR_ENABLETEMPLATEHANDLE = 0x00002000,
        FR_HIDEUPDOWN = 0x00004000,
        FR_HIDEMATCHCASE = 0x00008000,
        FR_HIDEWHOLEWORD = 0x00010000;
        public const bool FALSE = false;
        public const int frm1 = 0x0434,
        frm2 = 0x0435,
        frm3 = 0x0436,
        frm4 = 0x0437,
        FILEOPENORD = 1536,
        FINDDLGORD = 1540,
        FONTDLGORD = 1542,
        FORMATDLGORD31 = 1543,
        FORMATDLGORD30 = 1544,
        FADF_AUTO = (0x1),
        FADF_STATIC = (0x2),
        FADF_EMBEDDED = (0x4),
        FADF_FIXEDSIZE = (0x10),
        FADF_BSTR = (0x100),
        FADF_UNKNOWN = (0x200),
        FADF_DISPATCH = (0x400),
        FADF_VARIANT = (unchecked((int)0x800)),
        FADF_RESERVED = (0xf0e8),
        FO_MOVE = 0x0001,
        FO_COPY = 0x0002,
        FO_DELETE = 0x0003,
        FO_RENAME = 0x0004,
        FOF_MULTIDESTFILES = 0x0001,
        FOF_CONFIRMMOUSE = 0x0002,
        FOF_SILENT = 0x0004,
        FOF_RENAMEONCOLLISION = 0x0008,
        FOF_NOCONFIRMATION = 0x0010,
        FOF_WANTMAPPINGHANDLE = 0x0020,
        FOF_ALLOWUNDO = 0x0040,
        FOF_FILESONLY = 0x0080,
        FOF_SIMPLEPROGRESS = 0x0100,
        FOF_NOCONFIRMMKDIR = 0x0200,
        FOF_NOERRORUI = 0x0400,
        FILE_BEGIN = 0,
        FILE_CURRENT = 1,
        FILE_END = 2,
        FILE_FLAG_WRITE_THROUGH = unchecked((int)0x80000000),
        FILE_FLAG_OVERLAPPED = 0x40000000,
        FILE_FLAG_NO_BUFFERING = 0x20000000,
        FILE_FLAG_RANDOM_ACCESS = 0x10000000,
        FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000,
        FILE_FLAG_DELETE_ON_CLOSE = 0x04000000,
        FILE_FLAG_BACKUP_SEMANTICS = 0x02000000,
        FILE_FLAG_POSIX_SEMANTICS = 0x01000000,
        FILE_TYPE_UNKNOWN = 0x0000,
        FILE_TYPE_DISK = 0x0001,
        FILE_TYPE_CHAR = 0x0002,
        FILE_TYPE_PIPE = 0x0003,
        FILE_TYPE_REMOTE = unchecked((int)0x8000),
        FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100,
        FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200,
        FORMAT_MESSAGE_FROM_STRING = 0x00000400,
        FORMAT_MESSAGE_FROM_HMODULE = 0x00000800,
        FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000,
        FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000,
        FORMAT_MESSAGE_MAX_WIDTH_MASK = 0x000000FF,
        FIND_FIRST_EX_CASE_SENSITIVE = 0x00000001,
        FROM_LEFT_1ST_BUTTON_PRESSED = 0x0001,
        FROM_LEFT_2ND_BUTTON_PRESSED = 0x0004,
        FROM_LEFT_3RD_BUTTON_PRESSED = 0x0008,
        FROM_LEFT_4TH_BUTTON_PRESSED = 0x0010,
        FOCUS_EVENT = 0x0010,
        FOREGROUND_BLUE = 0x0001,
        FOREGROUND_GREEN = 0x0002,
        FOREGROUND_RED = 0x0004,
        FOREGROUND_INTENSITY = 0x0008;
        // FALSE = 0;
        public const int FACILITY_WINDOWS = 8,
        FACILITY_STORAGE = 3,
        FACILITY_RPC = 1,
        FACILITY_SSPI = 9,
        FACILITY_WIN32 = 7,
        FACILITY_CONTROL = 10,
        FACILITY_NULL = 0,
        FACILITY_INTERNET = 12,
        FACILITY_ITF = 4,
        FACILITY_DISPATCH = 2,
        FACILITY_CERT = 11,
        FACILITY_NT_BIT = 0x10000000,
        FLUSHOUTPUT = 6,
        FIXED_PITCH = 1,
        FS_LATIN1 = 0x00000001,
        FS_LATIN2 = 0x00000002,
        FS_CYRILLIC = 0x00000004,
        FS_GREEK = 0x00000008,
        FS_TURKISH = 0x00000010,
        FS_HEBREW = 0x00000020,
        FS_ARABIC = 0x00000040,
        FS_BALTIC = 0x00000080,
        FS_VIETNAMESE = 0x00000100,
        FS_THAI = 0x00010000,
        FS_JISJAPAN = 0x00020000,
        FS_CHINESESIMP = 0x00040000,
        FS_WANSUNG = 0x00080000,
        FS_CHINESETRAD = 0x00100000,
        FS_JOHAB = 0x00200000,
        FS_SYMBOL = unchecked((int)0x80000000),
        FF_DONTCARE = (0<<4),
        FF_ROMAN = (1<<4),
        FF_SWISS = (2<<4),
        FF_MODERN =(3<<4),
        FF_SCRIPT = (4<<4),
        FF_DECORATIVE = (5<<4),
        FW_DONTCARE = 0,
        FW_THIN = 100,
        FW_EXTRALIGHT = 200,
        FW_LIGHT = 300,
        FW_NORMAL = 400,
        FW_MEDIUM = 500,
        FW_SEMIBOLD = 600,
        FW_BOLD = 700,
        FW_EXTRABOLD = 800,
        FW_HEAVY = 900,
        FW_ULTRALIGHT = 200,
        FW_REGULAR = 400,
        FW_DEMIBOLD = 600,
        FW_ULTRABOLD = 800,
        FW_BLACK = 900,
        FLOODFILLBORDER = 0,
        FLOODFILLSURFACE = 1,
        FLI_MASK = 0x103B,
        FLI_GLYPHS = 0x00040000,
        FONTMAPPER_MAX = 10,
        FILE_READ_DATA = (0x0001),
        FILE_LIST_DIRECTORY = (0x0001),
        FILE_WRITE_DATA = (0x0002),
        FILE_ADD_FILE = (0x0002),
        FILE_APPEND_DATA = (0x0004),
        FILE_ADD_SUBDIRECTORY = (0x0004),
        FILE_CREATE_PIPE_INSTANCE = (0x0004),
        FILE_READ_EA = (0x0008),
        FILE_WRITE_EA = (0x0010),
        FILE_EXECUTE = (0x0020),
        FILE_TRAVERSE = (0x0020),
        FILE_DELETE_CHILD = (0x0040),
        FILE_READ_ATTRIBUTES = (0x0080),
        FILE_WRITE_ATTRIBUTES = (0x0100),
        FILE_SHARE_READ = 0x00000001,
        FILE_SHARE_WRITE = 0x00000002,
        FILE_SHARE_DELETE = 0x00000004,
        FILE_ATTRIBUTE_READONLY = 0x00000001,
        FILE_ATTRIBUTE_HIDDEN = 0x00000002,
        FILE_ATTRIBUTE_SYSTEM = 0x00000004,
        FILE_ATTRIBUTE_DIRECTORY = 0x00000010,
        FILE_ATTRIBUTE_ARCHIVE = 0x00000020,
        FILE_ATTRIBUTE_NORMAL = 0x00000080,
        FILE_ATTRIBUTE_TEMPORARY = 0x00000100,
        FILE_ATTRIBUTE_COMPRESSED = 0x00000800,
        FILE_ATTRIBUTE_OFFLINE = 0x00001000,
        FILE_NOTIFY_CHANGE_FILE_NAME = 0x00000001,
        FILE_NOTIFY_CHANGE_DIR_NAME = 0x00000002,
        FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x00000004,
        FILE_NOTIFY_CHANGE_SIZE = 0x00000008,
        FILE_NOTIFY_CHANGE_LAST_WRITE = 0x00000010,
        FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x00000020,
        FILE_NOTIFY_CHANGE_CREATION = 0x00000040,
        FILE_NOTIFY_CHANGE_SECURITY = 0x00000100,
        FILE_ACTION_ADDED = 0x00000001,
        FILE_ACTION_REMOVED = 0x00000002,
        FILE_ACTION_MODIFIED = 0x00000003,
        FILE_ACTION_RENAMED_OLD_NAME = 0x00000004,
        FILE_ACTION_RENAMED_NEW_NAME = 0x00000005,
        FILE_CASE_SENSITIVE_SEARCH = 0x00000001,
        FILE_CASE_PRESERVED_NAMES = 0x00000002,
        FILE_UNICODE_ON_DISK = 0x00000004,
        FILE_PERSISTENT_ACLS = 0x00000008,
        FILE_FILE_COMPRESSION = 0x00000010,
        FILE_VOLUME_IS_COMPRESSED = 0x00008000,
        FAILED_ACCESS_ACE_FLAG = (unchecked((int)0x80)),
        FRAME_FPO = 0,
        FRAME_TRAP = 1,
        FRAME_TSS = 2,
        FRAME_NONFPO = 3,
        FORM_USER = 0x00000000,
        FORM_BUILTIN = 0x00000001,
        FORM_PRINTER = 0x00000002;
        public const int FVIRTKEY = 0x01;
        public const int FNOINVERT = 0x02,
        FSHIFT = 0x04,
        FCONTROL = 0x08,
        FALT = 0x10,
        FKF_FILTERKEYSON = 0x00000001,
        FKF_AVAILABLE = 0x00000002,
        FKF_HOTKEYACTIVE = 0x00000004,
        FKF_CONFIRMHOTKEY = 0x00000008,
        FKF_HOTKEYSOUND = 0x00000010,
        FKF_INDICATOR = 0x00000020,
        FKF_CLICKON = 0x00000040,
        FS_CASE_IS_PRESERVED = 0x00000002,
        FS_CASE_SENSITIVE = 0x00000001,
        FS_UNICODE_STORED_ON_DISK = 0x00000004,
        FS_PERSISTENT_ACLS = 0x00000008,
        FS_VOL_IS_COMPRESSED = 0x00008000,
        FS_FILE_COMPRESSION = 0x00000010,
        FILE_MAP_COPY = 0x0001,
        FILE_MAP_WRITE = 0x0002,
        FILE_MAP_READ = 0x0004,
        FILE_ALL_ACCESS = ((0x000F0000)|(0x00100000)|0x1FF);


        public const int grp1 = 0x0430,
        grp2 = 0x0431,
        grp3 = 0x0432,
        grp4 = 0x0433,
        GCS_COMPREADSTR = 0x0001,
        GCS_COMPREADATTR = 0x0002,
        GCS_COMPREADCLAUSE = 0x0004,
        GCS_COMPSTR = 0x0008,
        GCS_COMPATTR = 0x0010,
        GCS_COMPCLAUSE = 0x0020,
        GCS_CURSORPOS = 0x0080,
        GCS_DELTASTART = 0x0100,
        GCS_RESULTREADSTR = 0x0200,
        GCS_RESULTREADCLAUSE = 0x0400,
        GCS_RESULTSTR = 0x0800,
        GCS_RESULTCLAUSE = 0x1000,
        GGL_LEVEL = 0x00000001,
        GGL_INDEX = 0x00000002,
        GGL_STRING = 0x00000003,
        GGL_PRIVATE = 0x00000004,
        GL_LEVEL_NOGUIDELINE = 0x00000000,
        GL_LEVEL_FATAL = 0x00000001,
        GL_LEVEL_ERROR = 0x00000002,
        GL_LEVEL_WARNING = 0x00000003,
        GL_LEVEL_INFORMATION = 0x00000004,
        GL_ID_UNKNOWN = 0x00000000,
        GL_ID_NOMODULE = 0x00000001,
        GL_ID_NODICTIONARY = 0x00000010,
        GL_ID_CANNOTSAVE = 0x00000011,
        GL_ID_NOCONVERT = 0x00000020,
        GL_ID_TYPINGERROR = 0x00000021,
        GL_ID_TOOMANYSTROKE = 0x00000022,
        GL_ID_READINGCONFLICT = 0x00000023,
        GL_ID_INPUTREADING = 0x00000024,
        GL_ID_INPUTRADICAL = 0x00000025,
        GL_ID_INPUTCODE = 0x00000026,
        GL_ID_INPUTSYMBOL = 0x00000027,
        GL_ID_CHOOSECANDIDATE = 0x00000028,
        GL_ID_REVERSECONVERSION = 0x00000029,
        GL_ID_PRIVATE_FIRST = 0x00008000,
        GL_ID_PRIVATE_LAST = 0x0000FFFF,
        GCL_CONVERSION = 0x0001,
        GCL_REVERSECONVERSION = 0x0002,
        GCL_REVERSE_LENGTH = 0x0003,
        GROUP_NAME = unchecked((int)0x80),
        GMEM_FIXED = 0x0000,
        GMEM_MOVEABLE = 0x0002,
        GMEM_NOCOMPACT = 0x0010,
        GMEM_NODISCARD = 0x0020,
        GMEM_ZEROINIT = 0x0040,
        GMEM_MODIFY = 0x0080,
        GMEM_DISCARDABLE = 0x0100,
        GMEM_NOT_BANKED = 0x1000,
        GMEM_SHARE = 0x2000,
        GMEM_DDESHARE = 0x2000,
        GMEM_NOTIFY = 0x4000,
        GMEM_LOWER = 0x1000,
        GMEM_VALID_FLAGS = 0x7F72,
        GMEM_INVALID_HANDLE = unchecked((int)0x8000),
        GHND = (0x0002|0x0040),
        GPTR = (0x0000|0x0040),
        GMEM_DISCARDED = 0x4000,
        GMEM_LOCKCOUNT = 0x00FF,
        GET_TAPE_MEDIA_INFORMATION = 0,
        GET_TAPE_DRIVE_INFORMATION = 1,
        GDI_ERROR = (unchecked((int)0xFFFFFFFF)),
        GETCOLORTABLE = 5,
        GETPHYSPAGESIZE = 12,
        GETPRINTINGOFFSET = 13,
        GETSCALINGFACTOR = 14,
        GETPENWIDTH = 16,
        GETTECHNOLGY = 20,
        GETTECHNOLOGY = 20,
        GETVECTORPENSIZE = 26,
        GETVECTORBRUSHSIZE = 27,
        GETSETPAPERBINS = 29,
        GETSETPRINTORIENT = 30,
        GETSETPAPERMETRICS = 35,
        GETDEVICEUNITS = 42,
        GETEXTENDEDTEXTMETRICS = 256,
        GETEXTENTTABLE = 257,
        GETPAIRKERNTABLE = 258,
        GETTRACKKERNTABLE = 259,
        GETFACENAME = 513,
        GETSETSCREENPARAMS = 3072,
        GB2312_CHARSET = 134,
        GREEK_CHARSET = 161,
        GM_COMPATIBLE = 1,
        GM_ADVANCED = 2,
        GM_LAST = 2,
        GRAY_BRUSH = 2,
        GGO_METRICS = 0,
        GGO_BITMAP = 1,
        GGO_NATIVE = 2,
        GGO_GRAY2_BITMAP = 4,
        GGO_GRAY4_BITMAP = 5,
        GGO_GRAY8_BITMAP = 6,
        GGO_GLYPH_INDEX = 0x0080,
        GCP_DBCS = 0x0001,
        GCP_REORDER = 0x0002,
        GCP_USEKERNING = 0x0008,
        GCP_GLYPHSHAPE = 0x0010,
        GCP_LIGATE = 0x0020,
        GCP_DIACRITIC = 0x0100,
        GCP_KASHIDA = 0x0400,
        GCP_ERROR = unchecked((int)0x8000),
        GCP_JUSTIFY = 0x00010000,
        GCP_CLASSIN = 0x00080000,
        GCP_MAXEXTENT = 0x00100000,
        GCP_JUSTIFYIN = 0x00200000,
        GCP_DISPLAYZWG = 0x00400000,
        GCP_SYMSWAPOFF = 0x00800000,
        GCP_NUMERICOVERRIDE = 0x01000000,
        GCP_NEUTRALOVERRIDE = 0x02000000,
        GCP_NUMERICSLATIN = 0x04000000,
        GCP_NUMERICSLOCAL = 0x08000000,
        GCPCLASS_LATIN = 1,
        GCPCLASS_HEBREW = 2,
        GCPCLASS_ARABIC = 2,
        GCPCLASS_NEUTRAL = 3,
        GCPCLASS_LOCALNUMBER = 4,
        GCPCLASS_LATINNUMBER = 5,
        GCPCLASS_LATINNUMERICTERMINATOR = 6,
        GCPCLASS_LATINNUMERICSEPARATOR = 7,
        GCPCLASS_NUMERICSEPARATOR = 8,
        GCPCLASS_PREBOUNDLTR = unchecked((int)0x80),
        GCPCLASS_PREBOUNDRTL = 0x40,
        GCPCLASS_POSTBOUNDLTR = 0x20,
        GCPCLASS_POSTBOUNDRTL = 0x10,
        GCPGLYPH_LINKBEFORE = unchecked((int)0x8000),
        GCPGLYPH_LINKAFTER = 0x4000,
        GDICOMMENT_IDENTIFIER = 0x43494447,
        GDICOMMENT_WINDOWS_METAFILE = unchecked((int)0x80000001),
        GDICOMMENT_BEGINGROUP = 0x00000002,
        GDICOMMENT_ENDGROUP = 0x00000003,
        GDICOMMENT_MULTIFORMATS = 0x40000004,
        GENERIC_READ = (unchecked((int)0x80000000)),
        GENERIC_WRITE = (0x40000000),
        GENERIC_EXECUTE = (0x20000000),
        GENERIC_ALL = (0x10000000),
        GROUP_SECURITY_INFORMATION = (0x00000002),
        GWL_WNDPROC = (-4),
        GWL_HINSTANCE = (-6),
        GWL_HWNDPARENT = (-8),
        GWL_STYLE = (-16),
        GWL_EXSTYLE = (-20),
        GWL_USERDATA = (-21),
        GWL_ID = (-12),
        GCL_MENUNAME = (-8),
        GCL_HBRBACKGROUND = (-10),
        GCL_HCURSOR = (-12),
        GCL_HICON = (-14),
        GCL_HMODULE = (-16),
        GCL_CBWNDEXTRA = (-18),
        GCL_CBCLSEXTRA = (-20),
        GCL_WNDPROC = (-24),
        GCL_STYLE = (-26),
        GCW_ATOM = (-32),
        GCL_HICONSM = (-34),
        GMDI_USEDISABLED = 0x0001,
        GMDI_GOINTOPOPUPS = 0x0002,
        GW_HWNDFIRST = 0,
        GW_HWNDLAST = 1,
        GW_HWNDNEXT = 2,
        GW_HWNDPREV = 3,
        GW_OWNER = 4,
        GW_CHILD = 5,
        GW_MAX = 5,
        GMR_VISIBLE = 0,
        GMR_DAYSTATE = 1,
        GDTR_MIN = 0x0001,
        GDTR_MAX = 0x0002,
        GDT_ERROR = -1,
        GDT_VALID = 0,
        GDT_NONE = 1;

        
        public const int HDATA_APPOWNED = 0x0001,
        HANGUP_PENDING = 0x04,
        HANGUP_COMPLETE = 0x05,
        HIGH_PRIORITY_CLASS = 0x00000080,
        HANDLE_FLAG_INHERIT = 0x00000001,
        HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x00000002,
        HINSTANCE_ERROR = 32,
        HW_PROFILE_GUIDLEN = 39,
        HP_ALGID = 0x0001,
        HP_HASHVAL = 0x0002,
        HP_HASHSIZE = 0x0004,
        HALFTONE = 4,
        HANGEUL_CHARSET = 129,
        HEBREW_CHARSET = 177,
        HOLLOW_BRUSH = 5,
        HS_HORIZONTAL = 0,
        HS_VERTICAL = 1,
        HS_FDIAGONAL = 2,
        HS_BDIAGONAL = 3,
        HS_CROSS = 4,
        HS_DIAGCROSS = 5,
        HORZSIZE = 4,
        HORZRES = 8,
        HEAP_NO_SERIALIZE = 0x00000001,
        HEAP_GROWABLE = 0x00000002,
        HEAP_GENERATE_EXCEPTIONS = 0x00000004,
        HEAP_ZERO_MEMORY = 0x00000008,
        HEAP_REALLOC_IN_PLACE_ONLY = 0x00000010,
        HEAP_TAIL_CHECKING_ENABLED = 0x00000020,
        HEAP_FREE_CHECKING_ENABLED = 0x00000040,
        HEAP_DISABLE_COALESCE_ON_FREE = 0x00000080,
        HEAP_CREATE_ALIGN_16 = 0x00010000,
        HEAP_CREATE_ENABLE_TRACING = 0x00020000,
        HEAP_MAXIMUM_TAG = 0x0FFF,
        HEAP_PSEUDO_TAG_FLAG = unchecked((int)0x8000),
        HEAP_TAG_SHIFT = 16,
        HIDE_WINDOW = 0,
        HC_ACTION = 0,
        HC_GETNEXT = 1,
        HC_SKIP = 2,
        HC_NOREMOVE = 3,
        HC_NOREM = 3,
        HC_SYSMODALON = 4,
        HC_SYSMODALOFF = 5,
        HCBT_MOVESIZE = 0,
        HCBT_MINMAX = 1,
        HCBT_QS = 2,
        HCBT_CREATEWND = 3,
        HCBT_DESTROYWND = 4,
        HCBT_ACTIVATE = 5,
        HCBT_CLICKSKIPPED = 6,
        HCBT_KEYSKIPPED = 7,
        HCBT_SYSCOMMAND = 8,
        HCBT_SETFOCUS = 9,
        HSHELL_WINDOWCREATED = 1,
        HSHELL_WINDOWDESTROYED = 2,
        HSHELL_ACTIVATESHELLWINDOW = 3,
        HSHELL_WINDOWACTIVATED = 4,
        HSHELL_GETMINRECT = 5,
        HSHELL_REDRAW = 6,
        HSHELL_TASKMAN = 7,
        HSHELL_LANGUAGE = 8,
        HKL_PREV = 0,
        HKL_NEXT = 1,
        HTERROR = (-2),
        HTTRANSPARENT = (-1),
        HTNOWHERE = 0,
        HTCLIENT = 1,
        HTCAPTION = 2,
        HTSYSMENU = 3,
        HTGROWBOX = 4,
        HTSIZE = 4,
        HTMENU = 5,
        HTHSCROLL = 6,
        HTVSCROLL = 7,
        HTMINBUTTON = 8,
        HTMAXBUTTON = 9,
        HTLEFT = 10,
        HTRIGHT = 11,
        HTTOP = 12,
        HTTOPLEFT = 13,
        HTTOPRIGHT = 14,
        HTBOTTOM = 15,
        HTBOTTOMLEFT = 16,
        HTBOTTOMRIGHT = 17,
        HTBORDER = 18,
        HTREDUCE = 8,
        HTZOOM = 9,
        HTSIZEFIRST = 10,
        HTSIZELAST = 17,
        HTOBJECT = 19,
        HTCLOSE = 20,
        HTHELP = 21,
        HOVER_DEFAULT = unchecked((int)0xFFFFFFFF),
        HELPINFO_WINDOW = 0x0001,
        HELPINFO_MENUITEM = 0x0002,
        HELP_CONTEXT = 0x0001,
        HELP_QUIT = 0x0002,
        HELP_INDEX = 0x0003,
        HELP_CONTENTS = 0x0003,
        HELP_HELPONHELP = 0x0004,
        HELP_SETINDEX = 0x0005,
        HELP_SETCONTENTS = 0x0005,
        HELP_CONTEXTPOPUP = 0x0008,
        HELP_FORCEFILE = 0x0009,
        HELP_KEY = 0x0101,
        HELP_COMMAND = 0x0102,
        HELP_PARTIALKEY = 0x0105,
        HELP_MULTIKEY = 0x0201,
        HELP_SETWINPOS = 0x0203,
        HELP_CONTEXTMENU = 0x000a,
        HELP_FINDER = 0x000b,
        HELP_WM_HELP = 0x000c,
        HELP_SETPOPUP_POS = 0x000d,
        HELP_TCARD = unchecked((int)0x8000),
        HELP_TCARD_DATA = 0x0010,
        HELP_TCARD_OTHER_CALLER = 0x0011,
        HCF_HIGHCONTRASTON = 0x00000001,
        HCF_AVAILABLE = 0x00000002,
        HCF_HOTKEYACTIVE = 0x00000004,
        HCF_CONFIRMHOTKEY = 0x00000008,
        HCF_HOTKEYSOUND = 0x00000010,
        HCF_INDICATOR = 0x00000020,
        HCF_HOTKEYAVAILABLE = 0x00000040,
        HDM_FIRST = 0x1200,
        HDN_FIRST = (0-300),
        HDN_LAST = (0-399),
        HDS_HORZ = 0x0000,
        HDS_BUTTONS = 0x0002,
        HDS_HOTTRACK = 0x0004,
        HDS_HIDDEN = 0x0008,
        HDS_DRAGDROP = 0x0040,
        HDS_FULLDRAG = 0x0080,
        HDI_WIDTH = 0x0001,
        HDI_HEIGHT = 0x0001,
        HDI_TEXT = 0x0002,
        HDI_FORMAT = 0x0004,
        HDI_LPARAM = 0x0008,
        HDI_BITMAP = 0x0010,
        HDI_IMAGE = 0x0020,
        HDI_DI_SETITEM = 0x0040,
        HDI_ORDER = 0x0080,
        HDF_LEFT = 0,
        HDF_RIGHT = 1,
        HDF_CENTER = 2,
        HDF_JUSTIFYMASK = 0x0003,
        HDF_RTLREADING = 4,
        HDF_OWNERDRAW = unchecked((int)0x8000),
        HDF_STRING = 0x4000,
        HDF_BITMAP = 0x2000,
        HDF_BITMAP_ON_RIGHT = 0x1000,
        HDF_IMAGE = 0x0800,
        HDM_GETITEMCOUNT = (0x1200+0),
        HDM_INSERTITEMA = (0x1200+1),
        HDM_INSERTITEMW = (0x1200+10),
        HDM_DELETEITEM = (0x1200+2),
        HDM_GETITEMA = (0x1200+3),
        HDM_GETITEMW = (0x1200+11),
        HDM_SETITEMA = (0x1200+4),
        HDM_SETITEMW = (0x1200+12),
        HDM_LAYOUT = (0x1200+5),
        HHT_NOWHERE = 0x0001,
        HHT_ONHEADER = 0x0002,
        HHT_ONDIVIDER = 0x0004,
        HHT_ONDIVOPEN = 0x0008,
        HHT_ABOVE = 0x0100,
        HHT_BELOW = 0x0200,
        HHT_TORIGHT = 0x0400,
        HHT_TOLEFT = 0x0800,
        HDM_HITTEST = (0x1200+6),
        HDM_GETITEMRECT = (0x1200+7),
        HDM_SETIMAGELIST = (0x1200+8),
        HDM_GETIMAGELIST = (0x1200+9),
        HDM_ORDERTOINDEX = (0x1200+15),
        HDM_CREATEDRAGIMAGE = (0x1200+16),
        HDM_GETORDERARRAY = (0x1200+17),
        HDM_SETORDERARRAY = (0x1200+18),
        HDM_SETHOTDIVIDER = (0x1200+19),
        HDN_ITEMCHANGINGA = ((0-300)-0),
        HDN_ITEMCHANGINGW = ((0-300)-20),
        HDN_ITEMCHANGEDA = ((0-300)-1),
        HDN_ITEMCHANGEDW = ((0-300)-21),
        HDN_ITEMCLICKA = ((0-300)-2),
        HDN_ITEMCLICKW = ((0-300)-22),
        HDN_ITEMDBLCLICKA = ((0-300)-3),
        HDN_ITEMDBLCLICKW = ((0-300)-23),
        HDN_DIVIDERDBLCLICKA = ((0-300)-5),
        HDN_DIVIDERDBLCLICKW = ((0-300)-25),
        HDN_BEGINTRACKA = ((0-300)-6),
        HDN_BEGINTRACKW = ((0-300)-26),
        HDN_ENDTRACKA = ((0-300)-7),
        HDN_ENDTRACKW = ((0-300)-27),
        HDN_TRACKA = ((0-300)-8),
        HDN_TRACKW = ((0-300)-28),
        HDN_GETDISPINFOA = ((0-300)-9),
        HDN_GETDISPINFOW = ((0-300)-29),
        HDN_BEGINDRAG = ((0-300)-10),
        HDN_ENDDRAG = ((0-300)-11),
        HIST_BACK = 0,
        HIST_FORWARD = 1,
        HIST_FAVORITES = 2,
        HIST_ADDTOFAVORITES = 3,
        HIST_VIEWTREE = 4,
        HOTKEYF_SHIFT = 0x01,
        HOTKEYF_CONTROL = 0x02,
        HOTKEYF_ALT = 0x04,
        HOTKEYF_EXT = 0x08,
        HKCOMB_NONE = 0x0001,
        HKCOMB_S = 0x0002,
        HKCOMB_C = 0x0004,
        HKCOMB_A = 0x0008,
        HKCOMB_SC = 0x0010,
        HKCOMB_SA = 0x0020,
        HKCOMB_CA = 0x0040,
        HKCOMB_SCA = 0x0080,
        HKM_SETHOTKEY = (0x0400+1),
        HKM_GETHOTKEY = (0x0400+2),
        HKM_SETRULES = (0x0400+3),
        HWND_TOP = 0,
        HWND_BOTTOM = 1,
        HWND_TOPMOST = -1,
        HWND_NOTOPMOST = -2,
        HICF_OTHER = 0x00000000,
        HICF_MOUSE = 0x00000001,
        HICF_ARROWKEYS = 0x00000002,
        HICF_ACCELERATOR = 0x00000004,
        HICF_DUPACCEL = 0x00000008,
        HICF_ENTERING = 0x00000010,
        HICF_LEAVING = 0x00000020,
        HICF_RESELECT = 0x00000040,
        HICF_TOGGLEDROPDOWN = 0x00000100,
        HINST_COMMCTRL = -1;


        public const int ITALIC_FONTTYPE = 0x0200,
        ico1 = 0x043c,
        ico2 = 0x043d,
        ico3 = 0x043e,
        ico4 = 0x043f,
        IMC_GETCANDIDATEPOS = 0x0007,
        IMC_SETCANDIDATEPOS = 0x0008,
        IMC_GETCOMPOSITIONFONT = 0x0009,
        IMC_SETCOMPOSITIONFONT = 0x000A,
        IMC_GETCOMPOSITIONWINDOW = 0x000B,
        IMC_SETCOMPOSITIONWINDOW = 0x000C,
        IMC_GETSTATUSWINDOWPOS = 0x000F,
        IMC_SETSTATUSWINDOWPOS = 0x0010,
        IMC_CLOSESTATUSWINDOW = 0x0021,
        IMC_OPENSTATUSWINDOW = 0x0022,
        ISC_SHOWUICANDIDATEWINDOW = 0x00000001,
        ISC_SHOWUICOMPOSITIONWINDOW = unchecked((int)0x80000000),
        ISC_SHOWUIGUIDELINE = 0x40000000,
        ISC_SHOWUIALLCANDIDATEWINDOW = 0x0000000F,
        ISC_SHOWUIALL = unchecked((int)0xC000000F),
        IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10,
        IME_CHOTKEY_SHAPE_TOGGLE = 0x11,
        IME_CHOTKEY_SYMBOL_TOGGLE = 0x12,
        IME_JHOTKEY_CLOSE_OPEN = 0x30,
        IME_KHOTKEY_SHAPE_TOGGLE = 0x50,
        IME_KHOTKEY_HANJACONVERT = 0x51,
        IME_KHOTKEY_ENGLISH = 0x52,
        IME_THOTKEY_IME_NONIME_TOGGLE = 0x70,
        IME_THOTKEY_SHAPE_TOGGLE = 0x71,
        IME_THOTKEY_SYMBOL_TOGGLE = 0x72,
        IME_HOTKEY_DSWITCH_FIRST = 0x100,
        IME_HOTKEY_DSWITCH_LAST = 0x11F,
        IME_HOTKEY_PRIVATE_FIRST = 0x200,
        IME_ITHOTKEY_RESEND_RESULTSTR = 0x200,
        IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201,
        IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202,
        IME_HOTKEY_PRIVATE_LAST = 0x21F,
        IMEVER_0310 = 0x0003000A,
        IMEVER_0400 = 0x00040000,
        IME_PROP_AT_CARET = 0x00010000,
        IME_PROP_SPECIAL_UI = 0x00020000,
        IME_PROP_CANDLIST_START_FROM_1 = 0x00040000,
        IME_PROP_UNICODE = 0x00080000,
        IGP_PROPERTY = 0x00000004,
        IGP_CONVERSION = 0x00000008,
        IGP_SENTENCE = 0x0000000c,
        IGP_UI = 0x00000010,
        IGP_SETCOMPSTR = 0x00000014,
        IGP_SELECT = 0x00000018,
        IME_CMODE_ALPHANUMERIC = 0x0000,
        IME_CMODE_NATIVE = 0x0001,
        IME_CMODE_CHINESE = 0x0001,
        IME_CMODE_HANGEUL = 0x0001,
        IME_CMODE_HANGUL = 0x0001,
        IME_CMODE_JAPANESE = 0x0001,
        IME_CMODE_KATAKANA = 0x0002,
        IME_CMODE_LANGUAGE = 0x0003,
        IME_CMODE_FULLSHAPE = 0x0008,
        IME_CMODE_ROMAN = 0x0010,
        IME_CMODE_CHARCODE = 0x0020,
        IME_CMODE_HANJACONVERT = 0x0040,
        IME_CMODE_SOFTKBD = 0x0080,
        IME_CMODE_NOCONVERSION = 0x0100,
        IME_CMODE_EUDC = 0x0200,
        IME_CMODE_SYMBOL = 0x0400,
        IME_SMODE_NONE = 0x0000,
        IME_SMODE_PLAURALCLAUSE = 0x0001,
        IME_SMODE_SINGLECONVERT = 0x0002,
        IME_SMODE_AUTOMATIC = 0x0004,
        IME_SMODE_PHRASEPREDICT = 0x0008,
        IME_CAND_UNKNOWN = 0x0000,
        IME_CAND_READ = 0x0001,
        IME_CAND_CODE = 0x0002,
        IME_CAND_MEANING = 0x0003,
        IME_CAND_RADICAL = 0x0004,
        IME_CAND_STROKE = 0x0005,
        IMN_CLOSESTATUSWINDOW = 0x0001,
        IMN_OPENSTATUSWINDOW = 0x0002,
        IMN_CHANGECANDIDATE = 0x0003,
        IMN_CLOSECANDIDATE = 0x0004,
        IMN_OPENCANDIDATE = 0x0005,
        IMN_SETCONVERSIONMODE = 0x0006,
        IMN_SETSENTENCEMODE = 0x0007,
        IMN_SETOPENSTATUS = 0x0008,
        IMN_SETCANDIDATEPOS = 0x0009,
        IMN_SETCOMPOSITIONFONT = 0x000A,
        IMN_SETCOMPOSITIONWINDOW = 0x000B,
        IMN_SETSTATUSWINDOWPOS = 0x000C,
        IMN_GUIDELINE = 0x000D,
        IMN_PRIVATE = 0x000E,
        IMM_ERROR_NODATA = (-1),
        IMM_ERROR_GENERAL = (-2),
        IME_CONFIG_GENERAL = 1,
        IME_CONFIG_REGISTERWORD = 2,
        IME_CONFIG_SELECTDICTIONARY = 3,
        IME_ESC_QUERY_SUPPORT = 0x0003,
        IME_ESC_RESERVED_FIRST = 0x0004,
        IME_ESC_RESERVED_LAST = 0x07FF,
        IME_ESC_PRIVATE_FIRST = 0x0800,
        IME_ESC_PRIVATE_LAST = 0x0FFF,
        IME_ESC_SEQUENCE_TO_INTERNAL = 0x1001,
        IME_ESC_GET_EUDC_DICTIONARY = 0x1003,
        IME_ESC_SET_EUDC_DICTIONARY = 0x1004,
        IME_ESC_MAX_KEY = 0x1005,
        IME_ESC_IME_NAME = 0x1006,
        IME_ESC_SYNC_HOTKEY = 0x1007,
        IME_ESC_HANJA_MODE = 0x1008,
        IME_ESC_AUTOMATA = 0x1009,
        IME_ESC_PRIVATE_HOTKEY = 0x100a,
        IME_REGWORD_STYLE_EUDC = 0x00000001,
        IME_REGWORD_STYLE_USER_FIRST = unchecked((int)0x80000000),
        IME_REGWORD_STYLE_USER_LAST = unchecked((int)0xFFFFFFFF),
        IDLFLAG_NONE = ((0)),
        IDLFLAG_FIN = ((0x1)),
        IDLFLAG_FOUT = ((0x2)),
        IDLFLAG_FLCID = ((0x4)),
        IDLFLAG_FRETVAL = ((unchecked((int)0x8))),
        IMPLTYPEFLAG_FDEFAULT = (0x1),
        IMPLTYPEFLAG_FSOURCE = (0x2),
        IMPLTYPEFLAG_FRESTRICTED = (0x4),
        IMPLTYPEFLAG_FDEFAULTVTABLE = (unchecked((int)0x8)),
        ID_DEFAULTINST = -2,
        ID_PSRESTARTWINDOWS = 0x2,
        ID_PSREBOOTSYSTEM = (0x2|0x1),
        IDLE_PRIORITY_CLASS = 0x00000040,
        IGNORE = 0,
        INFINITE = unchecked((int)0xFFFFFFFF),
        IE_BADID = (-1),
        IE_OPEN = (-2),
        IE_NOPEN = (-3),
        IE_MEMORY = (-4),
        IE_DEFAULT = (-5),
        IE_HARDWARE = (-10),
        IE_BYTESIZE = (-11),
        IE_BAUDRATE = (-12),
        INPLACE_E_NOTUNDOABLE = unchecked((int)0x800401A0),
        INPLACE_E_NOTOOLSPACE = unchecked((int)0x800401A1),
        INPLACE_E_FIRST = unchecked((int)0x800401A0),
        INPLACE_E_LAST = unchecked((int)0x800401AF),
        INPLACE_S_FIRST = 0x000401A0,
        INPLACE_S_LAST = 0x000401AF,
        INPLACE_S_TRUNCATED = 0x000401A0,
        INPUTLANGCHANGE_SYSCHARSET = 0x0001,
        INPUTLANGCHANGE_FORWARD    = 0x0002,
        INPUTLANGCHANGE_BACKWARD   = 0x0004,
        ILLUMINANT_DEVICE_DEFAULT = 0,
        ILLUMINANT_A = 1,
        ILLUMINANT_B = 2,
        ILLUMINANT_C = 3,
        ILLUMINANT_D50 = 4,
        ILLUMINANT_D55 = 5,
        ILLUMINANT_D65 = 6,
        ILLUMINANT_D75 = 7,
        ILLUMINANT_F2 = 8,
        ILLUMINANT_MAX_INDEX = 8,
        ILLUMINANT_TUNGSTEN = 1,
        ILLUMINANT_DAYLIGHT = 3,
        ILLUMINANT_FLUORESCENT = 8,
        ILLUMINANT_NTSC = 3,
        ICM_OFF = 1,
        ICM_ON = 2,
        ICM_QUERY = 3,
        IO_COMPLETION_MODIFY_STATE = 0x0002,
        INHERIT_ONLY_ACE = (unchecked((int)0x8)),
        IMAGE_DOS_SIGNATURE = 0x5A4D,
        IMAGE_OS2_SIGNATURE = 0x454E,
        IMAGE_OS2_SIGNATURE_LE = 0x454C,
        IMAGE_VXD_SIGNATURE = 0x454C,
        IMAGE_NT_SIGNATURE = 0x00004550,
        IMAGE_SIZEOF_FILE_HEADER = 20,
        IMAGE_FILE_RELOCS_STRIPPED = 0x0001,
        IMAGE_FILE_LINE_NUMS_STRIPPED = 0x0004,
        IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x0008,
        IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x0010,
        IMAGE_FILE_BYTES_REVERSED_LO = 0x0080,
        IMAGE_FILE_32BIT_MACHINE = 0x0100,
        IMAGE_FILE_DEBUG_STRIPPED = 0x0200,
        IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x0400,
        IMAGE_FILE_NET_RUN_FROM_SWAP = 0x0800,
        IMAGE_FILE_SYSTEM = 0x1000,
        IMAGE_FILE_DLL = 0x2000,
        IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,
        IMAGE_FILE_BYTES_REVERSED_HI = unchecked((int)0x8000),
        IMAGE_FILE_MACHINE_UNKNOWN = 0,
        IMAGE_FILE_MACHINE_I386 = 0x14c,
        IMAGE_FILE_MACHINE_R3000 = 0x162,
        IMAGE_FILE_MACHINE_R4000 = 0x166,
        IMAGE_FILE_MACHINE_R10000 = 0x168,
        IMAGE_FILE_MACHINE_ALPHA = 0x184,
        IMAGE_FILE_MACHINE_POWERPC = 0x1F0,
        IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16,
        IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 56,
        IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 28,
        IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 224,
        IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10b,
        IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,
        IMAGE_SUBSYSTEM_UNKNOWN = 0,
        IMAGE_SUBSYSTEM_NATIVE = 1,
        IMAGE_SUBSYSTEM_WINDOWS_GUI = 2,
        IMAGE_SUBSYSTEM_WINDOWS_CUI = 3,
        IMAGE_SUBSYSTEM_OS2_CUI = 5,
        IMAGE_SUBSYSTEM_POSIX_CUI = 7,
        IMAGE_SUBSYSTEM_RESERVED8 = 8,
        IMAGE_DIRECTORY_ENTRY_EXPORT = 0,
        IMAGE_DIRECTORY_ENTRY_IMPORT = 1,
        IMAGE_DIRECTORY_ENTRY_RESOURCE = 2,
        IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3,
        IMAGE_DIRECTORY_ENTRY_SECURITY = 4,
        IMAGE_DIRECTORY_ENTRY_BASERELOC = 5,
        IMAGE_DIRECTORY_ENTRY_DEBUG = 6,
        IMAGE_DIRECTORY_ENTRY_COPYRIGHT = 7,
        IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8,
        IMAGE_DIRECTORY_ENTRY_TLS = 9,
        IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10,
        IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11,
        IMAGE_DIRECTORY_ENTRY_IAT = 12,
        IMAGE_SIZEOF_SHORT_NAME = 8,
        IMAGE_SIZEOF_SECTION_HEADER = 40,
        IMAGE_SCN_TYPE_NO_PAD = 0x00000008,
        IMAGE_SCN_CNT_CODE = 0x00000020,
        IMAGE_SCN_CNT_INITIALIZED_DATA = 0x00000040,
        IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x00000080,
        IMAGE_SCN_LNK_OTHER = 0x00000100,
        IMAGE_SCN_LNK_INFO = 0x00000200,
        IMAGE_SCN_LNK_REMOVE = 0x00000800,
        IMAGE_SCN_LNK_COMDAT = 0x00001000,
        IMAGE_SCN_MEM_FARDATA = 0x00008000,
        IMAGE_SCN_MEM_PURGEABLE = 0x00020000,
        IMAGE_SCN_MEM_16BIT = 0x00020000,
        IMAGE_SCN_MEM_LOCKED = 0x00040000,
        IMAGE_SCN_MEM_PRELOAD = 0x00080000,
        IMAGE_SCN_ALIGN_1BYTES = 0x00100000,
        IMAGE_SCN_ALIGN_2BYTES = 0x00200000,
        IMAGE_SCN_ALIGN_4BYTES = 0x00300000,
        IMAGE_SCN_ALIGN_8BYTES = 0x00400000,
        IMAGE_SCN_ALIGN_16BYTES = 0x00500000,
        IMAGE_SCN_ALIGN_32BYTES = 0x00600000,
        IMAGE_SCN_ALIGN_64BYTES = 0x00700000,
        IMAGE_SCN_LNK_NRELOC_OVFL = 0x01000000,
        IMAGE_SCN_MEM_DISCARDABLE = 0x02000000,
        IMAGE_SCN_MEM_NOT_CACHED = 0x04000000,
        IMAGE_SCN_MEM_NOT_PAGED = 0x08000000,
        IMAGE_SCN_MEM_SHARED = 0x10000000,
        IMAGE_SCN_MEM_EXECUTE = 0x20000000,
        IMAGE_SCN_MEM_READ = 0x40000000,
        IMAGE_SCN_MEM_WRITE = unchecked((int)0x80000000),
        IMAGE_SCN_SCALE_INDEX = 0x00000001,
        IMAGE_SIZEOF_SYMBOL = 18,
        IMAGE_SYM_TYPE_NULL = 0x0000,
        IMAGE_SYM_TYPE_VOID = 0x0001,
        IMAGE_SYM_TYPE_CHAR = 0x0002,
        IMAGE_SYM_TYPE_SHORT = 0x0003,
        IMAGE_SYM_TYPE_INT = 0x0004,
        IMAGE_SYM_TYPE_LONG = 0x0005,
        IMAGE_SYM_TYPE_FLOAT = 0x0006,
        IMAGE_SYM_TYPE_DOUBLE = 0x0007,
        IMAGE_SYM_TYPE_STRUCT = 0x0008,
        IMAGE_SYM_TYPE_UNION = 0x0009,
        IMAGE_SYM_TYPE_ENUM = 0x000A,
        IMAGE_SYM_TYPE_MOE = 0x000B,
        IMAGE_SYM_TYPE_BYTE = 0x000C,
        IMAGE_SYM_TYPE_WORD = 0x000D,
        IMAGE_SYM_TYPE_UINT = 0x000E,
        IMAGE_SYM_TYPE_DWORD = 0x000F,
        IMAGE_SYM_TYPE_PCODE = unchecked((int)0x8000),
        IMAGE_SYM_DTYPE_NULL = 0,
        IMAGE_SYM_DTYPE_POINTER = 1,
        IMAGE_SYM_DTYPE_FUNCTION = 2,
        IMAGE_SYM_DTYPE_ARRAY = 3,
        IMAGE_SYM_CLASS_NULL = 0x0000,
        IMAGE_SYM_CLASS_AUTOMATIC = 0x0001,
        IMAGE_SYM_CLASS_STATIC = 0x0003,
        IMAGE_SYM_CLASS_REGISTER = 0x0004,
        IMAGE_SYM_CLASS_LABEL = 0x0006,
        IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x0007,
        IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x0008,
        IMAGE_SYM_CLASS_ARGUMENT = 0x0009,
        IMAGE_SYM_CLASS_STRUCT_TAG = 0x000A,
        IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0x000B,
        IMAGE_SYM_CLASS_UNION_TAG = 0x000C,
        IMAGE_SYM_CLASS_TYPE_DEFINITION = 0x000D,
        IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0x000E,
        IMAGE_SYM_CLASS_ENUM_TAG = 0x000F,
        IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x0010,
        IMAGE_SYM_CLASS_REGISTER_PARAM = 0x0011,
        IMAGE_SYM_CLASS_BIT_FIELD = 0x0012,
        IMAGE_SYM_CLASS_BLOCK = 0x0064,
        IMAGE_SYM_CLASS_FUNCTION = 0x0065,
        IMAGE_SYM_CLASS_END_OF_STRUCT = 0x0066,
        IMAGE_SYM_CLASS_FILE = 0x0067,
        IMAGE_SYM_CLASS_SECTION = 0x0068,
        IMAGE_SIZEOF_AUX_SYMBOL = 18,
        IMAGE_COMDAT_SELECT_NODUPLICATES = 1,
        IMAGE_COMDAT_SELECT_ANY = 2,
        IMAGE_COMDAT_SELECT_SAME_SIZE = 3,
        IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,
        IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,
        IMAGE_COMDAT_SELECT_LARGEST = 6,
        IMAGE_COMDAT_SELECT_NEWEST = 7,
        IMAGE_SIZEOF_RELOCATION = 10,
        IMAGE_REL_I386_ABSOLUTE = 0x0000,
        IMAGE_REL_I386_DIR16 = 0x0001,
        IMAGE_REL_I386_REL16 = 0x0002,
        IMAGE_REL_I386_DIR32 = 0x0006,
        IMAGE_REL_I386_DIR32NB = 0x0007,
        IMAGE_REL_I386_SEG12 = 0x0009,
        IMAGE_REL_I386_SECTION = 0x000A,
        IMAGE_REL_I386_SECREL = 0x000B,
        IMAGE_REL_I386_REL32 = 0x0014,
        IMAGE_REL_MIPS_ABSOLUTE = 0x0000,
        IMAGE_REL_MIPS_REFHALF = 0x0001,
        IMAGE_REL_MIPS_REFWORD = 0x0002,
        IMAGE_REL_MIPS_JMPADDR = 0x0003,
        IMAGE_REL_MIPS_REFHI = 0x0004,
        IMAGE_REL_MIPS_REFLO = 0x0005,
        IMAGE_REL_MIPS_GPREL = 0x0006,
        IMAGE_REL_MIPS_LITERAL = 0x0007,
        IMAGE_REL_MIPS_SECTION = 0x000A,
        IMAGE_REL_MIPS_SECREL = 0x000B,
        IMAGE_REL_MIPS_SECRELLO = 0x000C,
        IMAGE_REL_MIPS_SECRELHI = 0x000D,
        IMAGE_REL_MIPS_REFWORDNB = 0x0022,
        IMAGE_REL_MIPS_PAIR = 0x0025,
        IMAGE_REL_ALPHA_ABSOLUTE = 0x0000,
        IMAGE_REL_ALPHA_REFLONG = 0x0001,
        IMAGE_REL_ALPHA_REFQUAD = 0x0002,
        IMAGE_REL_ALPHA_GPREL32 = 0x0003,
        IMAGE_REL_ALPHA_LITERAL = 0x0004,
        IMAGE_REL_ALPHA_LITUSE = 0x0005,
        IMAGE_REL_ALPHA_GPDISP = 0x0006,
        IMAGE_REL_ALPHA_BRADDR = 0x0007,
        IMAGE_REL_ALPHA_HINT = 0x0008,
        IMAGE_REL_ALPHA_INLINE_REFLONG = 0x0009,
        IMAGE_REL_ALPHA_REFHI = 0x000A,
        IMAGE_REL_ALPHA_REFLO = 0x000B,
        IMAGE_REL_ALPHA_PAIR = 0x000C,
        IMAGE_REL_ALPHA_MATCH = 0x000D,
        IMAGE_REL_ALPHA_SECTION = 0x000E,
        IMAGE_REL_ALPHA_SECREL = 0x000F,
        IMAGE_REL_ALPHA_REFLONGNB = 0x0010,
        IMAGE_REL_ALPHA_SECRELLO = 0x0011,
        IMAGE_REL_ALPHA_SECRELHI = 0x0012,
        IMAGE_REL_PPC_ABSOLUTE = 0x0000,
        IMAGE_REL_PPC_ADDR64 = 0x0001,
        IMAGE_REL_PPC_ADDR32 = 0x0002,
        IMAGE_REL_PPC_ADDR24 = 0x0003,
        IMAGE_REL_PPC_ADDR16 = 0x0004,
        IMAGE_REL_PPC_ADDR14 = 0x0005,
        IMAGE_REL_PPC_REL24 = 0x0006,
        IMAGE_REL_PPC_REL14 = 0x0007,
        IMAGE_REL_PPC_TOCREL16 = 0x0008,
        IMAGE_REL_PPC_TOCREL14 = 0x0009,
        IMAGE_REL_PPC_ADDR32NB = 0x000A,
        IMAGE_REL_PPC_SECREL = 0x000B,
        IMAGE_REL_PPC_SECTION = 0x000C,
        IMAGE_REL_PPC_IFGLUE = 0x000D,
        IMAGE_REL_PPC_IMGLUE = 0x000E,
        IMAGE_REL_PPC_SECREL16 = 0x000F,
        IMAGE_REL_PPC_REFHI = 0x0010,
        IMAGE_REL_PPC_REFLO = 0x0011,
        IMAGE_REL_PPC_PAIR = 0x0012,
        IMAGE_REL_PPC_SECRELLO = 0x0013,
        IMAGE_REL_PPC_SECRELHI = 0x0014,
        IMAGE_REL_PPC_TYPEMASK = 0x00FF,
        IMAGE_REL_PPC_NEG = 0x0100,
        IMAGE_REL_PPC_BRTAKEN = 0x0200,
        IMAGE_REL_PPC_BRNTAKEN = 0x0400,
        IMAGE_REL_PPC_TOCDEFN = 0x0800,
        IMAGE_SIZEOF_LINENUMBER = 6,
        IMAGE_SIZEOF_BASE_RELOCATION = 8,
        IMAGE_REL_BASED_ABSOLUTE = 0,
        IMAGE_REL_BASED_HIGH = 1,
        IMAGE_REL_BASED_LOW = 2,
        IMAGE_REL_BASED_HIGHLOW = 3,
        IMAGE_REL_BASED_HIGHADJ = 4,
        IMAGE_REL_BASED_MIPS_JMPADDR = 5,
        IMAGE_REL_BASED_SECTION = 6,
        IMAGE_REL_BASED_REL32 = 7,
        IMAGE_ARCHIVE_START_SIZE = 8,
        IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60,
        IMAGE_ORDINAL_FLAG = unchecked((int)0x80000000),
        IMAGE_RESOURCE_NAME_IS_STRING = unchecked((int)0x80000000),
        IMAGE_RESOURCE_DATA_IS_DIRECTORY = unchecked((int)0x80000000),
        IMAGE_DEBUG_TYPE_UNKNOWN = 0,
        IMAGE_DEBUG_TYPE_COFF = 1,
        IMAGE_DEBUG_TYPE_CODEVIEW = 2,
        IMAGE_DEBUG_TYPE_FPO = 3,
        IMAGE_DEBUG_TYPE_MISC = 4,
        IMAGE_DEBUG_TYPE_EXCEPTION = 5,
        IMAGE_DEBUG_TYPE_FIXUP = 6,
        IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7,
        IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,
        IMAGE_DEBUG_MISC_EXENAME = 1,
        IMAGE_SEPARATE_DEBUG_SIGNATURE = 0x4944,
        IMAGE_SEPARATE_DEBUG_FLAGS_MASK = unchecked((int)0x8000),
        IMAGE_SEPARATE_DEBUG_MISMATCH = unchecked((int)0x8000),
        IS_TEXT_UNICODE_ASCII16 = 0x0001,
        IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x0010,
        IS_TEXT_UNICODE_STATISTICS = 0x0002,
        IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x0020,
        IS_TEXT_UNICODE_CONTROLS = 0x0004,
        IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x0040,
        IS_TEXT_UNICODE_SIGNATURE = 0x0008,
        IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x0080,
        IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x0100,
        IS_TEXT_UNICODE_ODD_LENGTH = 0x0200,
        IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x0400,
        IS_TEXT_UNICODE_NULL_BYTES = 0x1000,
        IS_TEXT_UNICODE_UNICODE_MASK = 0x000F,
        IS_TEXT_UNICODE_REVERSE_MASK = 0x00F0,
        IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0x0F00,
        IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000,
        ICON_SMALL = 0,
        ICON_BIG = 1,
        IDANI_OPEN = 1,
        IDANI_CLOSE = 2,
        IDANI_CAPTION = 3,
        IDHOT_SNAPWINDOW = (-1),
        IDHOT_SNAPDESKTOP = (-2),
        IDC_ARROW = 32512,
        IDC_IBEAM = 32513,
        IDC_WAIT = 32514,
        IDC_CROSS = 32515,
        IDC_UPARROW = 32516,
        IDC_SIZE = 32640,
        IDC_ICON = 32641,
        IDC_SIZENWSE = 32642,
        IDC_SIZENESW = 32643,
        IDC_SIZEWE = 32644,
        IDC_SIZENS = 32645,
        IDC_SIZEALL = 32646,
        IDC_NO = 32648,
        IDC_APPSTARTING = 32650,
        IDC_HELP = 32651,
        IMAGE_BITMAP = 0,
        IMAGE_ICON = 1,
        IMAGE_CURSOR = 2,
        IMAGE_ENHMETAFILE = 3,
        IDI_APPLICATION = 32512,
        IDI_HAND = 32513,
        IDI_QUESTION = 32514,
        IDI_EXCLAMATION = 32515,
        IDI_ASTERISK = 32516,
        IDI_WINLOGO = 32517,
        IDI_WARNING = 32515,
        IDI_ERROR = 32513,
        IDI_INFORMATION = 32516,
        IDOK = 1,
        IDCANCEL = 2,
        IDABORT = 3,
        IDRETRY = 4,
        IDIGNORE = 5,
        IDYES = 6,
        IDNO = 7,
        IDCLOSE = 8,
        IDHELP = 9,
        IDH_NO_HELP = 28440,
        IDH_MISSING_CONTEXT = 28441,
        IDH_GENERIC_HELP_BUTTON = 28442,
        IDH_OK = 28443,
        IDH_CANCEL = 28444,
        IDH_HELP = 28445,
        ICC_LISTVIEW_CLASSES = 0x00000001,
        ICC_TREEVIEW_CLASSES = 0x00000002,
        ICC_BAR_CLASSES = 0x00000004,
        ICC_TAB_CLASSES = 0x00000008,
        ICC_UPDOWN_CLASS = 0x00000010,
        ICC_PROGRESS_CLASS = 0x00000020,
        ICC_HOTKEY_CLASS = 0x00000040,
        ICC_ANIMATE_CLASS = 0x00000080,
        ICC_WIN95_CLASSES = 0x000000FF,
        ICC_DATE_CLASSES = 0x00000100,
        ICC_USEREX_CLASSES = 0x00000200,
        ICC_COOL_CLASSES = 0x00000400,
        ILC_MASK = 0x0001,
        ILC_COLOR = 0x0000,
        ILC_COLORDDB = 0x00FE,
        ILC_COLOR4 = 0x0004,
        ILC_COLOR8 = 0x0008,
        ILC_COLOR16 = 0x0010,
        ILC_COLOR24 = 0x0018,
        ILC_COLOR32 = 0x0020,
        ILC_PALETTE = 0x0800,
        ILD_NORMAL = 0x0000,
        ILD_TRANSPARENT = 0x0001,
        ILD_MASK = 0x0010,
        ILD_IMAGE = 0x0020,
        ILD_ROP = 0x0040,
        ILD_BLEND25 = 0x0002,
        ILD_BLEND50 = 0x0004,
        ILD_OVERLAYMASK = 0x0F00,
        ILD_SELECTED = 0x0004,
        ILD_FOCUS = 0x0002,
        ILD_BLEND = 0x0004,
        ILCF_MOVE = (0x00000000),
        ILCF_SWAP = (0x00000001),
        IDB_STD_SMALL_COLOR = 0,
        IDB_STD_LARGE_COLOR = 1,
        IDB_VIEW_SMALL_COLOR = 4,
        IDB_VIEW_LARGE_COLOR = 5,
        IDB_HIST_SMALL_COLOR = 8,
        IDB_HIST_LARGE_COLOR = 9,
        I_INDENTCALLBACK = (-1),
        I_IMAGECALLBACK = (-1),
        I_CHILDRENCALLBACK = (-1),
        IO_COMPLETION_ALL_ACCESS = ((0x000F0000)|(0x00100000)|0x3),
        INVALID_HANDLE_VALUE = (-1),
        IPN_FIRST = (0-860),
        IPN_LAST = (0-879);


        public const int JOYERR_BASE = 160,
        JOYERR_NOERROR = (0),
        JOYERR_PARMS = (160+5),
        JOYERR_NOCANDO = (160+6),
        JOYERR_UNPLUGGED = (160+7),
        JOY_BUTTON1 = 0x0001,
        JOY_BUTTON2 = 0x0002,
        JOY_BUTTON3 = 0x0004,
        JOY_BUTTON4 = 0x0008,
        JOY_BUTTON1CHG = 0x0100,
        JOY_BUTTON2CHG = 0x0200,
        JOY_BUTTON3CHG = 0x0400,
        JOY_BUTTON4CHG = 0x0800,
        JOY_BUTTON5 = 0x00000010,
        JOY_BUTTON6 = 0x00000020,
        JOY_BUTTON7 = 0x00000040,
        JOY_BUTTON8 = 0x00000080,
        JOY_BUTTON9 = 0x00000100,
        JOY_BUTTON10 = 0x00000200,
        JOY_BUTTON11 = 0x00000400,
        JOY_BUTTON12 = 0x00000800,
        JOY_BUTTON13 = 0x00001000,
        JOY_BUTTON14 = 0x00002000,
        JOY_BUTTON15 = 0x00004000,
        JOY_BUTTON16 = 0x00008000,
        JOY_BUTTON17 = 0x00010000,
        JOY_BUTTON18 = 0x00020000,
        JOY_BUTTON19 = 0x00040000,
        JOY_BUTTON20 = 0x00080000,
        JOY_BUTTON21 = 0x00100000,
        JOY_BUTTON22 = 0x00200000,
        JOY_BUTTON23 = 0x00400000,
        JOY_BUTTON24 = 0x00800000,
        JOY_BUTTON25 = 0x01000000,
        JOY_BUTTON26 = 0x02000000,
        JOY_BUTTON27 = 0x04000000,
        JOY_BUTTON28 = 0x08000000,
        JOY_BUTTON29 = 0x10000000,
        JOY_BUTTON30 = 0x20000000,
        JOY_BUTTON31 = 0x40000000,
        JOY_BUTTON32 = unchecked((int)0x80000000),
        JOY_POVFORWARD = 0,
        JOY_POVRIGHT = 9000,
        JOY_POVBACKWARD = 18000,
        JOY_POVLEFT = 27000,
        JOY_RETURNX = 0x00000001,
        JOY_RETURNY = 0x00000002,
        JOY_RETURNZ = 0x00000004,
        JOY_RETURNR = 0x00000008,
        JOY_RETURNU = 0x00000010,
        JOY_RETURNV = 0x00000020,
        JOY_RETURNPOV = 0x00000040,
        JOY_RETURNBUTTONS = 0x00000080,
        JOY_RETURNRAWDATA = 0x00000100,
        JOY_RETURNPOVCTS = 0x00000200,
        JOY_RETURNCENTERED = 0x00000400,
        JOY_USEDEADZONE = 0x00000800,
        JOY_CAL_READALWAYS = 0x00010000,
        JOY_CAL_READXYONLY = 0x00020000,
        JOY_CAL_READ3 = 0x00040000,
        JOY_CAL_READ4 = 0x00080000,
        JOY_CAL_READXONLY = 0x00100000,
        JOY_CAL_READYONLY = 0x00200000,
        JOY_CAL_READ5 = 0x00400000,
        JOY_CAL_READ6 = 0x00800000,
        JOY_CAL_READZONLY = 0x01000000,
        JOY_CAL_READRONLY = 0x02000000,
        JOY_CAL_READUONLY = 0x04000000,
        JOY_CAL_READVONLY = 0x08000000,
        JOYSTICKID1 = 0,
        JOYSTICKID2 = 1,
        JOYCAPS_HASZ = 0x0001,
        JOYCAPS_HASR = 0x0002,
        JOYCAPS_HASU = 0x0004,
        JOYCAPS_HASV = 0x0008,
        JOYCAPS_HASPOV = 0x0010,
        JOYCAPS_POV4DIR = 0x0020,
        JOYCAPS_POVCTS = 0x0040,
        JOHAB_CHARSET = 130,
        JOB_CONTROL_PAUSE = 1,
        JOB_CONTROL_RESUME = 2,
        JOB_CONTROL_CANCEL = 3,
        JOB_CONTROL_RESTART = 4,
        JOB_CONTROL_DELETE = 5,
        JOB_CONTROL_SENT_TO_PRINTER = 6,
        JOB_CONTROL_LAST_PAGE_EJECTED = 7,
        JOB_STATUS_PAUSED = 0x00000001,
        JOB_STATUS_ERROR = 0x00000002,
        JOB_STATUS_DELETING = 0x00000004,
        JOB_STATUS_SPOOLING = 0x00000008,
        JOB_STATUS_PRINTING = 0x00000010,
        JOB_STATUS_OFFLINE = 0x00000020,
        JOB_STATUS_PAPEROUT = 0x00000040,
        JOB_STATUS_PRINTED = 0x00000080,
        JOB_STATUS_DELETED = 0x00000100,
        JOB_STATUS_BLOCKED_DEVQ = 0x00000200,
        JOB_STATUS_USER_INTERVENTION = 0x00000400,
        JOB_STATUS_RESTART = 0x00000800,
        JOB_POSITION_UNSPECIFIED = 0,
        JOB_NOTIFY_TYPE = 0x01,
        JOB_NOTIFY_FIELD_PRINTER_NAME = 0x00,
        JOB_NOTIFY_FIELD_MACHINE_NAME = 0x01,
        JOB_NOTIFY_FIELD_PORT_NAME = 0x02,
        JOB_NOTIFY_FIELD_USER_NAME = 0x03,
        JOB_NOTIFY_FIELD_NOTIFY_NAME = 0x04,
        JOB_NOTIFY_FIELD_DATATYPE = 0x05,
        JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 0x06,
        JOB_NOTIFY_FIELD_PARAMETERS = 0x07,
        JOB_NOTIFY_FIELD_DRIVER_NAME = 0x08,
        JOB_NOTIFY_FIELD_DEVMODE = 0x09,
        JOB_NOTIFY_FIELD_STATUS = 0x0A,
        JOB_NOTIFY_FIELD_STATUS_STRING = 0x0B,
        JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0x0C,
        JOB_NOTIFY_FIELD_DOCUMENT = 0x0D,
        JOB_NOTIFY_FIELD_PRIORITY = 0x0E,
        JOB_NOTIFY_FIELD_POSITION = 0x0F,
        JOB_NOTIFY_FIELD_SUBMITTED = 0x10,
        JOB_NOTIFY_FIELD_START_TIME = 0x11,
        JOB_NOTIFY_FIELD_UNTIL_TIME = 0x12,
        JOB_NOTIFY_FIELD_TIME = 0x13,
        JOB_NOTIFY_FIELD_TOTAL_PAGES = 0x14,
        JOB_NOTIFY_FIELD_PAGES_PRINTED = 0x15,
        JOB_NOTIFY_FIELD_TOTAL_BYTES = 0x16,
        JOB_NOTIFY_FIELD_BYTES_PRINTED = 0x17,
        JOB_ACCESS_ADMINISTER = 0x00000010;


        public const int KEY_EVENT = 0x0001,
        KP_IV = 1,
        KP_SALT = 2,
        KP_PADDING = 3,
        KP_MODE = 4,
        KP_MODE_BITS = 5,
        KP_PERMISSIONS = 6,
        KP_ALGID = 7,
        KP_BLOCKLEN = 8,
        KEY_QUERY_VALUE = (0x0001),
        KEY_SET_VALUE = (0x0002),
        KEY_CREATE_SUB_KEY = (0x0004),
        KEY_ENUMERATE_SUB_KEYS = (0x0008),
        KEY_NOTIFY = (0x0010),
        KEY_CREATE_LINK = (0x0020),
        KF_EXTENDED = 0x0100,
        KF_DLGMODE = 0x0800,
        KF_MENUMODE = 0x1000,
        KF_ALTDOWN = 0x2000,
        KF_REPEAT = 0x4000,
        KF_UP = unchecked((int)0x8000),
        KLF_ACTIVATE = 0x00000001,
        KLF_SUBSTITUTE_OK = 0x00000002,
        KLF_UNLOADPREVIOUS = 0x00000004,
        KLF_REORDER = 0x00000008,
        KLF_REPLACELANG = 0x00000010,
        KLF_NOTELLSHELL = 0x00000080,
        KL_NAMELENGTH = 9,
        KEYEVENTF_EXTENDEDKEY = 0x0001,
        KEYEVENTF_KEYUP = 0x0002;


        public const int lst1 = 0x0460,
        lst2 = 0x0461,
        lst3 = 0x0462,
        lst4 = 0x0463,
        lst5 = 0x0464,
        lst6 = 0x0465,
        lst7 = 0x0466,
        lst8 = 0x0467,
        lst9 = 0x0468,
        lst10 = 0x0469,
        lst11 = 0x046a,
        lst12 = 0x046b,
        lst13 = 0x046c,
        lst14 = 0x046d,
        lst15 = 0x046e,
        lst16 = 0x046f,
        LZERROR_BADINHANDLE = (-1),
        LZERROR_BADOUTHANDLE = (-2),
        LZERROR_READ = (-3),
        LZERROR_WRITE = (-4),
        LZERROR_GLOBALLOC = (-5),
        LZERROR_GLOBLOCK = (-6),
        LZERROR_BADVALUE = (-7),
        LZERROR_UNKNOWNALG = (-8),
        LISTEN_OUTSTANDING = 0x01,
        LMEM_FIXED = 0x0000,
        LMEM_MOVEABLE = 0x0002,
        LMEM_NOCOMPACT = 0x0010,
        LMEM_NODISCARD = 0x0020,
        LMEM_ZEROINIT = 0x0040,
        LMEM_MODIFY = 0x0080,
        LMEM_DISCARDABLE = 0x0F00,
        LMEM_VALID_FLAGS = 0x0F72,
        LMEM_INVALID_HANDLE = unchecked((int)0x8000),
        LHND = (0x0002|0x0040),
        LPTR = (0x0000|0x0040),
        LMEM_DISCARDED = 0x4000,
        LMEM_LOCKCOUNT = 0x00FF,
        LOAD_DLL_DEBUG_EVENT = 6,
        LPTx = unchecked((int)0x80),
        LOCKFILE_FAIL_IMMEDIATELY = 0x00000001,
        LOCKFILE_EXCLUSIVE_LOCK = 0x00000002,
        LOAD_LIBRARY_AS_DATAFILE = 0x00000002,
        LOAD_WITH_ALTERED_SEARCH_PATH = 0x00000008,
        LOGON32_LOGON_INTERACTIVE = 2,
        LOGON32_LOGON_NETWORK = 3,
        LOGON32_LOGON_BATCH = 4,
        LOGON32_LOGON_SERVICE = 5,
        LOGON32_PROVIDER_DEFAULT = 0,
        LOGON32_PROVIDER_WINNT35 = 1,
        LOGON32_PROVIDER_WINNT40 = 2,
        LEFT_ALT_PRESSED = 0x0002,
        LEFT_CTRL_PRESSED = 0x0008,
        LCS_CALIBRATED_RGB = 0x00000000,
        LCS_DEVICE_RGB = 0x00000001,
        LCS_DEVICE_CMYK = 0x00000002,
        LCS_GM_BUSINESS = 0x00000001,
        LCS_GM_GRAPHICS = 0x00000002,
        LCS_GM_IMAGES = 0x00000004,
        LF_FACESIZE = 32,
        LF_FULLFACESIZE = 64,
        LTGRAY_BRUSH = 1,
        LINECAPS = 30,
        LOGPIXELSX = 88,
        LOGPIXELSY = 90,
        LC_NONE = 0,
        LC_POLYLINE = 2,
        LC_MARKER = 4,
        LC_POLYMARKER = 8,
        LC_WIDE = 16,
        LC_STYLED = 32,
        LC_WIDESTYLED = 64,
        LC_INTERIORS = 128,
        LPD_DOUBLEBUFFER = 0x00000001,
        LPD_STEREO = 0x00000002,
        LPD_SUPPORT_GDI = 0x00000010,
        LPD_SUPPORT_OPENGL = 0x00000020,
        LPD_SHARE_DEPTH = 0x00000040,
        LPD_SHARE_STENCIL = 0x00000080,
        LPD_SHARE_ACCUM = 0x00000100,
        LPD_SWAP_EXCHANGE = 0x00000200,
        LPD_SWAP_COPY = 0x00000400,
        LPD_TRANSPARENT = 0x00001000,
        LPD_TYPE_RGBA = 0,
        LPD_TYPE_COLORINDEX = 1,
        LPSTR_TEXTCALLBACK = -1,
        LCMAP_LOWERCASE = 0x00000100,
        LCMAP_UPPERCASE = 0x00000200,
        LCMAP_SORTKEY = 0x00000400,
        LCMAP_BYTEREV = 0x00000800,
        LCMAP_HIRAGANA = 0x00100000,
        LCMAP_KATAKANA = 0x00200000,
        LCMAP_HALFWIDTH = 0x00400000,
        LCMAP_FULLWIDTH = 0x00800000,
        LCMAP_LINGUISTIC_CASING = 0x01000000,
        LCMAP_SIMPLIFIED_CHINESE = 0x02000000,
        LCMAP_TRADITIONAL_CHINESE = 0x04000000,
        LCID_INSTALLED = 0x00000001,
        LCID_SUPPORTED = 0x00000002,
        LOCALE_NOUSEROVERRIDE = unchecked((int)0x80000000),
        LOCALE_USE_CP_ACP = 0x40000000,
        LOCALE_ILANGUAGE = 0x00000001,
        LOCALE_SLANGUAGE = 0x00000002,
        LOCALE_SENGLANGUAGE = 0x00001001,
        LOCALE_SABBREVLANGNAME = 0x00000003,
        LOCALE_SNATIVELANGNAME = 0x00000004,
        LOCALE_ICOUNTRY = 0x00000005,
        LOCALE_SCOUNTRY = 0x00000006,
        LOCALE_SENGCOUNTRY = 0x00001002,
        LOCALE_SABBREVCTRYNAME = 0x00000007,
        LOCALE_SNATIVECTRYNAME = 0x00000008,
        LOCALE_IDEFAULTLANGUAGE = 0x00000009,
        LOCALE_IDEFAULTCOUNTRY = 0x0000000A,
        LOCALE_IDEFAULTCODEPAGE = 0x0000000B,
        LOCALE_IDEFAULTANSICODEPAGE = 0x00001004,
        LOCALE_IDEFAULTMACCODEPAGE = 0x00001011,
        LOCALE_SLIST = 0x0000000C,
        LOCALE_IMEASURE = 0x0000000D,
        LOCALE_SDECIMAL = 0x0000000E,
        LOCALE_STHOUSAND = 0x0000000F,
        LOCALE_SGROUPING = 0x00000010,
        LOCALE_IDIGITS = 0x00000011,
        LOCALE_ILZERO = 0x00000012,
        LOCALE_INEGNUMBER = 0x00001010,
        LOCALE_SNATIVEDIGITS = 0x00000013,
        LOCALE_SCURRENCY = 0x00000014,
        LOCALE_SINTLSYMBOL = 0x00000015,
        LOCALE_SMONDECIMALSEP = 0x00000016,
        LOCALE_SMONTHOUSANDSEP = 0x00000017,
        LOCALE_SMONGROUPING = 0x00000018,
        LOCALE_ICURRDIGITS = 0x00000019,
        LOCALE_IINTLCURRDIGITS = 0x0000001A,
        LOCALE_ICURRENCY = 0x0000001B,
        LOCALE_INEGCURR = 0x0000001C,
        LOCALE_SDATE = 0x0000001D,
        LOCALE_STIME = 0x0000001E,
        LOCALE_SSHORTDATE = 0x0000001F,
        LOCALE_SLONGDATE = 0x00000020,
        LOCALE_STIMEFORMAT = 0x00001003,
        LOCALE_IDATE = 0x00000021,
        LOCALE_ILDATE = 0x00000022,
        LOCALE_ITIME = 0x00000023,
        LOCALE_ITIMEMARKPOSN = 0x00001005,
        LOCALE_ICENTURY = 0x00000024,
        LOCALE_ITLZERO = 0x00000025,
        LOCALE_IDAYLZERO = 0x00000026,
        LOCALE_IMONLZERO = 0x00000027,
        LOCALE_S1159 = 0x00000028,
        LOCALE_S2359 = 0x00000029,
        LOCALE_ICALENDARTYPE = 0x00001009,
        LOCALE_IOPTIONALCALENDAR = 0x0000100B,
        LOCALE_IFIRSTDAYOFWEEK = 0x0000100C,
        LOCALE_IFIRSTWEEKOFYEAR = 0x0000100D,
        LOCALE_SDAYNAME1 = 0x0000002A,
        LOCALE_SDAYNAME2 = 0x0000002B,
        LOCALE_SDAYNAME3 = 0x0000002C,
        LOCALE_SDAYNAME4 = 0x0000002D,
        LOCALE_SDAYNAME5 = 0x0000002E,
        LOCALE_SDAYNAME6 = 0x0000002F,
        LOCALE_SDAYNAME7 = 0x00000030,
        LOCALE_SABBREVDAYNAME1 = 0x00000031,
        LOCALE_SABBREVDAYNAME2 = 0x00000032,
        LOCALE_SABBREVDAYNAME3 = 0x00000033,
        LOCALE_SABBREVDAYNAME4 = 0x00000034,
        LOCALE_SABBREVDAYNAME5 = 0x00000035,
        LOCALE_SABBREVDAYNAME6 = 0x00000036,
        LOCALE_SABBREVDAYNAME7 = 0x00000037,
        LOCALE_SMONTHNAME1 = 0x00000038,
        LOCALE_SMONTHNAME2 = 0x00000039,
        LOCALE_SMONTHNAME3 = 0x0000003A,
        LOCALE_SMONTHNAME4 = 0x0000003B,
        LOCALE_SMONTHNAME5 = 0x0000003C,
        LOCALE_SMONTHNAME6 = 0x0000003D,
        LOCALE_SMONTHNAME7 = 0x0000003E,
        LOCALE_SMONTHNAME8 = 0x0000003F,
        LOCALE_SMONTHNAME9 = 0x00000040,
        LOCALE_SMONTHNAME10 = 0x00000041,
        LOCALE_SMONTHNAME11 = 0x00000042,
        LOCALE_SMONTHNAME12 = 0x00000043,
        LOCALE_SMONTHNAME13 = 0x0000100E,
        LOCALE_SABBREVMONTHNAME1 = 0x00000044,
        LOCALE_SABBREVMONTHNAME2 = 0x00000045,
        LOCALE_SABBREVMONTHNAME3 = 0x00000046,
        LOCALE_SABBREVMONTHNAME4 = 0x00000047,
        LOCALE_SABBREVMONTHNAME5 = 0x00000048,
        LOCALE_SABBREVMONTHNAME6 = 0x00000049,
        LOCALE_SABBREVMONTHNAME7 = 0x0000004A,
        LOCALE_SABBREVMONTHNAME8 = 0x0000004B,
        LOCALE_SABBREVMONTHNAME9 = 0x0000004C,
        LOCALE_SABBREVMONTHNAME10 = 0x0000004D,
        LOCALE_SABBREVMONTHNAME11 = 0x0000004E,
        LOCALE_SABBREVMONTHNAME12 = 0x0000004F,
        LOCALE_SABBREVMONTHNAME13 = 0x0000100F,
        LOCALE_SPOSITIVESIGN = 0x00000050,
        LOCALE_SNEGATIVESIGN = 0x00000051,
        LOCALE_IPOSSIGNPOSN = 0x00000052,
        LOCALE_INEGSIGNPOSN = 0x00000053,
        LOCALE_IPOSSYMPRECEDES = 0x00000054,
        LOCALE_IPOSSEPBYSPACE = 0x00000055,
        LOCALE_INEGSYMPRECEDES = 0x00000056,
        LOCALE_INEGSEPBYSPACE = 0x00000057,
        LOCALE_FONTSIGNATURE = 0x00000058,
        LOCALE_SISO639LANGNAME = 0x00000059,
        LOCALE_SISO3166CTRYNAME = 0x0000005A,
        LANG_NEUTRAL = 0x00,
        LANG_AFRIKAANS = 0x36,
        LANG_ALBANIAN = 0x1c,
        LANG_ARABIC = 0x01,
        LANG_BASQUE = 0x2d,
        LANG_BELARUSIAN = 0x23,
        LANG_BULGARIAN = 0x02,
        LANG_CATALAN = 0x03,
        LANG_CHINESE = 0x04,
        LANG_CROATIAN = 0x1a,
        LANG_CZECH = 0x05,
        LANG_DANISH = 0x06,
        LANG_DUTCH = 0x13,
        LANG_ENGLISH = 0x09,
        LANG_ESTONIAN = 0x25,
        LANG_FAEROESE = 0x38,
        LANG_FARSI = 0x29,
        LANG_FINNISH = 0x0b,
        LANG_FRENCH = 0x0c,
        LANG_GERMAN = 0x07,
        LANG_GREEK = 0x08,
        LANG_HEBREW = 0x0d,
        LANG_HUNGARIAN = 0x0e,
        LANG_ICELANDIC = 0x0f,
        LANG_INDONESIAN = 0x21,
        LANG_ITALIAN = 0x10,
        LANG_JAPANESE = 0x11,
        LANG_KOREAN = 0x12,
        LANG_LATVIAN = 0x26,
        LANG_LITHUANIAN = 0x27,
        LANG_NORWEGIAN = 0x14,
        LANG_POLISH = 0x15,
        LANG_PORTUGUESE = 0x16,
        LANG_ROMANIAN = 0x18,
        LANG_RUSSIAN = 0x19,
        LANG_SERBIAN = 0x1a,
        LANG_SLOVAK = 0x1b,
        LANG_SLOVENIAN = 0x24,
        LANG_SPANISH = 0x0a,
        LANG_SWEDISH = 0x1d,
        LANG_THAI = 0x1e,
        LANG_TURKISH = 0x1f,
        LANG_UKRAINIAN = 0x22,
        LANG_VIETNAMESE = 0x2a,
        LR_DEFAULTCOLOR = 0x0000,
        LR_MONOCHROME = 0x0001,
        LR_COLOR = 0x0002,
        LR_COPYRETURNORG = 0x0004,
        LR_COPYDELETEORG = 0x0008,
        LR_LOADFROMFILE = 0x0010,
        LR_LOADTRANSPARENT = 0x0020,
        LR_DEFAULTSIZE = 0x0040,
        LR_VGACOLOR = 0x0080,
        LR_LOADMAP3DCOLORS = 0x1000,
        LR_CREATEDIBSECTION = 0x2000,
        LR_COPYFROMRESOURCE = 0x4000,
        LR_SHARED = unchecked((int)0x8000),
        LB_CTLCODE = 0,
        LB_OKAY = 0,
        LB_ERR = (-1),
        LB_ERRSPACE = (-2),
        LBN_ERRSPACE = (-2),
        LBN_SELCHANGE = 1,
        LBN_DBLCLK = 2,
        LBN_SELCANCEL = 3,
        LBN_SETFOCUS = 4,
        LBN_KILLFOCUS = 5,
        LB_ADDSTRING = 0x0180,
        LB_INSERTSTRING = 0x0181,
        LB_DELETESTRING = 0x0182,
        LB_SELITEMRANGEEX = 0x0183,
        LB_RESETCONTENT = 0x0184,
        LB_SETSEL = 0x0185,
        LB_SETCURSEL = 0x0186,
        LB_GETSEL = 0x0187,
        LB_GETCURSEL = 0x0188,
        LB_GETTEXT = 0x0189,
        LB_GETTEXTLEN = 0x018A,
        LB_GETCOUNT = 0x018B,
        LB_SELECTSTRING = 0x018C,
        LB_DIR = 0x018D,
        LB_GETTOPINDEX = 0x018E,
        LB_FINDSTRING = 0x018F,
        LB_GETSELCOUNT = 0x0190,
        LB_GETSELITEMS = 0x0191,
        LB_SETTABSTOPS = 0x0192,
        LB_GETHORIZONTALEXTENT = 0x0193,
        LB_SETHORIZONTALEXTENT = 0x0194,
        LB_SETCOLUMNWIDTH = 0x0195,
        LB_ADDFILE = 0x0196,
        LB_SETTOPINDEX = 0x0197,
        LB_GETITEMRECT = 0x0198,
        LB_GETITEMDATA = 0x0199,
        LB_SETITEMDATA = 0x019A,
        LB_SELITEMRANGE = 0x019B,
        LB_SETANCHORINDEX = 0x019C,
        LB_GETANCHORINDEX = 0x019D,
        LB_SETCARETINDEX = 0x019E,
        LB_GETCARETINDEX = 0x019F,
        LB_SETITEMHEIGHT = 0x01A0,
        LB_GETITEMHEIGHT = 0x01A1,
        LB_FINDSTRINGEXACT = 0x01A2,
        LB_SETLOCALE = 0x01A5,
        LB_GETLOCALE = 0x01A6,
        LB_SETCOUNT = 0x01A7,
        LB_INITSTORAGE = 0x01A8,
        LB_ITEMFROMPOINT = 0x01A9,
        LB_MSGMAX = 0x01B0;
        // LB_MSGMAX = 0x01A8;
        public const int LBS_NOTIFY = 0x0001,
        LBS_SORT = 0x0002,
        LBS_NOREDRAW = 0x0004,
        LBS_MULTIPLESEL = 0x0008,
        LBS_OWNERDRAWFIXED = 0x0010,
        LBS_OWNERDRAWVARIABLE = 0x0020,
        LBS_HASSTRINGS = 0x0040,
        LBS_USETABSTOPS = 0x0080,
        LBS_NOINTEGRALHEIGHT = 0x0100,
        LBS_MULTICOLUMN = 0x0200,
        LBS_WANTKEYBOARDINPUT = 0x0400,
        LBS_EXTENDEDSEL = 0x0800,
        LBS_DISABLENOSCROLL = 0x1000,
        LBS_NODATA = 0x2000,
        LBS_NOSEL = 0x4000,
        LBS_STANDARD = (0x0001|0x0002|0x00200000|0x00800000),
        LVM_FIRST = 0x1000,
        LVN_FIRST = (0-100),
        LVN_LAST = (0-199),
        LVS_ICON = 0x0000,
        LVS_REPORT = 0x0001,
        LVS_SMALLICON = 0x0002,
        LVS_LIST = 0x0003,
        LVS_TYPEMASK = 0x0003,
        LVS_SINGLESEL = 0x0004,
        LVS_SHOWSELALWAYS = 0x0008,
        LVS_SORTASCENDING = 0x0010,
        LVS_SORTDESCENDING = 0x0020,
        LVS_SHAREIMAGELISTS = 0x0040,
        LVS_NOLABELWRAP = 0x0080,
        LVS_AUTOARRANGE = 0x0100,
        LVS_EDITLABELS = 0x0200,
        LVS_OWNERDATA = 0x1000,
        LVS_NOSCROLL = 0x2000,
        LVS_TYPESTYLEMASK = 0xfc00,
        LVS_ALIGNTOP = 0x0000,
        LVS_ALIGNLEFT = 0x0800,
        LVS_ALIGNMASK = 0x0c00,
        LVS_OWNERDRAWFIXED = 0x0400,
        LVS_NOCOLUMNHEADER = 0x4000,
        LVS_NOSORTHEADER = unchecked((int)0x8000),
        LVM_GETBKCOLOR = (0x1000+0),
        LVM_SETBKCOLOR = (0x1000+1),
        LVM_GETIMAGELIST = (0x1000+2),
        LVSIL_NORMAL = 0,
        LVSIL_SMALL = 1,
        LVSIL_STATE = 2,
        LVM_SETIMAGELIST = (0x1000+3),
        LVM_GETITEMCOUNT = (0x1000+4),
        LVIF_TEXT = 0x0001,
        LVIF_IMAGE = 0x0002,
        LVIF_PARAM = 0x0004,
        LVIF_STATE = 0x0008,
        LVIF_INDENT = 0x0010,
        LVIF_NORECOMPUTE = 0x0800,
        LVIS_FOCUSED = 0x0001,
        LVIS_SELECTED = 0x0002,
        LVIS_CUT = 0x0004,
        LVIS_DROPHILITED = 0x0008,
        LVIS_OVERLAYMASK = 0x0F00,
        LVIS_STATEIMAGEMASK = 0xF000,
        LVM_GETITEMA = (0x1000+5),
        LVM_GETITEMW = (0x1000+75),
        LVM_SETITEMA = (0x1000+6),
        LVM_SETITEMW = (0x1000+76),
        LVM_INSERTITEMA = (0x1000+7),
        LVM_INSERTITEMW = (0x1000+77),
        LVM_DELETEITEM = (0x1000+8),
        LVM_DELETEALLITEMS = (0x1000+9),
        LVM_GETCALLBACKMASK = (0x1000+10),
        LVM_SETCALLBACKMASK = (0x1000+11),
        LVNI_ALL = 0x0000,
        LVNI_FOCUSED = 0x0001,
        LVNI_SELECTED = 0x0002,
        LVNI_CUT = 0x0004,
        LVNI_DROPHILITED = 0x0008,
        LVNI_ABOVE = 0x0100,
        LVNI_BELOW = 0x0200,
        LVNI_TOLEFT = 0x0400,
        LVNI_TORIGHT = 0x0800,
        LVM_GETNEXTITEM = (0x1000+12),
        LVFI_PARAM = 0x0001,
        LVFI_STRING = 0x0002,
        LVFI_PARTIAL = 0x0008,
        LVFI_WRAP = 0x0020,
        LVFI_NEARESTXY = 0x0040,
        LVM_FINDITEMA = (0x1000+13),
        LVM_FINDITEMW = (0x1000+83),
        LVIR_BOUNDS = 0,
        LVIR_ICON = 1,
        LVIR_LABEL = 2,
        LVIR_SELECTBOUNDS = 3,
        LVM_GETITEMRECT = (0x1000+14),
        LVM_SETITEMPOSITION = (0x1000+15),
        LVM_GETITEMPOSITION = (0x1000+16),
        LVM_GETSTRINGWIDTHA = (0x1000+17),
        LVM_GETSTRINGWIDTHW = (0x1000+87),
        LVHT_NOWHERE = 0x0001,
        LVHT_ONITEMICON = 0x0002,
        LVHT_ONITEMLABEL = 0x0004,
        LVHT_ONITEMSTATEICON = 0x0008,
        LVHT_ONITEM = (0x0002|0x0004|0x0008),
        LVHT_ABOVE = 0x0008,
        LVHT_BELOW = 0x0010,
        LVHT_TORIGHT = 0x0020,
        LVHT_TOLEFT = 0x0040,
        LVM_HITTEST = (0x1000+18),
        LVM_ENSUREVISIBLE = (0x1000+19),
        LVM_SCROLL = (0x1000+20),
        LVM_REDRAWITEMS = (0x1000+21),
        LVA_DEFAULT = 0x0000,
        LVA_ALIGNLEFT = 0x0001,
        LVA_ALIGNTOP = 0x0002,
        LVA_SNAPTOGRID = 0x0005,
        LVM_ARRANGE = (0x1000+22),
        LVM_EDITLABELA = (0x1000+23),
        LVM_EDITLABELW = (0x1000+118),
        LVM_GETEDITCONTROL = (0x1000+24),
        LVCF_FMT = 0x0001,
        LVCF_WIDTH = 0x0002,
        LVCF_TEXT = 0x0004,
        LVCF_SUBITEM = 0x0008,
        LVCF_IMAGE = 0x0010,
        LVCF_ORDER = 0x0020,
        LVCFMT_LEFT = 0x0000,
        LVCFMT_RIGHT = 0x0001,
        LVCFMT_CENTER = 0x0002,
        LVCFMT_JUSTIFYMASK = 0x0003,
        LVCFMT_IMAGE = 0x0800,
        LVCFMT_BITMAP_ON_RIGHT = 0x1000,
        LVCFMT_COL_HAS_IMAGES = unchecked((int)0x8000),
        LVM_GETCOLUMNA = (0x1000+25),
        LVM_GETCOLUMNW = (0x1000+95),
        LVM_SETCOLUMNA = (0x1000+26),
        LVM_SETCOLUMNW = (0x1000+96),
        LVM_INSERTCOLUMNA = (0x1000+27),
        LVM_INSERTCOLUMNW = (0x1000+97),
        LVM_DELETECOLUMN = (0x1000+28),
        LVM_GETCOLUMNWIDTH = (0x1000+29),
        LVSCW_AUTOSIZE = -1,
        LVSCW_AUTOSIZE_USEHEADER = -2,
        LVM_SETCOLUMNWIDTH = (0x1000+30),
        LVM_GETHEADER = (0x1000+31),
        LVM_CREATEDRAGIMAGE = (0x1000+33),
        LVM_GETVIEWRECT = (0x1000+34),
        LVM_GETTEXTCOLOR = (0x1000+35),
        LVM_SETTEXTCOLOR = (0x1000+36),
        LVM_GETTEXTBKCOLOR = (0x1000+37),
        LVM_SETTEXTBKCOLOR = (0x1000+38),
        LVM_GETTOPINDEX = (0x1000+39),
        LVM_GETCOUNTPERPAGE = (0x1000+40),
        LVM_GETORIGIN = (0x1000+41),
        LVM_UPDATE = (0x1000+42),
        LVM_SETITEMSTATE = (0x1000+43),
        LVM_GETITEMSTATE = (0x1000+44),
        LVM_GETITEMTEXTA = (0x1000+45),
        LVM_GETITEMTEXTW = (0x1000+115),
        LVM_SETITEMTEXTA = (0x1000+46),
        LVM_SETITEMTEXTW = (0x1000+116),
        LVSICF_NOINVALIDATEALL = 0x00000001,
        LVSICF_NOSCROLL = 0x00000002,
        LVM_SETITEMCOUNT = (0x1000+47),
        LVM_SORTITEMS = (0x1000+48),
        LVM_SETITEMPOSITION32 = (0x1000+49),
        LVM_GETSELECTEDCOUNT = (0x1000+50),
        LVM_GETITEMSPACING = (0x1000+51),
        LVM_GETISEARCHSTRINGA = (0x1000+52),
        LVM_GETISEARCHSTRINGW = (0x1000+117),
        LVM_SETICONSPACING = (0x1000+53),
        LVM_SETEXTENDEDLISTVIEWSTYLE = (0x1000+54),
        LVM_GETEXTENDEDLISTVIEWSTYLE = (0x1000+55),
        LVS_EX_GRIDLINES = 0x00000001,
        LVS_EX_SUBITEMIMAGES = 0x00000002,
        LVS_EX_CHECKBOXES = 0x00000004,
        LVS_EX_TRACKSELECT = 0x00000008,
        LVS_EX_HEADERDRAGDROP = 0x00000010,
        LVS_EX_FULLROWSELECT = 0x00000020,
        LVS_EX_ONECLICKACTIVATE = 0x00000040,
        LVS_EX_TWOCLICKACTIVATE = 0x00000080,
        LVS_EX_FLATSB = 0x00000100,
        LVS_EX_REGIONAL = 0x00000200,
        LVS_EX_INFOTIP = 0x00000400,
        LVS_EX_UNDERLINEHOT = 0x00000800,
        LVS_EX_UNDERLINECOLD = 0x00001000,
        LVS_EX_MULTIWORKAREAS = 0x00002000,
        LVM_GETSUBITEMRECT = (0x1000+56),
        LVM_SUBITEMHITTEST = (0x1000+57),
        LVM_SETCOLUMNORDERARRAY = (0x1000+58),
        LVM_GETCOLUMNORDERARRAY = (0x1000+59),
        LVM_SETHOTITEM = (0x1000+60),
        LVM_GETHOTITEM = (0x1000+61),
        LVM_SETHOTCURSOR = (0x1000+62),
        LVM_GETHOTCURSOR = (0x1000+63),
        LVM_APPROXIMATEVIEWRECT = (0x1000+64),
        LVM_SETWORKAREA = (0x1000+65),
        LVN_ITEMCHANGING = ((0-100)-0),
        LVN_ITEMCHANGED = ((0-100)-1),
        LVN_INSERTITEM = ((0-100)-2),
        LVN_DELETEITEM = ((0-100)-3),
        LVN_DELETEALLITEMS = ((0-100)-4),
        LVN_BEGINLABELEDITA = ((0-100)-5),
        LVN_BEGINLABELEDITW = ((0-100)-75),
        LVN_ENDLABELEDITA = ((0-100)-6),
        LVN_ENDLABELEDITW = ((0-100)-76),
        LVN_COLUMNCLICK = ((0-100)-8),
        LVN_BEGINDRAG = ((0-100)-9),
        LVN_BEGINRDRAG = ((0-100)-11),
        LVN_ODCACHEHINT = ((0-100)-13),
        LVN_ODFINDITEMA = ((0-100)-52),
        LVN_ODFINDITEMW = ((0-100)-79),
        LVN_ITEMACTIVATE = ((0-100)-14),
        LVN_ODSTATECHANGED = ((0-100)-15),
        LVN_GETDISPINFOA = ((0-100)-50),
        LVN_GETDISPINFOW = ((0-100)-77),
        LVN_SETDISPINFOA = ((0-100)-51),
        LVN_SETDISPINFOW = ((0-100)-78),
        LVIF_DI_SETITEM = 0x1000,
        LVN_KEYDOWN = ((0-100)-55),
        /* nt5 begin */
        LWA_COLORKEY            = 0x00000001,
        LWA_ALPHA               = 0x00000002,
        /* nt5 end */

        LVN_MARQUEEBEGIN = ((0-100)-56);


        public const int MSGF_DDEMGR = unchecked((int)0x8001),
        MH_CREATE = 1,
        MH_KEEP = 2,
        MH_DELETE = 3,
        MH_CLEANUP = 4,
        MAX_MONITORS = 4,
        MF_HSZ_INFO = 0x01000000,
        MF_SENDMSGS = 0x02000000,
        MF_POSTMSGS = 0x04000000,
        MF_CALLBACKS = 0x08000000,
        MF_ERRORS = 0x10000000,
        MF_LINKS = 0x20000000,
        MF_CONV = 0x40000000,
        MF_MASK = unchecked((int)0xFF000000),
        MULTIFILEOPENORD = 1537,
        MOD_ALT = 0x0001,
        MOD_CONTROL = 0x0002,
        MOD_SHIFT = 0x0004,
        MOD_LEFT = unchecked((int)0x8000),
        MOD_RIGHT = 0x4000,
        MOD_ON_KEYUP = 0x0800,
        MOD_IGNORE_ALL_MODIFIER = 0x0400,
        MDMVOLFLAG_LOW = 0x00000001,
        MDMVOLFLAG_MEDIUM = 0x00000002,
        MDMVOLFLAG_HIGH = 0x00000004,
        MDMVOL_LOW = 0x00000000,
        MDMVOL_MEDIUM = 0x00000001,
        MDMVOL_HIGH = 0x00000002,
        MDMSPKRFLAG_OFF = 0x00000001,
        MDMSPKRFLAG_DIAL = 0x00000002,
        MDMSPKRFLAG_ON = 0x00000004,
        MDMSPKRFLAG_CALLSETUP = 0x00000008,
        MDMSPKR_OFF = 0x00000000,
        MDMSPKR_DIAL = 0x00000001,
        MDMSPKR_ON = 0x00000002,
        MDMSPKR_CALLSETUP = 0x00000003,
        MDM_COMPRESSION = 0x00000001,
        MDM_ERROR_CONTROL = 0x00000002,
        MDM_FORCED_EC = 0x00000004,
        MDM_CELLULAR = 0x00000008,
        MDM_FLOWCONTROL_HARD = 0x00000010,
        MDM_FLOWCONTROL_SOFT = 0x00000020,
        MDM_CCITT_OVERRIDE = 0x00000040,
        MDM_SPEED_ADJUST = 0x00000080,
        MDM_TONE_DIAL = 0x00000100,
        MDM_BLIND_DIAL = 0x00000200,
        MDM_V23_OVERRIDE = 0x00000400,
        MAXPNAMELEN = 32,
        MAXERRORLENGTH = 256,
        MAX_JOYSTICKOEMVXDNAME = 260,
        MM_MICROSOFT = 1,
        MM_MIDI_MAPPER = 1,
        MM_WAVE_MAPPER = 2,
        MM_SNDBLST_MIDIOUT = 3,
        MM_SNDBLST_MIDIIN = 4,
        MM_SNDBLST_SYNTH = 5,
        MM_SNDBLST_WAVEOUT = 6,
        MM_SNDBLST_WAVEIN = 7,
        MM_ADLIB = 9,
        MM_MPU401_MIDIOUT = 10,
        MM_MPU401_MIDIIN = 11,
        MM_PC_JOYSTICK = 12,
        MM_JOY1MOVE = 0x3A0,
        MM_JOY2MOVE = 0x3A1,
        MM_JOY1ZMOVE = 0x3A2,
        MM_JOY2ZMOVE = 0x3A3,
        MM_JOY1BUTTONDOWN = 0x3B5,
        MM_JOY2BUTTONDOWN = 0x3B6,
        MM_JOY1BUTTONUP = 0x3B7,
        MM_JOY2BUTTONUP = 0x3B8,
        MM_MCINOTIFY = 0x3B9,
        MM_WOM_OPEN = 0x3BB,
        MM_WOM_CLOSE = 0x3BC,
        MM_WOM_DONE = 0x3BD,
        MM_WIM_OPEN = 0x3BE,
        MM_WIM_CLOSE = 0x3BF,
        MM_WIM_DATA = 0x3C0,
        MM_MIM_OPEN = 0x3C1,
        MM_MIM_CLOSE = 0x3C2,
        MM_MIM_DATA = 0x3C3,
        MM_MIM_LONGDATA = 0x3C4,
        MM_MIM_ERROR = 0x3C5,
        MM_MIM_LONGERROR = 0x3C6,
        MM_MOM_OPEN = 0x3C7,
        MM_MOM_CLOSE = 0x3C8,
        MM_MOM_DONE = 0x3C9,
        MM_DRVM_OPEN = 0x3D0,
        MM_DRVM_CLOSE = 0x3D1,
        MM_DRVM_DATA = 0x3D2,
        MM_DRVM_ERROR = 0x3D3,
        MM_STREAM_OPEN = 0x3D4,
        MM_STREAM_CLOSE = 0x3D5,
        MM_STREAM_DONE = 0x3D6,
        MM_STREAM_ERROR = 0x3D7,
        MM_MOM_POSITIONCB = 0x3CA,
        MM_MCISIGNAL = 0x3CB,
        MM_MIM_MOREDATA = 0x3CC,
        MM_MIXM_LINE_CHANGE = 0x3D0,
        MM_MIXM_CONTROL_CHANGE = 0x3D1,
        MMSYSERR_BASE = 0,
        MIDIERR_BASE = 64,
        MCIERR_BASE = 256,
        MIXERR_BASE = 1024,
        MCI_STRING_OFFSET = 512,
        MCI_VD_OFFSET = 1024,
        MCI_CD_OFFSET = 1088,
        MCI_WAVE_OFFSET = 1152,
        MCI_SEQ_OFFSET = 1216,
        MMSYSERR_NOERROR = 0,
        MMSYSERR_ERROR = (0+1),
        MMSYSERR_BADDEVICEID = (0+2),
        MMSYSERR_NOTENABLED = (0+3),
        MMSYSERR_ALLOCATED = (0+4),
        MMSYSERR_INVALHANDLE = (0+5),
        MMSYSERR_NODRIVER = (0+6),
        MMSYSERR_NOMEM = (0+7),
        MMSYSERR_NOTSUPPORTED = (0+8),
        MMSYSERR_BADERRNUM = (0+9),
        MMSYSERR_INVALFLAG = (0+10),
        MMSYSERR_INVALPARAM = (0+11),
        MMSYSERR_HANDLEBUSY = (0+12),
        MMSYSERR_INVALIDALIAS = (0+13),
        MMSYSERR_BADDB = (0+14),
        MMSYSERR_KEYNOTFOUND = (0+15),
        MMSYSERR_READERROR = (0+16),
        MMSYSERR_WRITEERROR = (0+17),
        MMSYSERR_DELETEERROR = (0+18),
        MMSYSERR_VALNOTFOUND = (0+19),
        MMSYSERR_NODRIVERCB = (0+20),
        MMSYSERR_LASTERROR = (0+20),
        MIDIERR_UNPREPARED = (64+0),
        MIDIERR_STILLPLAYING = (64+1),
        MIDIERR_NOMAP = (64+2),
        MIDIERR_NOTREADY = (64+3),
        MIDIERR_NODEVICE = (64+4),
        MIDIERR_INVALIDSETUP = (64+5),
        MIDIERR_BADOPENMODE = (64+6),
        MIDIERR_DONT_CONTINUE = (64+7),
        MIDIERR_LASTERROR = (64+7),
        MIDIPATCHSIZE = 128,
        MIM_OPEN = 0x3C1,
        MIM_CLOSE = 0x3C2,
        MIM_DATA = 0x3C3,
        MIM_LONGDATA = 0x3C4,
        MIM_ERROR = 0x3C5,
        MIM_LONGERROR = 0x3C6,
        MOM_OPEN = 0x3C7,
        MOM_CLOSE = 0x3C8,
        MOM_DONE = 0x3C9,
        MIM_MOREDATA = 0x3CC,
        MOM_POSITIONCB = 0x3CA,
        MIDI_IO_STATUS = 0x00000020,
        MIDI_CACHE_ALL = 1,
        MIDI_CACHE_BESTFIT = 2,
        MIDI_CACHE_QUERY = 3,
        MIDI_UNCACHE = 4,
        MOD_MIDIPORT = 1,
        MOD_SYNTH = 2,
        MOD_SQSYNTH = 3,
        MOD_FMSYNTH = 4,
        MOD_MAPPER = 5,
        MIDICAPS_VOLUME = 0x0001,
        MIDICAPS_LRVOLUME = 0x0002,
        MIDICAPS_CACHE = 0x0004,
        MIDICAPS_STREAM = 0x0008,
        MHDR_DONE = 0x00000001,
        MHDR_PREPARED = 0x00000002,
        MHDR_INQUEUE = 0x00000004,
        MHDR_ISSTRM = 0x00000008,
        MEVT_F_SHORT = 0x00000000,
        MEVT_F_LONG = unchecked((int)0x80000000),
        MEVT_F_CALLBACK = 0x40000000,
        MEVT_SHORTMSG = (0x00),
        MEVT_TEMPO = (0x01),
        MEVT_NOP = (0x02),
        MEVT_LONGMSG = (unchecked((int)0x80)),
        MEVT_COMMENT = (unchecked((int)0x82)),
        MEVT_VERSION = (unchecked((int)0x84)),
        MIDISTRM_ERROR = (-2),
        MIDIPROP_SET = unchecked((int)0x80000000),
        MIDIPROP_GET = 0x40000000,
        MIDIPROP_TIMEDIV = 0x00000001,
        MIDIPROP_TEMPO = 0x00000002,
        MIXER_SHORT_NAME_CHARS = 16,
        MIXER_LONG_NAME_CHARS = 64,
        MIXERR_INVALLINE = (1024+0),
        MIXERR_INVALCONTROL = (1024+1),
        MIXERR_INVALVALUE = (1024+2),
        MIXERR_LASTERROR = (1024+2),
        MIXER_OBJECTF_HANDLE = unchecked((int)0x80000000),
        MIXER_OBJECTF_MIXER = 0x00000000,
        MIXER_OBJECTF_HMIXER = (unchecked((int)0x80000000)|0x00000000),
        MIXER_OBJECTF_WAVEOUT = 0x10000000,
        MIXER_OBJECTF_HWAVEOUT = (unchecked((int)0x80000000)|0x10000000),
        MIXER_OBJECTF_WAVEIN = 0x20000000,
        MIXER_OBJECTF_HWAVEIN = (unchecked((int)0x80000000)|0x20000000),
        MIXER_OBJECTF_MIDIOUT = 0x30000000,
        MIXER_OBJECTF_HMIDIOUT = (unchecked((int)0x80000000)|0x30000000),
        MIXER_OBJECTF_MIDIIN = 0x40000000,
        MIXER_OBJECTF_HMIDIIN = (unchecked((int)0x80000000)|0x40000000),
        MIXER_OBJECTF_AUX = 0x50000000,
        MIXERLINE_LINEF_ACTIVE = 0x00000001,
        MIXERLINE_LINEF_DISCONNECTED = 0x00008000,
        MIXERLINE_LINEF_SOURCE = unchecked((int)0x80000000),
        MIXERLINE_COMPONENTTYPE_DST_FIRST = 0x00000000,
        MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = (0x00000000+0),
        MIXERLINE_COMPONENTTYPE_DST_DIGITAL = (0x00000000+1),
        MIXERLINE_COMPONENTTYPE_DST_LINE = (0x00000000+2),
        MIXERLINE_COMPONENTTYPE_DST_MONITOR = (0x00000000+3),
        MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = (0x00000000+4),
        MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = (0x00000000+5),
        MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = (0x00000000+6),
        MIXERLINE_COMPONENTTYPE_DST_WAVEIN = (0x00000000+7),
        MIXERLINE_COMPONENTTYPE_DST_VOICEIN = (0x00000000+8),
        MIXERLINE_COMPONENTTYPE_DST_LAST = (0x00000000+8),
        MIXERLINE_COMPONENTTYPE_SRC_FIRST = 0x00001000,
        MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = (0x00001000+0),
        MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = (0x00001000+1),
        MIXERLINE_COMPONENTTYPE_SRC_LINE = (0x00001000+2),
        MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = (0x00001000+3),
        MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = (0x00001000+4),
        MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = (0x00001000+5),
        MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = (0x00001000+6),
        MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = (0x00001000+7),
        MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = (0x00001000+8),
        MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = (0x00001000+9),
        MIXERLINE_COMPONENTTYPE_SRC_ANALOG = (0x00001000+10),
        MIXERLINE_COMPONENTTYPE_SRC_LAST = (0x00001000+10),
        MIXERLINE_TARGETTYPE_UNDEFINED = 0,
        MIXERLINE_TARGETTYPE_WAVEOUT = 1,
        MIXERLINE_TARGETTYPE_WAVEIN = 2,
        MIXERLINE_TARGETTYPE_MIDIOUT = 3,
        MIXERLINE_TARGETTYPE_MIDIIN = 4,
        MIXERLINE_TARGETTYPE_AUX = 5,
        MIXER_GETLINEINFOF_DESTINATION = 0x00000000,
        MIXER_GETLINEINFOF_SOURCE = 0x00000001,
        MIXER_GETLINEINFOF_LINEID = 0x00000002,
        MIXER_GETLINEINFOF_COMPONENTTYPE = 0x00000003,
        MIXER_GETLINEINFOF_TARGETTYPE = 0x00000004,
        MIXER_GETLINEINFOF_QUERYMASK = 0x0000000F,
        MIXERCONTROL_CONTROLF_UNIFORM = 0x00000001,
        MIXERCONTROL_CONTROLF_MULTIPLE = 0x00000002,
        MIXERCONTROL_CONTROLF_DISABLED = unchecked((int)0x80000000),
        MIXERCONTROL_CT_CLASS_MASK = unchecked((int)0xF0000000),
        MIXERCONTROL_CT_CLASS_CUSTOM = 0x00000000,
        MIXERCONTROL_CT_CLASS_METER = 0x10000000,
        MIXERCONTROL_CT_CLASS_SWITCH = 0x20000000,
        MIXERCONTROL_CT_CLASS_NUMBER = 0x30000000,
        MIXERCONTROL_CT_CLASS_SLIDER = 0x40000000,
        MIXERCONTROL_CT_CLASS_FADER = 0x50000000,
        MIXERCONTROL_CT_CLASS_TIME = 0x60000000,
        MIXERCONTROL_CT_CLASS_LIST = 0x70000000,
        MIXERCONTROL_CT_SUBCLASS_MASK = 0x0F000000,
        MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0x00000000,
        MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0x01000000,
        MIXERCONTROL_CT_SC_METER_POLLED = 0x00000000,
        MIXERCONTROL_CT_SC_TIME_MICROSECS = 0x00000000,
        MIXERCONTROL_CT_SC_TIME_MILLISECS = 0x01000000,
        MIXERCONTROL_CT_SC_LIST_SINGLE = 0x00000000,
        MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0x01000000,
        MIXERCONTROL_CT_UNITS_MASK = 0x00FF0000,
        MIXERCONTROL_CT_UNITS_CUSTOM = 0x00000000,
        MIXERCONTROL_CT_UNITS_BOOLEAN = 0x00010000,
        MIXERCONTROL_CT_UNITS_SIGNED = 0x00020000,
        MIXERCONTROL_CT_UNITS_UNSIGNED = 0x00030000,
        MIXERCONTROL_CT_UNITS_DECIBELS = 0x00040000,
        MIXERCONTROL_CT_UNITS_PERCENT = 0x00050000,
        MIXERCONTROL_CONTROLTYPE_CUSTOM = (0x00000000|0x00000000),
        MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = (0x10000000|0x00000000|0x00010000),
        MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = (0x10000000|0x00000000|0x00020000),
        MIXERCONTROL_CONTROLTYPE_PEAKMETER = ((0x10000000|0x00000000|0x00020000)+1),
        MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = (0x10000000|0x00000000|0x00030000),
        MIXERCONTROL_CONTROLTYPE_BOOLEAN = (0x20000000|0x00000000|0x00010000),
        MIXERCONTROL_CONTROLTYPE_ONOFF = ((0x20000000|0x00000000|0x00010000)+1),
        MIXERCONTROL_CONTROLTYPE_MUTE = ((0x20000000|0x00000000|0x00010000)+2),
        MIXERCONTROL_CONTROLTYPE_MONO = ((0x20000000|0x00000000|0x00010000)+3),
        MIXERCONTROL_CONTROLTYPE_LOUDNESS = ((0x20000000|0x00000000|0x00010000)+4),
        MIXERCONTROL_CONTROLTYPE_STEREOENH = ((0x20000000|0x00000000|0x00010000)+5),
        MIXERCONTROL_CONTROLTYPE_BUTTON = (0x20000000|0x01000000|0x00010000),
        MIXERCONTROL_CONTROLTYPE_DECIBELS = (0x30000000|0x00040000),
        MIXERCONTROL_CONTROLTYPE_SIGNED = (0x30000000|0x00020000),
        MIXERCONTROL_CONTROLTYPE_UNSIGNED = (0x30000000|0x00030000),
        MIXERCONTROL_CONTROLTYPE_PERCENT = (0x30000000|0x00050000),
        MIXERCONTROL_CONTROLTYPE_SLIDER = (0x40000000|0x00020000),
        MIXERCONTROL_CONTROLTYPE_PAN = ((0x40000000|0x00020000)+1),
        MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = ((0x40000000|0x00020000)+2),
        MIXERCONTROL_CONTROLTYPE_FADER = (0x50000000|0x00030000),
        MIXERCONTROL_CONTROLTYPE_VOLUME = ((0x50000000|0x00030000)+1),
        MIXERCONTROL_CONTROLTYPE_BASS = ((0x50000000|0x00030000)+2),
        MIXERCONTROL_CONTROLTYPE_TREBLE = ((0x50000000|0x00030000)+3),
        MIXERCONTROL_CONTROLTYPE_EQUALIZER = ((0x50000000|0x00030000)+4),
        MIXERCONTROL_CONTROLTYPE_SINGLESELECT = (0x70000000|0x00000000|0x00010000),
        MIXERCONTROL_CONTROLTYPE_MUX = ((0x70000000|0x00000000|0x00010000)+1),
        MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = (0x70000000|0x01000000|0x00010000),
        MIXERCONTROL_CONTROLTYPE_MIXER = ((0x70000000|0x01000000|0x00010000)+1),
        MIXERCONTROL_CONTROLTYPE_MICROTIME = (0x60000000|0x00000000|0x00030000),
        MIXERCONTROL_CONTROLTYPE_MILLITIME = (0x60000000|0x01000000|0x00030000),
        MIXER_GETLINECONTROLSF_ALL = 0x00000000,
        MIXER_GETLINECONTROLSF_ONEBYID = 0x00000001,
        MIXER_GETLINECONTROLSF_ONEBYTYPE = 0x00000002,
        MIXER_GETLINECONTROLSF_QUERYMASK = 0x0000000F,
        MIXER_GETCONTROLDETAILSF_VALUE = 0x00000000,
        MIXER_GETCONTROLDETAILSF_LISTTEXT = 0x00000001,
        MIXER_GETCONTROLDETAILSF_QUERYMASK = 0x0000000F,
        MIXER_SETCONTROLDETAILSF_VALUE = 0x00000000,
        MIXER_SETCONTROLDETAILSF_CUSTOM = 0x00000001,
        MIXER_SETCONTROLDETAILSF_QUERYMASK = 0x0000000F,
        MMIOERR_BASE = 256,
        MMIOERR_FILENOTFOUND = (256+1),
        MMIOERR_OUTOFMEMORY = (256+2),
        MMIOERR_CANNOTOPEN = (256+3),
        MMIOERR_CANNOTCLOSE = (256+4),
        MMIOERR_CANNOTREAD = (256+5),
        MMIOERR_CANNOTWRITE = (256+6),
        MMIOERR_CANNOTSEEK = (256+7),
        MMIOERR_CANNOTEXPAND = (256+8),
        MMIOERR_CHUNKNOTFOUND = (256+9),
        MMIOERR_UNBUFFERED = (256+10),
        MMIOERR_PATHNOTFOUND = (256+11),
        MMIOERR_ACCESSDENIED = (256+12),
        MMIOERR_SHARINGVIOLATION = (256+13),
        MMIOERR_NETWORKERROR = (256+14),
        MMIOERR_TOOMANYOPENFILES = (256+15),
        MMIOERR_INVALIDFILE = (256+16),
        MMIO_RWMODE = 0x00000003,
        MMIO_SHAREMODE = 0x00000070,
        MMIO_CREATE = 0x00001000,
        MMIO_PARSE = 0x00000100,
        MMIO_DELETE = 0x00000200,
        MMIO_EXIST = 0x00004000,
        MMIO_ALLOCBUF = 0x00010000,
        MMIO_GETTEMP = 0x00020000,
        MMIO_DIRTY = 0x10000000,
        MMIO_READ = 0x00000000,
        MMIO_WRITE = 0x00000001,
        MMIO_READWRITE = 0x00000002,
        MMIO_COMPAT = 0x00000000,
        MMIO_EXCLUSIVE = 0x00000010,
        MMIO_DENYWRITE = 0x00000020,
        MMIO_DENYREAD = 0x00000030,
        MMIO_DENYNONE = 0x00000040,
        MMIO_FHOPEN = 0x0010,
        MMIO_EMPTYBUF = 0x0010,
        MMIO_TOUPPER = 0x0010,
        MMIO_INSTALLPROC = 0x00010000,
        MMIO_GLOBALPROC = 0x10000000,
        MMIO_REMOVEPROC = 0x00020000,
        MMIO_UNICODEPROC = 0x01000000,
        MMIO_FINDPROC = 0x00040000,
        MMIO_FINDCHUNK = 0x0010,
        MMIO_FINDRIFF = 0x0020,
        MMIO_FINDLIST = 0x0040,
        MMIO_CREATERIFF = 0x0020,
        MMIO_CREATELIST = 0x0040,
        MMIOM_READ = 0x00000000,
        MMIOM_WRITE = 0x00000001,
        MMIOM_SEEK = 2,
        MMIOM_OPEN = 3,
        MMIOM_CLOSE = 4,
        MMIOM_WRITEFLUSH = 5,
        MMIOM_RENAME = 6,
        MMIOM_USER = unchecked((int)0x8000),
        MMIO_DEFAULTBUFFER = 8192,
        MCIERR_INVALID_DEVICE_ID = (256+1),
        MCIERR_UNRECOGNIZED_KEYWORD = (256+3),
        MCIERR_UNRECOGNIZED_COMMAND = (256+5),
        MCIERR_HARDWARE = (256+6),
        MCIERR_INVALID_DEVICE_NAME = (256+7),
        MCIERR_OUT_OF_MEMORY = (256+8),
        MCIERR_DEVICE_OPEN = (256+9),
        MCIERR_CANNOT_LOAD_DRIVER = (256+10),
        MCIERR_MISSING_COMMAND_STRING = (256+11),
        MCIERR_PARAM_OVERFLOW = (256+12),
        MCIERR_MISSING_STRING_ARGUMENT = (256+13),
        MCIERR_BAD_INTEGER = (256+14),
        MCIERR_PARSER_INTERNAL = (256+15),
        MCIERR_DRIVER_INTERNAL = (256+16),
        MCIERR_MISSING_PARAMETER = (256+17),
        MCIERR_UNSUPPORTED_FUNCTION = (256+18),
        MCIERR_FILE_NOT_FOUND = (256+19),
        MCIERR_DEVICE_NOT_READY = (256+20),
        MCIERR_INTERNAL = (256+21),
        MCIERR_DRIVER = (256+22),
        MCIERR_CANNOT_USE_ALL = (256+23),
        MCIERR_MULTIPLE = (256+24),
        MCIERR_EXTENSION_NOT_FOUND = (256+25),
        MCIERR_OUTOFRANGE = (256+26),
        MCIERR_FLAGS_NOT_COMPATIBLE = (256+28),
        MCIERR_FILE_NOT_SAVED = (256+30),
        MCIERR_DEVICE_TYPE_REQUIRED = (256+31),
        MCIERR_DEVICE_LOCKED = (256+32),
        MCIERR_DUPLICATE_ALIAS = (256+33),
        MCIERR_MUST_USE_SHAREABLE = (256+35),
        MCIERR_MISSING_DEVICE_NAME = (256+36),
        MCIERR_BAD_TIME_FORMAT = (256+37),
        MCIERR_NO_CLOSING_QUOTE = (256+38),
        MCIERR_DUPLICATE_FLAGS = (256+39),
        MCIERR_INVALID_FILE = (256+40),
        MCIERR_NULL_PARAMETER_BLOCK = (256+41),
        MCIERR_UNNAMED_RESOURCE = (256+42),
        MCIERR_NEW_REQUIRES_ALIAS = (256+43),
        MCIERR_NOTIFY_ON_AUTO_OPEN = (256+44),
        MCIERR_NO_ELEMENT_ALLOWED = (256+45),
        MCIERR_NONAPPLICABLE_FUNCTION = (256+46),
        MCIERR_ILLEGAL_FOR_AUTO_OPEN = (256+47),
        MCIERR_FILENAME_REQUIRED = (256+48),
        MCIERR_EXTRA_CHARACTERS = (256+49),
        MCIERR_DEVICE_NOT_INSTALLED = (256+50),
        MCIERR_GET_CD = (256+51),
        MCIERR_SET_CD = (256+52),
        MCIERR_SET_DRIVE = (256+53),
        MCIERR_DEVICE_LENGTH = (256+54),
        MCIERR_DEVICE_ORD_LENGTH = (256+55),
        MCIERR_NO_INTEGER = (256+56),
        MCIERR_WAVE_OUTPUTSINUSE = (256+64),
        MCIERR_WAVE_SETOUTPUTINUSE = (256+65),
        MCIERR_WAVE_INPUTSINUSE = (256+66),
        MCIERR_WAVE_SETINPUTINUSE = (256+67),
        MCIERR_WAVE_OUTPUTUNSPECIFIED = (256+68),
        MCIERR_WAVE_INPUTUNSPECIFIED = (256+69),
        MCIERR_WAVE_OUTPUTSUNSUITABLE = (256+70),
        MCIERR_WAVE_SETOUTPUTUNSUITABLE = (256+71),
        MCIERR_WAVE_INPUTSUNSUITABLE = (256+72),
        MCIERR_WAVE_SETINPUTUNSUITABLE = (256+73),
        MCIERR_SEQ_DIV_INCOMPATIBLE = (256+80),
        MCIERR_SEQ_PORT_INUSE = (256+81),
        MCIERR_SEQ_PORT_NONEXISTENT = (256+82),
        MCIERR_SEQ_PORT_MAPNODEVICE = (256+83),
        MCIERR_SEQ_PORT_MISCERROR = (256+84),
        MCIERR_SEQ_TIMER = (256+85),
        MCIERR_SEQ_PORTUNSPECIFIED = (256+86),
        MCIERR_SEQ_NOMIDIPRESENT = (256+87),
        MCIERR_NO_WINDOW = (256+90),
        MCIERR_CREATEWINDOW = (256+91),

x0800,
        MCI_OPEN = 0x0803,
        MCI_CLOSE = 0x0804,
        MCI_ESCAPE = 0x0805,
        MCI_PLAY = 0x0806,
        MCI_SEEK = 0x0807,
        MCI_STOP = 0x0808,
        MCI_PAUSE = 0x0809,
        MCI_INFO = 0x080A,
        MCI_GETDEVCAPS = 0x080B,
        MCI_SPIN = 0x080C,
        MCI_SET = 0x080D,
        MCI_STEP = 0x080E,
        MCI_RECORD = 0x080F,
        MCI_SYSINFO = 0x0810,
        MCI_BREAK = 0x0811,
        MCI_SAVE = 0x0813,
        MCI_STATUS = 0x0814,
        MCI_CUE = 0x0830,
        MCI_REALIZE = 0x0840,
        MCI_WINDOW = 0x0841,
        MCI_PUT = 0x0842,
        MCI_WHERE = 0x0843,
        MCI_FREEZE = 0x0844,
        MCI_UNFREEZE = 0x0845,
        MCI_LOAD = 0x0850,
        MCI_CUT = 0x0851,
        MCI_COPY = 0x0852,
        MCI_PASTE = 0x0853,
        MCI_UPDATE = 0x0854,
        MCI_RESUME = 0x0855,
        MCI_DELETE = 0x0856,
        MCI_USER_MESSAGES = (0x0800+0x400),
        MCI_LAST = 0x0FFF,
        MCI_DEVTYPE_VCR = 513,
        MCI_DEVTYPE_VIDEODISC = 514,
        MCI_DEVTYPE_OVERLAY = 515,
        MCI_DEVTYPE_CD_AUDIO = 516,
        MCI_DEVTYPE_DAT = 517,
        MCI_DEVTYPE_SCANNER = 518,
        MCI_DEVTYPE_ANIMATION = 519,
        MCI_DEVTYPE_DIGITAL_VIDEO = 520,
        MCI_DEVTYPE_OTHER = 521,
        MCI_DEVTYPE_WAVEFORM_AUDIO = 522,
        MCI_DEVTYPE_SEQUENCER = 523,
        MCI_DEVTYPE_FIRST = 513,
        MCI_DEVTYPE_LAST = 523,
        MCI_DEVTYPE_FIRST_USER = 0x1000,
        MCI_MODE_NOT_READY = (512+12),
        MCI_MODE_STOP = (512+13),
        MCI_MODE_PLAY = (512+14),
        MCI_MODE_RECORD = (512+15),
        MCI_MODE_SEEK = (512+16),
        MCI_MODE_PAUSE = (512+17),
        MCI_MODE_OPEN = (512+18),
        MCI_FORMAT_MILLISECONDS = 0,
        MCI_FORMAT_HMS = 1,
        MCI_FORMAT_MSF = 2,
        MCI_FORMAT_FRAMES = 3,
        MCI_FORMAT_SMPTE_24 = 4,
        MCI_FORMAT_SMPTE_25 = 5,
        MCI_FORMAT_SMPTE_30 = 6,
        MCI_FORMAT_SMPTE_30DROP = 7,
        MCI_FORMAT_BYTES = 8,
        MCI_FORMAT_SAMPLES = 9,
        MCI_FORMAT_TMSF = 10,
        MCI_NOTIFY_SUCCESSFUL = 0x0001,
        MCI_NOTIFY_SUPERSEDED = 0x0002,
        MCI_NOTIFY_ABORTED = 0x0004,
        MCI_NOTIFY_FAILURE = 0x0008,
        MCI_NOTIFY = 0x00000001,
        MCI_WAIT = 0x00000002,
        MCI_FROM = 0x00000004,
        MCI_TO = 0x00000008,
        MCI_TRACK = 0x00000010,
        MCI_OPEN_SHAREABLE = 0x00000100,
        MCI_OPEN_ELEMENT = 0x00000200,
        MCI_OPEN_ALIAS = 0x00000400,
        MCI_OPEN_ELEMENT_ID = 0x00000800,
        MCI_OPEN_TYPE_ID = 0x00001000,
        MCI_OPEN_TYPE = 0x00002000,
        MCI_SEEK_TO_START = 0x00000100,
        MCI_SEEK_TO_END = 0x00000200,
        MCI_STATUS_ITEM = 0x00000100,
        MCI_STATUS_START = 0x00000200,
        MCI_STATUS_LENGTH = 0x00000001,
        MCI_STATUS_POSITION = 0x00000002,
        MCI_STATUS_NUMBER_OF_TRACKS = 0x00000003,
        MCI_STATUS_MODE = 0x00000004,
        MCI_STATUS_MEDIA_PRESENT = 0x00000005,
        MCI_STATUS_TIME_FORMAT = 0x00000006,
        MCI_STATUS_READY = 0x00000007,
        MCI_STATUS_CURRENT_TRACK = 0x00000008,
        MCI_INFO_PRODUCT = 0x00000100,
        MCI_INFO_FILE = 0x00000200,
        MCI_INFO_MEDIA_UPC = 0x00000400,
        MCI_INFO_MEDIA_IDENTITY = 0x00000800,
        MCI_INFO_NAME = 0x00001000,
        MCI_INFO_COPYRIGHT = 0x00002000,
        MCI_GETDEVCAPS_ITEM = 0x00000100,
        MCI_GETDEVCAPS_CAN_RECORD = 0x00000001,
        MCI_GETDEVCAPS_HAS_AUDIO = 0x00000002,
        MCI_GETDEVCAPS_HAS_VIDEO = 0x00000003,
        MCI_GETDEVCAPS_DEVICE_TYPE = 0x00000004,
        MCI_GETDEVCAPS_USES_FILES = 0x00000005,
        MCI_GETDEVCAPS_COMPOUND_DEVICE = 0x00000006,
        MCI_GETDEVCAPS_CAN_EJECT = 0x00000007,
        MCI_GETDEVCAPS_CAN_PLAY = 0x00000008,
        MCI_GETDEVCAPS_CAN_SAVE = 0x00000009,
        MCI_SYSINFO_QUANTITY = 0x00000100,
        MCI_SYSINFO_OPEN = 0x00000200,
        MCI_SYSINFO_NAME = 0x00000400,
        MCI_SYSINFO_INSTALLNAME = 0x00000800,
        MCI_SET_DOOR_OPEN = 0x00000100,
        MCI_SET_DOOR_CLOSED = 0x00000200,
        MCI_SET_TIME_FORMAT = 0x00000400,
        MCI_SET_AUDIO = 0x00000800,
        MCI_SET_VIDEO = 0x00001000,
        MCI_SET_ON = 0x00002000,
        MCI_SET_OFF = 0x00004000,
        MCI_SET_AUDIO_ALL = 0x00000000,
        MCI_SET_AUDIO_LEFT = 0x00000001,
        MCI_SET_AUDIO_RIGHT = 0x00000002,
        MCI_BREAK_KEY = 0x00000100,
        MCI_BREAK_HWND = 0x00000200,
        MCI_BREAK_OFF = 0x00000400,
        MCI_RECORD_INSERT = 0x00000100,
        MCI_RECORD_OVERWRITE = 0x00000200,
        MCI_SAVE_FILE = 0x00000100,
        MCI_LOAD_FILE = 0x00000100,
        MCI_VD_MODE_PARK = (1024+1),
        MCI_VD_MEDIA_CLV = (1024+2),
        MCI_VD_MEDIA_CAV = (1024+3),
        MCI_VD_MEDIA_OTHER = (1024+4),
        MCI_VD_FORMAT_TRACK = 0x4001,
        MCI_VD_PLAY_REVERSE = 0x00010000,
        MCI_VD_PLAY_FAST = 0x00020000,
        MCI_VD_PLAY_SPEED = 0x00040000,
        MCI_VD_PLAY_SCAN = 0x00080000,
        MCI_VD_PLAY_SLOW = 0x00100000,
        MCI_VD_SEEK_REVERSE = 0x00010000,
        MCI_VD_STATUS_SPEED = 0x00004002,
        MCI_VD_STATUS_FORWARD = 0x00004003,
        MCI_VD_STATUS_MEDIA_TYPE = 0x00004004,
        MCI_VD_STATUS_SIDE = 0x00004005,
        MCI_VD_STATUS_DISC_SIZE = 0x00004006,
        MCI_VD_GETDEVCAPS_CLV = 0x00010000,
        MCI_VD_GETDEVCAPS_CAV = 0x00020000,
        MCI_VD_SPIN_UP = 0x00010000,
        MCI_VD_SPIN_DOWN = 0x00020000,
        MCI_VD_GETDEVCAPS_CAN_REVERSE = 0x00004002,
        MCI_VD_GETDEVCAPS_FAST_RATE = 0x00004003,
        MCI_VD_GETDEVCAPS_SLOW_RATE = 0x00004004,
        MCI_VD_GETDEVCAPS_NORMAL_RATE = 0x00004005,
        MCI_VD_STEP_FRAMES = 0x00010000,
        MCI_VD_STEP_REVERSE = 0x00020000,
        MCI_VD_ESCAPE_STRING = 0x00000100,
        MCI_CDA_STATUS_TYPE_TRACK = 0x00004001,
        MCI_CDA_TRACK_AUDIO = (1088+0),
        MCI_CDA_TRACK_OTHER = (1088+1),
        MCI_WAVE_PCM = (1152+0),
        MCI_WAVE_MAPPER = (1152+1),
        MCI_WAVE_OPEN_BUFFER = 0x00010000,
        MCI_WAVE_SET_FORMATTAG = 0x00010000,
        MCI_WAVE_SET_CHANNELS = 0x00020000,
        MCI_WAVE_SET_SAMPLESPERSEC = 0x00040000,
        MCI_WAVE_SET_AVGBYTESPERSEC = 0x00080000,
        MCI_WAVE_SET_BLOCKALIGN = 0x00100000,
        MCI_WAVE_SET_BITSPERSAMPLE = 0x00200000,
        MCI_WAVE_INPUT = 0x00400000,
        MCI_WAVE_OUTPUT = 0x00800000,
        MCI_WAVE_STATUS_FORMATTAG = 0x00004001,
        MCI_WAVE_STATUS_CHANNELS = 0x00004002,
        MCI_WAVE_STATUS_SAMPLESPERSEC = 0x00004003,
        MCI_WAVE_STATUS_AVGBYTESPERSEC = 0x00004004,
        MCI_WAVE_STATUS_BLOCKALIGN = 0x00004005,
        MCI_WAVE_STATUS_BITSPERSAMPLE = 0x00004006,
        MCI_WAVE_STATUS_LEVEL = 0x00004007,
        MCI_WAVE_SET_ANYINPUT = 0x04000000,
        MCI_WAVE_SET_ANYOUTPUT = 0x08000000,
        MCI_WAVE_GETDEVCAPS_INPUTS = 0x00004001,
        MCI_WAVE_GETDEVCAPS_OUTPUTS = 0x00004002,
        MCI_SEQ_DIV_PPQN = (0+1216),
        MCI_SEQ_DIV_SMPTE_24 = (1+1216),
        MCI_SEQ_DIV_SMPTE_25 = (2+1216),
        MCI_SEQ_DIV_SMPTE_30DROP = (3+1216),
        MCI_SEQ_DIV_SMPTE_30 = (4+1216),
        MCI_SEQ_FORMAT_SONGPTR = 0x4001,
        MCI_SEQ_FILE = 0x4002,
        MCI_SEQ_MIDI = 0x4003,
        MCI_SEQ_SMPTE = 0x4004,
        MCI_SEQ_NONE = 65533,
        MCI_SEQ_MAPPER = 65535,
        MCI_SEQ_STATUS_TEMPO = 0x00004002,
        MCI_SEQ_STATUS_PORT = 0x00004003,
        MCI_SEQ_STATUS_SLAVE = 0x00004007,
        MCI_SEQ_STATUS_MASTER = 0x00004008,
        MCI_SEQ_STATUS_OFFSET = 0x00004009,
        MCI_SEQ_STATUS_DIVTYPE = 0x0000400A,
        MCI_SEQ_STATUS_NAME = 0x0000400B,
        MCI_SEQ_STATUS_COPYRIGHT = 0x0000400C,
        MCI_SEQ_SET_TEMPO = 0x00010000,
        MCI_SEQ_SET_PORT = 0x00020000,
        MCI_SEQ_SET_SLAVE = 0x00040000,
        MCI_SEQ_SET_MASTER = 0x00080000,
        MCI_SEQ_SET_OFFSET = 0x01000000,
        MCI_ANIM_OPEN_WS = 0x00010000,
        MCI_ANIM_OPEN_PARENT = 0x00020000,
        MCI_ANIM_OPEN_NOSTATIC = 0x00040000,
        MCI_ANIM_PLAY_SPEED = 0x00010000,
        MCI_ANIM_PLAY_REVERSE = 0x00020000,
        MCI_ANIM_PLAY_FAST = 0x00040000,
        MCI_ANIM_PLAY_SLOW = 0x00080000,
        MCI_ANIM_PLAY_SCAN = 0x00100000,
        MCI_ANIM_STEP_REVERSE = 0x00010000,
        MCI_ANIM_STEP_FRAMES = 0x00020000,
        MCI_ANIM_STATUS_SPEED = 0x00004001,
        MCI_ANIM_STATUS_FORWARD = 0x00004002,
        MCI_ANIM_STATUS_HWND = 0x00004003,
        MCI_ANIM_STATUS_HPAL = 0x00004004,
        MCI_ANIM_STATUS_STRETCH = 0x00004005,
        MCI_ANIM_INFO_TEXT = 0x00010000,
        MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 0x00004001,
        MCI_ANIM_GETDEVCAPS_FAST_RATE = 0x00004002,
        MCI_ANIM_GETDEVCAPS_SLOW_RATE = 0x00004003,
        MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 0x00004004,
        MCI_ANIM_GETDEVCAPS_PALETTES = 0x00004006,
        MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 0x00004007,
        MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 0x00004008,
        MCI_ANIM_REALIZE_NORM = 0x00010000,
        MCI_ANIM_REALIZE_BKGD = 0x00020000,
        MCI_ANIM_WINDOW_HWND = 0x00010000,
        MCI_ANIM_WINDOW_STATE = 0x00040000,
        MCI_ANIM_WINDOW_TEXT = 0x00080000,
        MCI_ANIM_WINDOW_ENABLE_STRETCH = 0x00100000,
        MCI_ANIM_WINDOW_DISABLE_STRETCH = 0x00200000,
        MCI_ANIM_WINDOW_DEFAULT = 0x00000000,
        MCI_ANIM_RECT = 0x00010000,
        MCI_ANIM_PUT_SOURCE = 0x00020000,
        MCI_ANIM_PUT_DESTINATION = 0x00040000,
        MCI_ANIM_WHERE_SOURCE = 0x00020000,
        MCI_ANIM_WHERE_DESTINATION = 0x00040000,
        MCI_ANIM_UPDATE_HDC = 0x00020000,
        MCI_OVLY_OPEN_WS = 0x00010000,
        MCI_OVLY_OPEN_PARENT = 0x00020000,
        MCI_OVLY_STATUS_HWND = 0x00004001,
        MCI_OVLY_STATUS_STRETCH = 0x00004002,
        MCI_OVLY_INFO_TEXT = 0x00010000,
        MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 0x00004001,
        MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 0x00004002,
        MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 0x00004003,
        MCI_OVLY_WINDOW_HWND = 0x00010000,
        MCI_OVLY_WINDOW_STATE = 0x00040000,
        MCI_OVLY_WINDOW_TEXT = 0x00080000,
        MCI_OVLY_WINDOW_ENABLE_STRETCH = 0x00100000,
        MCI_OVLY_WINDOW_DISABLE_STRETCH = 0x00200000,
        MCI_OVLY_WINDOW_DEFAULT = 0x00000000,
        MCI_OVLY_RECT = 0x00010000,
        MCI_OVLY_PUT_SOURCE = 0x00020000,
        MCI_OVLY_PUT_DESTINATION = 0x00040000,
        MCI_OVLY_PUT_FRAME = 0x00080000,
        MCI_OVLY_PUT_VIDEO = 0x00100000,
        MCI_OVLY_WHERE_SOURCE = 0x00020000,
        MCI_OVLY_WHERE_DESTINATION = 0x00040000,
        MCI_OVLY_WHERE_FRAME = 0x00080000,
        MCI_OVLY_WHERE_VIDEO = 0x00100000,
        MAX_LANA = 254,
        MARSHALINTERFACE_MIN = 500,
        MEMBERID_NIL = (-1),
        MK_ALT = (0x20),
        MAXPROPPAGES = 100,
        MARKPARITY = 3,
        MS_CTS_ON = (0x0010),
        MS_DSR_ON = (0x0020),
        MS_RING_ON = (0x0040),
        MS_RLSD_ON = (0x0080),
        MAXINTATOM = unchecked((int)0xC000),
        MOVEFILE_REPLACE_EXISTING = 0x00000001,
        MOVEFILE_COPY_ALLOWED = 0x00000002,
        MOVEFILE_DELAY_UNTIL_REBOOT = 0x00000004,
        MOVEFILE_WRITE_THROUGH = 0x00000008,
        MAX_COMPUTERNAME_LENGTH = 15,
        MAX_PROFILE_LEN = 80,
        MOUSE_MOVED = 0x0001,
        MOUSE_EVENT = 0x0002,
        MENU_EVENT = 0x0008,
        MAXUIDLEN = 64,
        MAX_PATH = 260,
        MARSHAL_E_FIRST = unchecked((int)0x80040120),
        MARSHAL_E_LAST = unchecked((int)0x8004012F),
        MARSHAL_S_FIRST = 0x00040120,
        MARSHAL_S_LAST = 0x0004012F,
        MK_E_FIRST = unchecked((int)0x800401E0),
        MK_E_LAST = unchecked((int)0x800401EF),
        MK_S_FIRST = 0x000401E0,
        MK_S_LAST = 0x000401EF,
        MK_E_CONNECTMANUALLY = unchecked((int)0x800401E0),
        MK_E_EXCEEDEDDEADLINE = unchecked((int)0x800401E1),
        MK_E_NEEDGENERIC = unchecked((int)0x800401E2),
        MK_E_UNAVAILABLE = unchecked((int)0x800401E3),
        MK_E_SYNTAX = unchecked((int)0x800401E4),
        MK_E_NOOBJECT = unchecked((int)0x800401E5),
        MK_E_INVALIDEXTENSION = unchecked((int)0x800401E6),
        MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = unchecked((int)0x800401E7),
        MK_E_NOTBINDABLE = unchecked((int)0x800401E8),
        MK_E_NOTBOUND = unchecked((int)0x800401E9),
        MK_E_CANTOPENFILE = unchecked((int)0x800401EA),
        MK_E_MUSTBOTHERUSER = unchecked((int)0x800401EB),
        MK_E_NOINVERSE = unchecked((int)0x800401EC),
        MK_E_NOSTORAGE = unchecked((int)0x800401ED),
        MK_E_NOPREFIX = unchecked((int)0x800401EE),
        MK_E_ENUMERATION_FAILED = unchecked((int)0x800401EF),
        MK_S_REDUCED_TO_SELF = 0x000401E2,
        MK_S_ME = 0x000401E4,
        MK_S_HIM = 0x000401E5,
        MK_S_US = 0x000401E6,
        MK_S_MONIKERALREADYREGISTERED = 0x000401E7,
        MK_E_NO_NORMALIZED = unchecked((int)0x80080007),
        MEM_E_INVALID_ROOT = unchecked((int)0x80080009),
        MEM_E_INVALID_LINK = unchecked((int)0x80080010),
        MEM_E_INVALID_SIZE = unchecked((int)0x80080011),
        MAXSTRETCHBLTMODE = 4,
        META_SETBKCOLOR = 0x0201,
        META_SETBKMODE = 0x0102,
        META_SETMAPMODE = 0x0103,
        META_SETROP2 = 0x0104,
        META_SETRELABS = 0x0105,
        META_SETPOLYFILLMODE = 0x0106,
        META_SETSTRETCHBLTMODE = 0x0107,
        META_SETTEXTCHAREXTRA = 0x0108,
        META_SETTEXTCOLOR = 0x0209,
        META_SETTEXTJUSTIFICATION = 0x020A,
        META_SETWINDOWORG = 0x020B,
        META_SETWINDOWEXT = 0x020C,
        META_SETVIEWPORTORG = 0x020D,
        META_SETVIEWPORTEXT = 0x020E,
        META_OFFSETWINDOWORG = 0x020F,
        META_SCALEWINDOWEXT = 0x0410,
        META_OFFSETVIEWPORTORG = 0x0211,
        META_SCALEVIEWPORTEXT = 0x0412,
        META_LINETO = 0x0213,
        META_MOVETO = 0x0214,
        META_EXCLUDECLIPRECT = 0x0415,
        META_INTERSECTCLIPRECT = 0x0416,
        META_ARC = 0x0817,
        META_ELLIPSE = 0x0418,
        META_FLOODFILL = 0x0419,
        META_PIE = 0x081A,
        META_RECTANGLE = 0x041B,
        META_ROUNDRECT = 0x061C,
        META_PATBLT = 0x061D,
        META_SAVEDC = 0x001E,
        META_SETPIXEL = 0x041F,
        META_OFFSETCLIPRGN = 0x0220,
        META_TEXTOUT = 0x0521,
        META_BITBLT = 0x0922,
        META_STRETCHBLT = 0x0B23,
        META_POLYGON = 0x0324,
        META_POLYLINE = 0x0325,
        META_ESCAPE = 0x0626,
        META_RESTOREDC = 0x0127,
        META_FILLREGION = 0x0228,
        META_FRAMEREGION = 0x0429,
        META_INVERTREGION = 0x012A,
        META_PAINTREGION = 0x012B,
        META_SELECTCLIPREGION = 0x012C,
        META_SELECTOBJECT = 0x012D,
        META_SETTEXTALIGN = 0x012E,
        META_CHORD = 0x0830,
        META_SETMAPPERFLAGS = 0x0231,
        META_EXTTEXTOUT = 0x0a32,
        META_SETDIBTODEV = 0x0d33,
        META_SELECTPALETTE = 0x0234,
        META_REALIZEPALETTE = 0x0035,
        META_ANIMATEPALETTE = 0x0436,
        META_SETPALENTRIES = 0x0037,
        META_POLYPOLYGON = 0x0538,
        META_RESIZEPALETTE = 0x0139,
        META_DIBBITBLT = 0x0940,
        META_DIBSTRETCHBLT = 0x0b41,
        META_DIBCREATEPATTERNBRUSH = 0x0142,
        META_STRETCHDIB = 0x0f43,
        META_EXTFLOODFILL = 0x0548,
        META_DELETEOBJECT = 0x01f0,
        META_CREATEPALETTE = 0x00f7,
        META_CREATEPATTERNBRUSH = 0x01F9,
        META_CREATEPENINDIRECT = 0x02FA,
        META_CREATEFONTINDIRECT = 0x02FB,
        META_CREATEBRUSHINDIRECT = 0x02FC,
        META_CREATEREGION = 0x06FF,
        MFCOMMENT = 15,
        MOUSETRAILS = 39,
        MWT_IDENTITY = 1,
        MWT_LEFTMULTIPLY = 2,
        MWT_RIGHTMULTIPLY = 3,
        MWT_MIN = 1,
        MWT_MAX = 3,
        MONO_FONT = 8,
        MAC_CHARSET = 77,
        MM_TEXT = 1,
        MM_LOMETRIC = 2,
        MM_HIMETRIC = 3,
        MM_LOENGLISH = 4,
        MM_HIENGLISH = 5,
        MM_TWIPS = 6,
        MM_ISOTROPIC = 7,
        MM_ANISOTROPIC = 8,
        MM_MIN = 1,
        MM_MAX = 8,
        MM_MAX_FIXEDSCALE = 6,
        MAX_LEADBYTES = 12,
        MAX_DEFAULTCHAR = 2,
        MB_PRECOMPOSED = 0x00000001,
        MB_COMPOSITE = 0x00000002,
        MB_USEGLYPHCHARS = 0x00000004,
        MB_ERR_INVALID_CHARS = 0x00000008,
        MAP_FOLDCZONE = 0x00000010,
        MAP_PRECOMPOSED = 0x00000020,
        MAP_COMPOSITE = 0x00000040,
        MAP_FOLDDIGITS = 0x00000080;
        public const long MAXLONGLONG = (0x7fffffffffffffffL);
        public const int MINCHAR = unchecked((int)0x80),
        MAXCHAR = 0x7f,
        MINSHORT = unchecked((int)0x8000),
        MAXSHORT = 0x7fff,
        MINLONG = unchecked((int)0x80000000),
        MAXLONG = 0x7fffffff,
        MAXBYTE = 0xff,
        MAXWORD = 0xffff,
        MAXDWORD = unchecked((int)0xFfffffff),
        MAXIMUM_WAIT_OBJECTS = 64,
        MAXIMUM_SUSPEND_COUNT = 0x7f,
        MAXIMUM_PROCESSORS = 32,
        MUTANT_QUERY_STATE = 0x0001,
        MEM_COMMIT = 0x1000,
        MEM_RESERVE = 0x2000,
        MEM_DECOMMIT = 0x4000,
        MEM_RELEASE = unchecked((int)0x8000),
        MEM_FREE = 0x10000,
        MEM_PRIVATE = 0x20000,
        MEM_MAPPED = 0x40000,
        MEM_RESET = unchecked((int)0x80000),
        MEM_TOP_DOWN = 0x100000,
        MEM_IMAGE = 0x1000000,
        MAILSLOT_NO_MESSAGE = (-1),
        MAILSLOT_WAIT_FOREVER = (-1),
        MAXIMUM_ALLOWED = (0x02000000),
        MESSAGE_RESOURCE_UNICODE = 0x0001,
        MAX_PRIORITY = 99,
        MIN_PRIORITY = 1,
        MSGF_DIALOGBOX = 0,
        MSGF_MESSAGEBOX = 1,
        MSGF_MENU = 2,
        MSGF_MOVE = 3,
        MSGF_SIZE = 4,
        MSGF_SCROLLBAR = 5,
        MSGF_NEXTWINDOW = 6,
        MSGF_MAINLOOP = 8,
        MSGF_MAX = 8,
        MSGF_USER = 4096,
        MENULOOP_WINDOW = 0,
        MENULOOP_POPUP = 1,
        MA_ACTIVATE = 1,
        MA_ACTIVATEANDEAT = 2,
        MA_NOACTIVATE = 3,
        MA_NOACTIVATEANDEAT = 4,
        MK_LBUTTON = 0x0001,
        MK_RBUTTON = 0x0002,
        MK_SHIFT = 0x0004,
        MK_CONTROL = 0x0008,
        MK_MBUTTON = 0x0010,
        MOD_WIN = 0x0008,
        MOUSEEVENTF_MOVE = 0x0001,
        MOUSEEVENTF_LEFTDOWN = 0x0002,
        MOUSEEVENTF_LEFTUP = 0x0004,
        MOUSEEVENTF_RIGHTDOWN = 0x0008,
        MOUSEEVENTF_RIGHTUP = 0x0010,
        MOUSEEVENTF_MIDDLEDOWN = 0x0020,
        MOUSEEVENTF_MIDDLEUP = 0x0040,
        MOUSEEVENTF_WHEEL = 0x0800,
        MOUSEEVENTF_ABSOLUTE = unchecked((int)0x8000),
        MWMO_WAITALL = 0x0001,
        MWMO_ALERTABLE = 0x0002,
        MNC_IGNORE = 0,
        MNC_CLOSE = 1,
        MNC_EXECUTE = 2,
        MNC_SELECT = 3,
        MIIM_STATE = 0x00000001,
        MIIM_ID = 0x00000002,
        MIIM_SUBMENU = 0x00000004,
        MIIM_CHECKMARKS = 0x00000008,
        MIIM_TYPE = 0x00000010,
        MIIM_DATA = 0x00000020,
        MB_OK = 0x00000000,
        MB_OKCANCEL = 0x00000001,
        MB_ABORTRETRYIGNORE = 0x00000002,
        MB_YESNOCANCEL = 0x00000003,
        MB_YESNO = 0x00000004,
        MB_RETRYCANCEL = 0x00000005,
        MB_ICONHAND = 0x00000010,
        MB_ICONQUESTION = 0x00000020,
        MB_ICONEXCLAMATION = 0x00000030,
        MB_ICONASTERISK = 0x00000040,
        MB_USERICON = 0x00000080,
        MB_ICONWARNING = 0x00000030,
        MB_ICONERROR = 0x00000010,
        MB_ICONINFORMATION = 0x00000040,
        MB_DEFBUTTON1 = 0x00000000,
        MB_DEFBUTTON2 = 0x00000100,
        MB_DEFBUTTON3 = 0x00000200,
        MB_DEFBUTTON4 = 0x00000300,
        MB_APPLMODAL = 0x00000000,
        MB_SYSTEMMODAL = 0x00001000,
        MB_TASKMODAL = 0x00002000,
        MB_HELP = 0x00004000,
        MB_NOFOCUS = 0x00008000,
        MB_SETFOREGROUND = 0x00010000,
        MB_DEFAULT_DESKTOP_ONLY = 0x00020000,
        MB_TOPMOST = 0x00040000,
        MB_RIGHT = 0x00080000,
        MB_RTLREADING = 0x00100000,
        MB_SERVICE_NOTIFICATION = 0x00200000;
        // MB_SERVICE_NOTIFICATION = 0x00040000;
        public const int MB_SERVICE_NOTIFICATION_NT3X = 0x00040000,
        MB_TYPEMASK = 0x0000000F,
        MB_ICONMASK = 0x000000F0,
        MB_DEFMASK = 0x00000F00,
        MB_MODEMASK = 0x00003000,
        MB_MISCMASK = 0x0000C000,
        MF_INSERT = 0x00000000,
        MF_CHANGE = 0x00000080,
        MF_APPEND = 0x00000100,
        MF_DELETE = 0x00000200,
        MF_REMOVE = 0x00001000,
        MF_BYCOMMAND = 0x00000000,
        MF_BYPOSITION = 0x00000400,
        MF_SEPARATOR = 0x00000800,
        MF_ENABLED = 0x00000000,
        MF_GRAYED = 0x00000001,
        MF_DISABLED = 0x00000002,
        MF_UNCHECKED = 0x00000000,
        MF_CHECKED = 0x00000008,
        MF_USECHECKBITMAPS = 0x00000200,
        MF_STRING = 0x00000000,
        MF_BITMAP = 0x00000004,
        MF_OWNERDRAW = 0x00000100,
        MF_POPUP = 0x00000010,
        MF_MENUBARBREAK = 0x00000020,
        MF_MENUBREAK = 0x00000040,
        MF_UNHILITE = 0x00000000,
        MF_HILITE = 0x00000080,
        MF_DEFAULT = 0x00001000,
        MF_SYSMENU = 0x00002000,
        MF_HELP = 0x00004000,
        MF_RIGHTJUSTIFY = 0x00004000,
        MF_MOUSESELECT = 0x00008000,
        MF_END = 0x00000080,
        MFT_STRING = 0x00000000,
        MFT_BITMAP = 0x00000004,
        MFT_MENUBARBREAK = 0x00000020,
        MFT_MENUBREAK = 0x00000040,
        MFT_OWNERDRAW = 0x00000100,
        MFT_RADIOCHECK = 0x00000200,
        MFT_SEPARATOR = 0x00000800,
        MFT_RIGHTORDER = 0x00002000,
        MFT_RIGHTJUSTIFY = 0x00004000,
        MFS_GRAYED = 0x00000003,
        MFS_DISABLED = 0x00000003,
        MFS_CHECKED = 0x00000008,
        MFS_HILITE = 0x00000080,
        MFS_ENABLED = 0x00000000,
        MFS_UNCHECKED = 0x00000000,
        MFS_UNHILITE = 0x00000000,
        MFS_DEFAULT = 0x00001000,
        MDIS_ALLCHILDSTYLES = 0x0001,
        MDITILE_VERTICAL = 0x0000,
        MDITILE_HORIZONTAL = 0x0001,
        MDITILE_SKIPDISABLED = 0x0002,
        METRICS_USEDEFAULT = -1,
        MKF_MOUSEKEYSON = 0x00000001,
        MKF_AVAILABLE = 0x00000002,
        MKF_HOTKEYACTIVE = 0x00000004,
        MKF_CONFIRMHOTKEY = 0x00000008,
        MKF_HOTKEYSOUND = 0x00000010,
        MKF_INDICATOR = 0x00000020,
        MKF_MODIFIERS = 0x00000040,
        MKF_REPLACENUMBERS = 0x00000080,
        MCN_FIRST = (0-750),
        MCN_LAST = (0-759),
        MSGF_COMMCTRL_BEGINDRAG = 0x4200,
        MSGF_COMMCTRL_SIZEHEADER = 0x4201,
        MSGF_COMMCTRL_DRAGSELECT = 0x4202,
        MSGF_COMMCTRL_TOOLBARCUST = 0x4203,
        MINSYSCOMMAND = 0xF000,
        MCM_FIRST = 0x1000,
        MCM_GETCURSEL = (0x1000+1),
        MCM_SETCURSEL = (0x1000+2),
        MCM_GETMAXSELCOUNT = (0x1000+3),
        MCM_SETMAXSELCOUNT = (0x1000+4),
        MCM_GETSELRANGE = (0x1000+5),
        MCM_SETSELRANGE = (0x1000+6),
        MCM_GETMONTHRANGE = (0x1000+7),
        MCM_SETDAYSTATE = (0x1000+8),
        MCM_GETMINREQRECT = (0x1000+9),
        MCM_SETCOLOR = (0x1000+10),
        MCM_GETCOLOR = (0x1000+11),
        MCM_SETTODAY = (0x1000+12),
        MCM_GETTODAY = (0x1000+13),
        MCM_HITTEST = (0x1000+14),
        MCM_SETFIRSTDAYOFWEEK = (0x1000+15),
        MCM_GETFIRSTDAYOFWEEK = (0x1000+16),
        MCM_GETRANGE = (0x1000+17),
        MCM_SETRANGE = (0x1000+18),
        MCM_GETMONTHDELTA = (0x1000+19),
        MCM_SETMONTHDELTA = (0x1000+20),
        MCM_GETMAXTODAYWIDTH = (0x1000+21),
        MCHT_TITLE = 0x00010000,
        MCHT_CALENDAR = 0x00020000,
        MCHT_TODAYLINK = 0x00030000,
        MCHT_NEXT = 0x01000000,
        MCHT_PREV = 0x02000000,
        MCHT_NOWHERE = 0x00000000,
        MCHT_TITLEBK = (0x00010000),
        MCHT_TITLEMONTH = (0x00010000|0x0001),
        MCHT_TITLEYEAR = (0x00010000|0x0002),
        MCHT_TITLEBTNNEXT = (0x00010000|0x01000000|0x0003),
        MCHT_TITLEBTNPREV = (0x00010000|0x02000000|0x0003),
        MCHT_CALENDARBK = (0x00020000),
        MCHT_CALENDARDATE = (0x00020000|0x0001),
        MCHT_CALENDARDATENEXT = ((0x00020000|0x0001)|0x01000000),
        MCHT_CALENDARDATEPREV = ((0x00020000|0x0001)|0x02000000),
        MCHT_CALENDARDAY = (0x00020000|0x0002),
        MCHT_CALENDARWEEKNUM = (0x00020000|0x0003),
        MCSC_BACKGROUND = 0,
        MCSC_TEXT = 1,
        MCSC_TITLEBK = 2,
        MCSC_TITLETEXT = 3,
        MCSC_MONTHBK = 4,
        MCSC_TRAILINGTEXT = 5,
        MCN_SELCHANGE = ((0-750)+1),
        MCN_GETDAYSTATE = ((0-750)+3),
        MCN_SELECT = ((0-750)+4),
        MCS_DAYSTATE = 0x0001,
        MCS_MULTISELECT = 0x0002,
        MCS_WEEKNUMBERS = 0x0004,
        MCS_NOTODAYCIRCLE = 0x0008,
        MUTEX_MODIFY_STATE = 0x0001,
        MERGECOPY = 0x00C000CA,
        MERGEPAINT = 0x00BB0226;

        public const int NEWFILEOPENORD = 1547,
        NI_OPENCANDIDATE = 0x0010,
        NI_CLOSECANDIDATE = 0x0011,
        NI_SELECTCANDIDATESTR = 0x0012,
        NI_CHANGECANDIDATELIST = 0x0013,
        NI_FINALIZECONVERSIONRESULT = 0x0014,
        NI_COMPOSITIONSTR = 0x0015,
        NI_SETCANDIDATE_PAGESTART = 0x0016,
        NI_SETCANDIDATE_PAGESIZE = 0x0017,
        NEWTRANSPARENT = 3,
        NCBNAMSZ = 16,
        NAME_FLAGS_MASK = unchecked((int)0x87),
        NCBCALL = 0x10,
        NCBLISTEN = 0x11,
        NCBHANGUP = 0x12,
        NCBSEND = 0x14,
        NCBRECV = 0x15,
        NCBRECVANY = 0x16,
        NCBCHAINSEND = 0x17,
        NCBDGSEND = 0x20,
        NCBDGRECV = 0x21,
        NCBDGSENDBC = 0x22,
        NCBDGRECVBC = 0x23,
        NCBADDNAME = 0x30,
        NCBDELNAME = 0x31,
        NCBRESET = 0x32,
        NCBASTAT = 0x33,
        NCBSSTAT = 0x34,
        NCBCANCEL = 0x35,
        NCBADDGRNAME = 0x36,
        NCBENUM = 0x37,
        NCBUNLINK = 0x70,
        NCBSENDNA = 0x71,
        NCBCHAINSENDNA = 0x72,
        NCBLANSTALERT = 0x73,
        NCBACTION = 0x77,
        NCBFINDNAME = 0x78,
        NCBTRACE = 0x79,
        NRC_GOODRET = 0x00,
        NRC_BUFLEN = 0x01,
        NRC_ILLCMD = 0x03,
        NRC_CMDTMO = 0x05,
        NRC_INCOMP = 0x06,
        NRC_BADDR = 0x07,
        NRC_SNUMOUT = 0x08,
        NRC_NORES = 0x09,
        NRC_SCLOSED = 0x0a,
        NRC_CMDCAN = 0x0b,
        NRC_DUPNAME = 0x0d,
        NRC_NAMTFUL = 0x0e,
        NRC_ACTSES = 0x0f,
        NRC_LOCTFUL = 0x11,
        NRC_REMTFUL = 0x12,
        NRC_ILLNN = 0x13,
        NRC_NOCALL = 0x14,
        NRC_NOWILD = 0x15,
        NRC_INUSE = 0x16,
        NRC_NAMERR = 0x17,
        NRC_SABORT = 0x18,
        NRC_NAMCONF = 0x19,
        NRC_IFBUSY = 0x21,
        NRC_TOOMANY = 0x22,
        NRC_BRIDGE = 0x23,
        NRC_CANOCCR = 0x24,
        NRC_CANCEL = 0x26,
        NRC_DUPENV = 0x30,
        NRC_ENVNOTDEF = 0x34,
        NRC_OSRESNOTAV = 0x35,
        NRC_MAXAPPS = 0x36,
        NRC_NOSAPS = 0x37,
        NRC_NORESOURCES = 0x38,
        NRC_INVADDRESS = 0x39,
        NRC_INVDDID = 0x3B,
        NRC_LOCKFAIL = 0x3C,
        NRC_OPENERR = 0x3f,
        NRC_SYSTEM = 0x40,
        NRC_PENDING = 0xff,
        NUMPRS_LEADING_WHITE = 0x0001,
        NUMPRS_TRAILING_WHITE = 0x0002,
        NUMPRS_LEADING_PLUS = 0x0004,
        NUMPRS_TRAILING_PLUS = 0x0008,
        NUMPRS_LEADING_MINUS = 0x0010,
        NUMPRS_TRAILING_MINUS = 0x0020,
        NUMPRS_HEX_OCT = 0x0040,
        NUMPRS_PARENS = 0x0080,
        NUMPRS_DECIMAL = 0x0100,
        NUMPRS_THOUSANDS = 0x0200,
        NUMPRS_CURRENCY = 0x0400,
        NUMPRS_EXPONENT = 0x0800,
        NUMPRS_USE_ALL = 0x1000,
        NUMPRS_STD = 0x1FFF,
        NUMPRS_NEG = 0x10000,
        NUMPRS_INEXACT = 0x20000,
        NT351_INTERFACE_SIZE = 0x40,
        NIM_ADD = 0x00000000,
        NIM_MODIFY = 0x00000001,
        NIM_DELETE = 0x00000002,
        NIF_MESSAGE = 0x00000001,
        NIF_ICON = 0x00000002,
        NIF_TIP = 0x00000004,
        NONZEROLHND = 0x0002,
        NONZEROLPTR = 0x0000,
        NORMAL_PRIORITY_CLASS = 0x00000020,
        NOPARITY = 0,
        NMPWAIT_WAIT_FOREVER = unchecked((int)0xFfffffff),
        NMPWAIT_NOWAIT = 0x00000001,
        NMPWAIT_USE_DEFAULT_WAIT = 0x00000000,
        NUMLOCK_ON = 0x0020,
        NULL = 0,
        NO_ERROR = 0,
        NOERROR = 0,
        NTE_BAD_UID = unchecked((int)0x80090001),
        NTE_BAD_HASH = unchecked((int)0x80090002),
        NTE_BAD_KEY = unchecked((int)0x80090003),
        NTE_BAD_LEN = unchecked((int)0x80090004),
        NTE_BAD_DATA = unchecked((int)0x80090005),
        NTE_BAD_SIGNATURE = unchecked((int)0x80090006),
        NTE_BAD_VER = unchecked((int)0x80090007),
        NTE_BAD_ALGID = unchecked((int)0x80090008),
        NTE_BAD_FLAGS = unchecked((int)0x80090009),
        NTE_BAD_TYPE = unchecked((int)0x8009000A),
        NTE_BAD_KEY_STATE = unchecked((int)0x8009000B),
        NTE_BAD_HASH_STATE = unchecked((int)0x8009000C),
        NTE_NO_KEY = unchecked((int)0x8009000D),
        NTE_NO_MEMORY = unchecked((int)0x8009000E),
        NTE_EXISTS = unchecked((int)0x8009000F),
        NTE_PERM = unchecked((int)0x80090010),
        NTE_NOT_FOUND = unchecked((int)0x80090011),
        NTE_DOUBLE_ENCRYPT = unchecked((int)0x80090012),
        NTE_BAD_PROVIDER = unchecked((int)0x80090013),
        NTE_BAD_PROV_TYPE = unchecked((int)0x80090014),
        NTE_BAD_PUBLIC_KEY = unchecked((int)0x80090015),
        NTE_BAD_KEYSET = unchecked((int)0x80090016),
        NTE_PROV_TYPE_NOT_DEF = unchecked((int)0x80090017),
        NTE_PROV_TYPE_ENTRY_BAD = unchecked((int)0x80090018),
        NTE_KEYSET_NOT_DEF = unchecked((int)0x80090019),
        NTE_KEYSET_ENTRY_BAD = unchecked((int)0x8009001A),
        NTE_PROV_TYPE_NO_MATCH = unchecked((int)0x8009001B),
        NTE_SIGNATURE_FILE_BAD = unchecked((int)0x8009001C),
        NTE_PROVIDER_DLL_FAIL = unchecked((int)0x8009001D),
        NTE_PROV_DLL_NOT_FOUND = unchecked((int)0x8009001E),
        NTE_BAD_KEYSET_PARAM = unchecked((int)0x8009001F),
        NTE_FAIL = unchecked((int)0x80090020),
        NTE_SYS_ERR = unchecked((int)0x80090021),
        NTE_OP_OK = 0,
        NULLREGION = 1,
        NEWFRAME = 1,
        NEXTBAND = 3,
        NTM_REGULAR = 0x00000040,
        NTM_BOLD = 0x00000020,
        NTM_ITALIC = 0x00000001,
        NONANTIALIASED_QUALITY = 3,
        NULL_BRUSH = 5,
        NULL_PEN = 8,
        NUMBRUSHES = 16,
        NUMPENS = 18,
        NUMMARKERS = 20,
        NUMFONTS = 22,
        NUMCOLORS = 24,
        NUMRESERVED = 106,
        NETPROPERTY_PERSISTENT = 1,
        NETINFO_DLL16 = 0x00000001,
        NETINFO_DISKRED = 0x00000004,
        NETINFO_PRINTERRED = 0x00000008,
        NORM_IGNORECASE = 0x00000001,
        NORM_IGNORENONSPACE = 0x00000002,
        NORM_IGNORESYMBOLS = 0x00000004,
        NORM_IGNOREKANATYPE = 0x00010000,
        NORM_IGNOREWIDTH = 0x00020000,
        NLS_VALID_LOCALE_MASK = 0x000fffff,
        NO_PROPAGATE_INHERIT_ACE = (0x4),
                                   N_BTMASK = 0x000F,
        N_TMASK = 0x0030,
        N_TMASK1 = 0x00C0,
        N_TMASK2 = 0x00F0,
        N_BTSHFT = 4,
        N_TSHIFT = 2,
        NO_PRIORITY = 0,
        NFR_ANSI = 1,
        NFR_UNICODE = 2,
        NF_QUERY = 3,
        NF_REQUERY = 4,
        NM_FIRST = (0-0),
        NM_LAST = (0-99),
        NM_OUTOFMEMORY = ((0-0)-1),
        NM_CLICK = ((0-0)-2),
        NM_DBLCLK = ((0-0)-3),
        NM_RETURN = ((0-0)-4),
        NM_RCLICK = ((0-0)-5),
        NM_RDBLCLK = ((0-0)-6),
        NM_SETFOCUS = ((0-0)-7),
        NM_KILLFOCUS = ((0-0)-8),
        NM_CUSTOMDRAW = ((0-0)-12),
        NM_HOVER = ((0-0)-13),
        NM_RELEASEDCAPTURE = ((0-0)-16),
        NOTSRCCOPY = 0x00330008,
        NOTSRCERASE = 0x001100A6;



        public const int OFN_READONLY = 0x00000001,
        OFN_OVERWRITEPROMPT = 0x00000002,
        OFN_HIDEREADONLY = 0x00000004,
        OFN_NOCHANGEDIR = 0x00000008,
        OFN_SHOWHELP = 0x00000010,
        OFN_ENABLEHOOK = 0x00000020,
        OFN_ENABLETEMPLATE = 0x00000040,
        OFN_ENABLETEMPLATEHANDLE = 0x00000080,
        OFN_NOVALIDATE = 0x00000100,
        OFN_ALLOWMULTISELECT = 0x00000200,
        OFN_EXTENSIONDIFFERENT = 0x00000400,
        OFN_PATHMUSTEXIST = 0x00000800,
        OFN_FILEMUSTEXIST = 0x00001000,
        OFN_CREATEPROMPT = 0x00002000,
        OFN_SHAREAWARE = 0x00004000,
        OFN_NOREADONLYRETURN = 0x00008000,
        OFN_NOTESTFILECREATE = 0x00010000,
        OFN_NONETWORKBUTTON = 0x00020000,
        OFN_NOLONGNAMES = 0x00040000,
        OFN_EXPLORER = 0x00080000,
        OFN_NODEREFERENCELINKS = 0x00100000,
        OFN_ENABLEINCLUDENOTIFY = 0x00400000,
        OFN_ENABLESIZING = 0x00800000,
        OFN_LONGNAMES = 0x00200000,
        OFN_SHAREFALLTHROUGH = 2,
        OFN_SHARENOWARN = 1,
        OFN_SHAREWARN = 0,
        OFN_USESHELLITEM = 0x01000000,
        OFN_DONTADDTORECENT = 0x02000000,
        OFN_FORCESHOWHIDDEN = 0x10000000,
        OLEIVERB_PRIMARY = 0,
        OLEIVERB_SHOW = -1,
        OLEIVERB_OPEN = -2,
        OLEIVERB_HIDE = -3,
        OLEIVERB_UIACTIVATE = -4,
        OLEIVERB_INPLACEACTIVATE = -5,
        OLEIVERB_DISCARDUNDOSTATE = -6,
        OLEIVERB_PROPERTIES = -7,
        OLECREATE_LEAVERUNNING = 0x00000001,
        OPEN_EXISTING = 3,
        OPEN_ALWAYS = 4,
        OUTPUT_DEBUG_STRING_EVENT = 8,
        ODDPARITY = 1,
        ONESTOPBIT = 0,
        ONE5STOPBITS = 1,
        OF_READ = 0x00000000,
        OF_WRITE = 0x00000001,
        OF_READWRITE = 0x00000002,
        OF_SHARE_COMPAT = 0x00000000,
        OF_SHARE_EXCLUSIVE = 0x00000010,
        OF_SHARE_DENY_WRITE = 0x00000020,
        OF_SHARE_DENY_READ = 0x00000030,
        OF_SHARE_DENY_NONE = 0x00000040,
        OF_PARSE = 0x00000100,
        OF_DELETE = 0x00000200,
        OF_VERIFY = 0x00000400,
        OF_CANCEL = 0x00000800,
        OF_CREATE = 0x00001000,
        OF_PROMPT = 0x00002000,
        OF_EXIST = 0x00004000,
        OF_REOPEN = 0x00008000,
        OFS_MAXPATHNAME = 128,
        OR_INVALID_OXID = 1910,
        OR_INVALID_OID = 1911,
        OR_INVALID_SET = 1912,
        OLE_E_OLEVERB = unchecked((int)0x80040000),
        OLE_E_ADVF = unchecked((int)0x80040001),
        OLE_E_ENUM_NOMORE = unchecked((int)0x80040002),
        OLE_E_ADVISENOTSUPPORTED = unchecked((int)0x80040003),
        OLE_E_NOCONNECTION = unchecked((int)0x80040004),
        OLE_E_NOTRUNNING = unchecked((int)0x80040005),
        OLE_E_NOCACHE = unchecked((int)0x80040006),
        OLE_E_BLANK = unchecked((int)0x80040007),
        OLE_E_CLASSDIFF = unchecked((int)0x80040008),
        OLE_E_CANT_GETMONIKER = unchecked((int)0x80040009),
        OLE_E_CANT_BINDTOSOURCE = unchecked((int)0x8004000A),
        OLE_E_STATIC = unchecked((int)0x8004000B),
        OLE_E_PROMPTSAVECANCELLED = unchecked((int)0x8004000C),
        OLE_E_INVALIDRECT = unchecked((int)0x8004000D),
        OLE_E_WRONGCOMPOBJ = unchecked((int)0x8004000E),
        OLE_E_INVALIDHWND = unchecked((int)0x8004000F),
        OLE_E_NOT_INPLACEACTIVE = unchecked((int)0x80040010),
        OLE_E_CANTCONVERT = unchecked((int)0x80040011),
        OLE_E_NOSTORAGE = unchecked((int)0x80040012),
        OLECMDERR_E_NOTSUPPORTED = unchecked((int)0x80040100),
        OLECMDERR_E_DISABLED  = unchecked((int)0x80040101),
        OLECMDERR_E_NOHELP  = unchecked((int)0x80040102),
        OLECMDERR_E_CANCELED  = unchecked((int)0x80040103),
        OLECMDERR_E_UNKNOWNGROUP  = unchecked((int)0x80040104),
        OLEMISC_RECOMPOSEONRESIZE = 0x00000001,
        OLEMISC_ONLYICONIC = 0x00000002,
        OLEMISC_INSERTNOTREPLACE = 0x00000004,
        OLEMISC_STATIC = 0x00000008,
        OLEMISC_CANTLINKINSIDE = 0x00000010,
        OLEMISC_CANLINKBYOLE1 = 0x00000020,
        OLEMISC_ISLINKOBJECT = 0x00000040,
        OLEMISC_INSIDEOUT = 0x00000080,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x0000100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x00000200,
        OLEMISC_INVISIBLEATRUNTIME = 0x00000400,
        OLEMISC_ALWAYSRUN = 0x00000800,
        OLEMISC_ACTSLIKEBUTTON = 0x00001000,
        OLEMISC_ACTSLIKELABEL = 0x00002000,
        OLEMISC_NOUIACTIVATE = 0x00004000,
        OLEMISC_ALIGNABLE = 0x00008000,
        OLEMISC_SIMPLEFRAME = 0x00010000,
        OLEMISC_SETCLIENTSITEFIRST = 0x00020000,
        OLEMISC_IMEMODE = 0x00040000,
        OLEOBJ_E_FIRST = unchecked((int)0x80040180),
        OLEOBJ_E_LAST = unchecked((int)0x8004018F),
        OLEOBJ_S_FIRST = 0x00040180,
        OLEOBJ_S_LAST = 0x0004018F,
        OLEOBJ_E_NOVERBS = unchecked((int)0x80040180),
        OLEOBJ_E_INVALIDVERB = unchecked((int)0x80040181),
        OLE_S_USEREG = 0x00040000,
        OLE_S_STATIC = 0x00040001,
        OLE_S_MAC_CLIPFORMAT = 0x00040002,
        OLEOBJ_S_INVALIDVERB = 0x00040180,
        OLEOBJ_S_CANNOT_DOVERB_NOW = 0x00040181,
        OLEOBJ_S_INVALIDHWND = 0x00040182,
        OPENCHANNEL = 4110,
        OBJ_PEN = 1,
        OBJ_BRUSH = 2,
        OBJ_DC = 3,
        OBJ_METADC = 4,
        OBJ_PAL = 5,
        OBJ_FONT = 6,
        OBJ_BITMAP = 7,
        OBJ_REGION = 8,
        OBJ_METAFILE = 9,
        OBJ_MEMDC = 10,
        OBJ_EXTPEN = 11,
        OBJ_ENHMETADC = 12,
        OBJ_ENHMETAFILE = 13,
        OUT_DEFAULT_PRECIS = 0,
        OUT_STRING_PRECIS = 1,
        OUT_CHARACTER_PRECIS = 2,
        OUT_STROKE_PRECIS = 3,
        OUT_TT_PRECIS = 4,
        OUT_DEVICE_PRECIS = 5,
        OUT_RASTER_PRECIS = 6,
        OUT_TT_ONLY_PRECIS = 7,
        OUT_OUTLINE_PRECIS = 8,
        OUT_SCREEN_OUTLINE_PRECIS = 9,
        OEM_CHARSET = 255,
        OPAQUE = 2,
        OEM_FIXED_FONT = 10,
        OBJECT_INHERIT_ACE = (0x1),
        OWNER_SECURITY_INFORMATION = (0x00000001),
        ODT_MENU = 1,
        ODT_LISTBOX = 2,
        ODT_COMBOBOX = 3,
        ODT_BUTTON = 4,
        ODT_STATIC = 5,
        ODA_DRAWENTIRE = 0x0001,
        ODA_SELECT = 0x0002,
        ODA_FOCUS = 0x0004,

        ODS_CHECKED = 0x0008,
        ODS_COMBOBOXEDIT = 0x1000,
        ODS_DEFAULT = 0x0020,
        ODS_DISABLED = 0x0004,
        ODS_FOCUS = 0x0010,
        ODS_GRAYED = 0x0002,
        ODS_HOTLIGHT       = 0x0040,
        ODS_INACTIVE       = 0x0080,
        ODS_NOACCEL        = 0x0100,
        ODS_NOFOCUSRECT    = 0x0200,
        ODS_SELECTED = 0x0001,

        OBM_CLOSE = 32754,
        OBM_UPARROW = 32753,
        OBM_DNARROW = 32752,
        OBM_RGARROW = 32751,
        OBM_LFARROW = 32750,
        OBM_REDUCE = 32749,
        OBM_ZOOM = 32748,
        OBM_RESTORE = 32747,
        OBM_REDUCED = 32746,
        OBM_ZOOMD = 32745,
        OBM_RESTORED = 32744,
        OBM_UPARROWD = 32743,
        OBM_DNARROWD = 32742,
        OBM_RGARROWD = 32741,
        OBM_LFARROWD = 32740,
        OBM_MNARROW = 32739,
        OBM_COMBO = 32738,
        OBM_UPARROWI = 32737,
        OBM_DNARROWI = 32736,
        OBM_RGARROWI = 32735,
        OBM_LFARROWI = 32734,
        OBM_OLD_CLOSE = 32767,
        OBM_SIZE = 32766,
        OBM_OLD_UPARROW = 32765,
        OBM_OLD_DNARROW = 32764,
        OBM_OLD_RGARROW = 32763,
        OBM_OLD_LFARROW = 32762,
        OBM_BTSIZE = 32761,
        OBM_CHECK = 32760,
        OBM_CHECKBOXES = 32759,
        OBM_BTNCORNERS = 32758,
        OBM_OLD_REDUCE = 32757,
        OBM_OLD_ZOOM = 32756,
        OBM_OLD_RESTORE = 32755,
        OCR_NORMAL = 32512,
        OCR_IBEAM = 32513,
        OCR_WAIT = 32514,
        OCR_CROSS = 32515,
        OCR_UP = 32516,
        OCR_SIZE = 32640,
        OCR_ICON = 32641,
        OCR_SIZENWSE = 32642,
        OCR_SIZENESW = 32643,
        OCR_SIZEWE = 32644,
        OCR_SIZENS = 32645,
        OCR_SIZEALL = 32646,
        OCR_ICOCUR = 32647,
        OCR_NO = 32648,
        OCR_APPSTARTING = 32650,
        OIC_SAMPLE = 32512,
        OIC_HAND = 32513,
        OIC_QUES = 32514,
        OIC_BANG = 32515,
        OIC_NOTE = 32516,
        OIC_WINLOGO = 32517,
        OIC_WARNING = 32515,
        OIC_ERROR = 32513,
        OIC_INFORMATION = 32516,
        ORD_LANGDRIVER = 1,
        ODT_HEADER = 100,
        ODT_TAB = 101,
        ODT_LISTVIEW = 102,
        OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2;


        public const int PDERR_PRINTERCODES = 0x1000,
        PDERR_SETUPFAILURE = 0x1001,
        PDERR_PARSEFAILURE = 0x1002,
        PDERR_RETDEFFAILURE = 0x1003,
        PDERR_LOADDRVFAILURE = 0x1004,
        PDERR_GETDEVMODEFAIL = 0x1005,
        PDERR_INITFAILURE = 0x1006,
        PDERR_NODEVICES = 0x1007,
        PDERR_NODEFAULTPRN = 0x1008,
        PDERR_DNDMMISMATCH = 0x1009,
        PDERR_CREATEICFAILURE = 0x100A,
        PDERR_PRINTERNOTFOUND = 0x100B,
        PDERR_DEFAULTDIFFERENT = 0x100C,
        PRINTER_FONTTYPE = 0x4000,
        PD_ALLPAGES = 0x00000000,
        PD_SELECTION = 0x00000001,
        PD_PAGENUMS = 0x00000002,
        PD_CURRENTPAGE = 0x00400000,
        PD_NOSELECTION = 0x00000004,
        PD_NOPAGENUMS = 0x00000008,
        PD_NOCURRENTPAGE = 0x00800000,
        PD_COLLATE = 0x00000010,
        PD_PRINTTOFILE = 0x00000020,
        PD_PRINTSETUP = 0x00000040,
        PD_NOWARNING = 0x00000080,
        PD_RETURNDC = 0x00000100,
        PD_RETURNIC = 0x00000200,
        PD_RETURNDEFAULT = 0x00000400,
        PD_SHOWHELP = 0x00000800,
        PD_ENABLEPRINTHOOK = 0x00001000,
        PD_ENABLESETUPHOOK = 0x00002000,
        PD_ENABLEPRINTTEMPLATE = 0x00004000,
        PD_ENABLESETUPTEMPLATE = 0x00008000,
        PD_ENABLEPRINTTEMPLATEHANDLE = 0x00010000,
        PD_ENABLESETUPTEMPLATEHANDLE = 0x00020000,
        PD_USEDEVMODECOPIES = 0x00040000,
        PD_USEDEVMODECOPIESANDCOLLATE = 0x00040000,
        PD_DISABLEPRINTTOFILE = 0x00080000,
        PD_HIDEPRINTTOFILE = 0x00100000,
        PD_NONETWORKBUTTON = 0x00200000,
        PSD_DEFAULTMINMARGINS = 0x00000000,
        PSD_INWININIINTLMEASURE = 0x00000000,
        PSD_MINMARGINS = 0x00000001,
        PSD_MARGINS = 0x00000002,
        PSD_INTHOUSANDTHSOFINCHES = 0x00000004,
        PSD_INHUNDREDTHSOFMILLIMETERS = 0x00000008,
        PSD_DISABLEMARGINS = 0x00000010,
        PSD_DISABLEPRINTER = 0x00000020,
        PSD_NOWARNING = 0x00000080,
        PSD_DISABLEORIENTATION = 0x00000100,
        PSD_RETURNDEFAULT = 0x00000400,
        PSD_DISABLEPAPER = 0x00000200,
        PSD_SHOWHELP = 0x00000800,
        PSD_ENABLEPAGESETUPHOOK = 0x00002000,
        PSD_ENABLEPAGESETUPTEMPLATE = 0x00008000,
        PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x00020000,
        PSD_ENABLEPAGEPAINTHOOK = 0x00040000,
        PSD_DISABLEPAGEPAINTING = 0x00080000,
        PSD_NONETWORKBUTTON = 0x00200000,
        psh1 = 0x0400,
        psh2 = 0x0401,
        psh3 = 0x0402,
        psh4 = 0x0403,
        psh5 = 0x0404,
        psh6 = 0x0405,
        psh7 = 0x0406,
        psh8 = 0x0407,
        psh9 = 0x0408,
        psh10 = 0x0409,
        psh11 = 0x040a,
        psh12 = 0x040b,
        psh13 = 0x040c,
        psh14 = 0x040d,
        psh15 = 0x040e,
        pshHelp = 0x040e,
        psh16 = 0x040f,
        PRINTDLGORD = 1538,
        PRNSETUPDLGORD = 1539,
        PAGESETUPDLGORD = 1546,
        PARAMFLAG_NONE = (0),
        PARAMFLAG_FIN = (0x1),
        PARAMFLAG_FOUT = (0x2),
        PARAMFLAG_FLCID = (0x4),
        PARAMFLAG_FRETVAL = (unchecked((int)0x8)),
        PARAMFLAG_FOPT = (0x10),
        PARAMFLAG_FHASDEFAULT = (0x20),
        PROPSETFLAG_DEFAULT = (0),
        PROPSETFLAG_NONSIMPLE = (1),
        PROPSETFLAG_ANSI = (2),
        PID_DICTIONARY = (0),
        PID_CODEPAGE = (0x1),
        PID_FIRST_USABLE = (0x2),
        PID_FIRST_NAME_DEFAULT = (0xfff),
        PID_LOCALE = (unchecked((int)0x80000000)),
        PID_MODIFY_TIME = (unchecked((int)0x80000001)),
        PID_SECURITY = (unchecked((int)0x80000002)),
        PID_ILLEGAL = (unchecked((int)0xFfffffff)),
        PIDSI_TITLE = 0x00000002,
        PIDSI_SUBJECT = 0x00000003,
        PIDSI_AUTHOR = 0x00000004,
        PIDSI_KEYWORDS = 0x00000005,
        PIDSI_COMMENTS = 0x00000006,
        PIDSI_TEMPLATE = 0x00000007,
        PIDSI_LASTAUTHOR = 0x00000008,
        PIDSI_REVNUMBER = 0x00000009,
        PIDSI_EDITTIME = 0x0000000a,
        PIDSI_LASTPRINTED = 0x0000000b,
        PIDSI_CREATE_DTM = 0x0000000c,
        PIDSI_LASTSAVE_DTM = 0x0000000d,
        PIDSI_PAGECOUNT = 0x0000000e,
        PIDSI_WORDCOUNT = 0x0000000f,
        PIDSI_CHARCOUNT = 0x00000010,
        PIDSI_THUMBNAIL = 0x00000011,
        PIDSI_APPNAME = 0x00000012,
        PIDSI_DOC_SECURITY = 0x00000013,
        PRSPEC_INVALID = (unchecked((int)0xFfffffff)),
        PRSPEC_LPWSTR = (0),
        PRSPEC_PROPID = (1),
        PROPSETHDR_OSVERSION_UNKNOWN = unchecked((int)0xFFFFFFFF),
        PSP_DEFAULT = 0x0000,
        PSP_DLGINDIRECT = 0x0001,
        PSP_USEHICON = 0x0002,
        PSP_USEICONID = 0x0004,
        PSP_USETITLE = 0x0008,
        PSP_RTLREADING = 0x0010,
        PSP_HASHELP = 0x0020,
        PSP_USEREFPARENT = 0x0040,
        PSP_USECALLBACK = 0x0080,
        PSPCB_RELEASE = 1,
        PSPCB_CREATE = 2,
        PSH_DEFAULT = 0x0000,
        PSH_PROPTITLE = 0x0001,
        PSH_USEHICON = 0x0002,
        PSH_USEICONID = 0x0004,
        PSH_PROPSHEETPAGE = 0x0008,
        PSH_WIZARD = 0x0020,
        PSH_USEPSTARTPAGE = 0x0040,
        PSH_NOAPPLYNOW = 0x0080,
        PSH_USECALLBACK = 0x0100,
        PSH_HASHELP = 0x0200,
        PSH_MODELESS = 0x0400,
        PSH_RTLREADING = 0x0800,
        PSCB_INITIALIZED = 1,
        PSCB_PRECREATE = 2,
        PSN_FIRST = (0-200),
        PSN_LAST = (0-299),
        PSN_SETACTIVE = ((0-200)-0),
        PSN_KILLACTIVE = ((0-200)-1),
        PSN_APPLY = ((0-200)-2),
        PSN_RESET = ((0-200)-3),
        PSN_HELP = ((0-200)-5),
        PSN_WIZBACK = ((0-200)-6),
        PSN_WIZNEXT = ((0-200)-7),
        PSN_WIZFINISH = ((0-200)-8),
        PSN_QUERYCANCEL = ((0-200)-9),
        PSNRET_NOERROR = 0,
        PSNRET_INVALID = 1,
        PSNRET_INVALID_NOCHANGEPAGE = 2,
        PSWIZB_BACK = 0x00000001,
        PSWIZB_NEXT = 0x00000002,
        PSWIZB_FINISH = 0x00000004,
        PSWIZB_DISABLEDFINISH = 0x00000008,
        PSBTN_BACK = 0,
        PSBTN_NEXT = 1,
        PSBTN_FINISH = 2,
        PSBTN_OK = 3,
        PSBTN_APPLYNOW = 4,
        PSBTN_CANCEL = 5,
        PSBTN_HELP = 6,
        PSBTN_MAX = 6,
        PROP_SM_CXDLG = 212,
        PROP_SM_CYDLG = 188,
        PROP_MED_CXDLG = 227,
        PROP_MED_CYDLG = 215,
        PROP_LG_CXDLG = 252,
        PROP_LG_CYDLG = 218,
        PO_DELETE = 0x0013,
        PO_RENAME = 0x0014,
        PO_PORTCHANGE = 0x0020,
        PO_REN_PORT = 0x0034,
        PROGRESS_CONTINUE = 0,
        PROGRESS_CANCEL = 1,
        PROGRESS_STOP = 2,
        PROGRESS_QUIET = 3,
        PIPE_ACCESS_INBOUND = 0x00000001,
        PIPE_ACCESS_OUTBOUND = 0x00000002,
        PIPE_ACCESS_DUPLEX = 0x00000003,
        PIPE_CLIENT_END = 0x00000000,
        PIPE_SERVER_END = 0x00000001,
        PIPE_WAIT = 0x00000000,
        PIPE_NOWAIT = 0x00000001,
        PIPE_READMODE_BYTE = 0x00000000,
        PIPE_READMODE_MESSAGE = 0x00000002,
        PIPE_TYPE_BYTE = 0x00000000,
        PIPE_TYPE_MESSAGE = 0x00000004,
        PIPE_UNLIMITED_INSTANCES = 255,
        PST_UNSPECIFIED = (0x00000000),
        PST_RS232 = (0x00000001),
        PST_PARALLELPORT = (0x00000002),
        PST_RS422 = (0x00000003),
        PST_RS423 = (0x00000004),
        PST_RS449 = (0x00000005),
        PST_MODEM = (0x00000006),
        PST_FAX = (0x00000021),
        PST_SCANNER = (0x00000022),
        PST_NETWORK_BRIDGE = (0x00000100),
        PST_LAT = (0x00000101),
        PST_TCPIP_TELNET = (0x00000102),
        PST_X25 = (0x00000103),
        PCF_DTRDSR = (0x0001),
        PCF_RTSCTS = (0x0002),
        PCF_RLSD = (0x0004),
        PCF_PARITY_CHECK = (0x0008),
        PCF_XONXOFF = (0x0010),
        PCF_SETXCHAR = (0x0020),
        PCF_TOTALTIMEOUTS = (0x0040),
        PCF_INTTIMEOUTS = (0x0080),
        PCF_SPECIALCHARS = (0x0100),
        PCF_16BITMODE = (0x0200),
        PARITY_NONE = (0x0100),
        PARITY_ODD = (0x0200),
        PARITY_EVEN = (0x0400),
        PARITY_MARK = (0x0800),
        PARITY_SPACE = (0x1000),
        PROFILE_USER = 0x10000000,
        PROFILE_KERNEL = 0x20000000,
        PROFILE_SERVER = 0x40000000,
        PURGE_TXABORT = 0x0001,
        PURGE_RXABORT = 0x0002,
        PURGE_TXCLEAR = 0x0004,
        PURGE_RXCLEAR = 0x0008,
        PROCESS_HEAP_REGION = 0x0001,
        PROCESS_HEAP_UNCOMMITTED_RANGE = 0x0002,
        PROCESS_HEAP_ENTRY_BUSY = 0x0004,
        PROCESS_HEAP_ENTRY_MOVEABLE = 0x0010,
        PROCESS_HEAP_ENTRY_DDESHARE = 0x0020,
        PUBLICKEYBLOB = 0x6,
        PRIVATEKEYBLOB = 0x7,
        PKCS5_PADDING = 1,
        PP_ENUMALGS = 1,
        PP_ENUMCONTAINERS = 2,
        PP_IMPTYPE = 3,
        PP_NAME = 4,
        PP_VERSION = 5,
        PP_CONTAINER = 6,
        PP_CLIENT_HWND = 1,
        PROV_RSA_FULL = 1,
        PROV_RSA_SIG = 2,
        PROV_DSS = 3,
        PROV_FORTEZZA = 4,
        PROV_MS_EXCHANGE = 5,
        PROV_SSL = 6,
        PROV_STT_MER = 7,
        PROV_STT_ACQ = 8,
        PROV_STT_BRND = 9,
        PROV_STT_ROOT = 10,
        PROV_STT_ISS = 11,
        PERSIST_E_SIZEDEFINITE = unchecked((int)0x800B0009),
        PERSIST_E_SIZEINDEFINITE = unchecked((int)0x800B000A),
        PERSIST_E_NOTSELFSIZING = unchecked((int)0x800B000B),
        POLYFILL_LAST = 2,
        PASSTHROUGH = 19,
        POSTSCRIPT_DATA = 37,
        POSTSCRIPT_IGNORE = 38,
        POSTSCRIPT_PASSTHROUGH = 4115,
        PR_JOBSTATUS = 0x0000,
        PROOF_QUALITY = 2,
        PANOSE_COUNT = 10,
        PAN_FAMILYTYPE_INDEX = 0,
        PAN_SERIFSTYLE_INDEX = 1,
        PAN_WEIGHT_INDEX = 2,
        PAN_PROPORTION_INDEX = 3,
        PAN_CONTRAST_INDEX = 4,
        PAN_STROKEVARIATION_INDEX = 5,
        PAN_ARMSTYLE_INDEX = 6,
        PAN_LETTERFORM_INDEX = 7,
        PAN_MIDLINE_INDEX = 8,
        PAN_XHEIGHT_INDEX = 9,
        PAN_CULTURE_LATIN = 0,
        PAN_ANY = 0,
        PAN_NO_FIT = 1,
        PAN_FAMILY_TEXT_DISPLAY = 2,
        PAN_FAMILY_SCRIPT = 3,
        PAN_FAMILY_DECORATIVE = 4,
        PAN_FAMILY_PICTORIAL = 5,
        PAN_SERIF_COVE = 2,
        PAN_SERIF_OBTUSE_COVE = 3,
        PAN_SERIF_SQUARE_COVE = 4,
        PAN_SERIF_OBTUSE_SQUARE_COVE = 5,
        PAN_SERIF_SQUARE = 6,
        PAN_SERIF_THIN = 7,
        PAN_SERIF_BONE = 8,
        PAN_SERIF_EXAGGERATED = 9,
        PAN_SERIF_TRIANGLE = 10,
        PAN_SERIF_NORMAL_SANS = 11,
        PAN_SERIF_OBTUSE_SANS = 12,
        PAN_SERIF_PERP_SANS = 13,
        PAN_SERIF_FLARED = 14,
        PAN_SERIF_ROUNDED = 15,
        PAN_WEIGHT_VERY_LIGHT = 2,
        PAN_WEIGHT_LIGHT = 3,
        PAN_WEIGHT_THIN = 4,
        PAN_WEIGHT_BOOK = 5,
        PAN_WEIGHT_MEDIUM = 6,
        PAN_WEIGHT_DEMI = 7,
        PAN_WEIGHT_BOLD = 8,
        PAN_WEIGHT_HEAVY = 9,
        PAN_WEIGHT_BLACK = 10,
        PAN_WEIGHT_NORD = 11,
        PAN_PROP_OLD_STYLE = 2,
        PAN_PROP_MODERN = 3,
        PAN_PROP_EVEN_WIDTH = 4,
        PAN_PROP_EXPANDED = 5,
        PAN_PROP_CONDENSED = 6,
        PAN_PROP_VERY_EXPANDED = 7,
        PAN_PROP_VERY_CONDENSED = 8,
        PAN_PROP_MONOSPACED = 9,
        PAN_CONTRAST_NONE = 2,
        PAN_CONTRAST_VERY_LOW = 3,
        PAN_CONTRAST_LOW = 4,
        PAN_CONTRAST_MEDIUM_LOW = 5,
        PAN_CONTRAST_MEDIUM = 6,
        PAN_CONTRAST_MEDIUM_HIGH = 7,
        PAN_CONTRAST_HIGH = 8,
        PAN_CONTRAST_VERY_HIGH = 9,
        PAN_STROKE_GRADUAL_DIAG = 2,
        PAN_STROKE_GRADUAL_TRAN = 3,
        PAN_STROKE_GRADUAL_VERT = 4,
        PAN_STROKE_GRADUAL_HORZ = 5,
        PAN_STROKE_RAPID_VERT = 6,
        PAN_STROKE_RAPID_HORZ = 7,
        PAN_STROKE_INSTANT_VERT = 8,
        PAN_STRAIGHT_ARMS_HORZ = 2,
        PAN_STRAIGHT_ARMS_WEDGE = 3,
        PAN_STRAIGHT_ARMS_VERT = 4,
        PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5,
        PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6,
        PAN_BENT_ARMS_HORZ = 7,
        PAN_BENT_ARMS_WEDGE = 8,
        PAN_BENT_ARMS_VERT = 9,
        PAN_BENT_ARMS_SINGLE_SERIF = 10,
        PAN_BENT_ARMS_DOUBLE_SERIF = 11,
        PAN_LETT_NORMAL_CONTACT = 2,
        PAN_LETT_NORMAL_WEIGHTED = 3,
        PAN_LETT_NORMAL_BOXED = 4,
        PAN_LETT_NORMAL_FLATTENED = 5,
        PAN_LETT_NORMAL_ROUNDED = 6,
        PAN_LETT_NORMAL_OFF_CENTER = 7,
        PAN_LETT_NORMAL_SQUARE = 8,
        PAN_LETT_OBLIQUE_CONTACT = 9,
        PAN_LETT_OBLIQUE_WEIGHTED = 10,
        PAN_LETT_OBLIQUE_BOXED = 11,
        PAN_LETT_OBLIQUE_FLATTENED = 12,
        PAN_LETT_OBLIQUE_ROUNDED = 13,
        PAN_LETT_OBLIQUE_OFF_CENTER = 14,
        PAN_LETT_OBLIQUE_SQUARE = 15,
        PAN_MIDLINE_STANDARD_TRIMMED = 2,
        PAN_MIDLINE_STANDARD_POINTED = 3,
        PAN_MIDLINE_STANDARD_SERIFED = 4,
        PAN_MIDLINE_HIGH_TRIMMED = 5,
        PAN_MIDLINE_HIGH_POINTED = 6,
        PAN_MIDLINE_HIGH_SERIFED = 7,
        PAN_MIDLINE_LOW_TRIMMED = 11,
        PAN_MIDLINE_LOW_POINTED = 12,
        PAN_MIDLINE_LOW_SERIFED = 13,
        PAN_XHEIGHT_DUCKING_SMALL = 5,
        PAN_XHEIGHT_DUCKING_STD = 6,
        PAN_XHEIGHT_DUCKING_LARGE = 7,
        PC_RESERVED = 0x01,
        PC_EXPLICIT = 0x02,
        PC_NOCOLLAPSE = 0x04,
        PT_CLOSEFIGURE = 0x01,
        PT_LINETO = 0x02,
        PT_BEZIERTO = 0x04,
        PT_MOVETO = 0x06,
        PS_SOLID = 0,
        PS_DASH = 1,
        PS_DOT = 2,
        PS_DASHDOT = 3,
        PS_DASHDOTDOT = 4,
        PS_NULL = 5,
        PS_INSIDEFRAME = 6,
        PS_USERSTYLE = 7,
        PS_ALTERNATE = 8,
        PS_STYLE_MASK = 0x0000000F,
        PS_ENDCAP_ROUND = 0x00000000,
        PS_ENDCAP_SQUARE = 0x00000100,
        PS_ENDCAP_FLAT = 0x00000200,
        PS_ENDCAP_MASK = 0x00000F00,
        PS_JOIN_ROUND = 0x00000000,
        PS_JOIN_BEVEL = 0x00001000,
        PS_JOIN_MITER = 0x00002000,
        PS_JOIN_MASK = 0x0000F000,
        PS_COSMETIC = 0x00000000,
        PS_GEOMETRIC = 0x00010000,
        PS_TYPE_MASK = 0x000F0000,
        PLANES = 14,
        PDEVICESIZE = 26,
        POLYGONALCAPS = 32,
        PHYSICALWIDTH = 110,
        PHYSICALHEIGHT = 111,
        PHYSICALOFFSETX = 112,
        PHYSICALOFFSETY = 113,
        PC_NONE = 0,
        PC_POLYGON = 1,
        PC_RECTANGLE = 2,
        PC_WINDPOLYGON = 4,
        PC_TRAPEZOID = 4,
        PC_SCANLINE = 8,
        PC_WIDE = 16,
        PC_STYLED = 32,
        PC_WIDESTYLED = 64,
        PC_INTERIORS = 128,
        PC_POLYPOLYGON = 256,
        PC_PATHS = 512,
        PFD_TYPE_RGBA = 0,
        PFD_TYPE_COLORINDEX = 1,
        PFD_MAIN_PLANE = 0,
        PFD_OVERLAY_PLANE = 1,
        PFD_UNDERLAY_PLANE = (-1),
        PFD_DOUBLEBUFFER = 0x00000001,
        PFD_STEREO = 0x00000002,
        PFD_DRAW_TO_WINDOW = 0x00000004,
        PFD_DRAW_TO_BITMAP = 0x00000008,
        PFD_SUPPORT_GDI = 0x00000010,
        PFD_SUPPORT_OPENGL = 0x00000020,
        PFD_GENERIC_FORMAT = 0x00000040,
        PFD_NEED_PALETTE = 0x00000080,
        PFD_NEED_SYSTEM_PALETTE = 0x00000100,
        PFD_SWAP_EXCHANGE = 0x00000200,
        PFD_SWAP_COPY = 0x00000400,
        PFD_SWAP_LAYER_BUFFERS = 0x00000800,
        PFD_GENERIC_ACCELERATED = 0x00001000,
        PFD_DEPTH_DONTCARE = 0x20000000,
        PFD_DOUBLEBUFFER_DONTCARE = 0x40000000,
        PFD_STEREO_DONTCARE = unchecked((int)0x80000000),
        PP_DISPLAYERRORS = 0x01,
        PROCESS_TERMINATE = (0x0001),
        PROCESS_CREATE_THREAD = (0x0002),
        PROCESS_VM_OPERATION = (0x0008),
        PROCESS_VM_READ = (0x0010),
        PROCESS_VM_WRITE = (0x0020),
        PROCESS_DUP_HANDLE = (0x0040),
        PROCESS_CREATE_PROCESS = (0x0080),
        PROCESS_SET_QUOTA = (0x0100),
        PROCESS_SET_INFORMATION = (0x0200),
        PROCESS_QUERY_INFORMATION = (0x0400),
        PROCESSOR_INTEL_386 = 386,
        PROCESSOR_INTEL_486 = 486,
        PROCESSOR_INTEL_PENTIUM = 586,
        PROCESSOR_MIPS_R4000 = 4000,
        PROCESSOR_ALPHA_21064 = 21064,
        PROCESSOR_ARCHITECTURE_INTEL = 0,
        PROCESSOR_ARCHITECTURE_MIPS = 1,
        PROCESSOR_ARCHITECTURE_ALPHA = 2,
        PROCESSOR_ARCHITECTURE_PPC = 3,
        PROCESSOR_ARCHITECTURE_UNKNOWN = 0xFFFF,
        PF_FLOATING_POINT_PRECISION_ERRATA = 0,
        PF_FLOATING_POINT_EMULATED = 1,
        PF_COMPARE_EXCHANGE_DOUBLE = 2,
        PF_MMX_INSTRUCTIONS_AVAILABLE = 3,
        PAGE_NOACCESS = 0x01,
        PAGE_READONLY = 0x02,
        PAGE_READWRITE = 0x04,
        PAGE_WRITECOPY = 0x08,
        PAGE_EXECUTE = 0x10,
        PAGE_EXECUTE_READ = 0x20,
        PAGE_EXECUTE_READWRITE = 0x40,
        PAGE_EXECUTE_WRITECOPY = unchecked((int)0x80),
        PAGE_GUARD = 0x100,
        PAGE_NOCACHE = 0x200,
        PRIVILEGE_SET_ALL_NECESSARY = (1),
        PERF_DATA_VERSION = 1,
        PERF_DATA_REVISION = 1,
        PERF_NO_INSTANCES = -1,
        PERF_SIZE_DWORD = 0x00000000,
        PERF_SIZE_LARGE = 0x00000100,
        PERF_SIZE_ZERO = 0x00000200,
        PERF_SIZE_VARIABLE_LEN = 0x00000300,
        PERF_TYPE_NUMBER = 0x00000000,
        PERF_TYPE_COUNTER = 0x00000400,
        PERF_TYPE_TEXT = 0x00000800,
        PERF_TYPE_ZERO = 0x00000C00,
        PERF_NUMBER_HEX = 0x00000000,
        PERF_NUMBER_DECIMAL = 0x00010000,
        PERF_NUMBER_DEC_1000 = 0x00020000,
        PERF_COUNTER_VALUE = 0x00000000,
        PERF_COUNTER_RATE = 0x00010000,
        PERF_COUNTER_FRACTION = 0x00020000,
        PERF_COUNTER_BASE = 0x00030000,
        PERF_COUNTER_ELAPSED = 0x00040000,
        PERF_COUNTER_QUEUELEN = 0x00050000,
        PERF_COUNTER_HISTOGRAM = 0x00060000,
        PERF_TEXT_UNICODE = 0x00000000,
        PERF_TEXT_ASCII = 0x00010000,
        PERF_TIMER_TICK = 0x00000000,
        PERF_TIMER_100NS = 0x00100000,
        PERF_OBJECT_TIMER = 0x00200000,
        PERF_DELTA_COUNTER = 0x00400000,
        PERF_DELTA_BASE = 0x00800000,
        PERF_INVERSE_COUNTER = 0x01000000,
        PERF_MULTI_COUNTER = 0x02000000,
        PERF_DISPLAY_NO_SUFFIX = 0x00000000,
        PERF_DISPLAY_PER_SEC = 0x10000000,
        PERF_DISPLAY_PERCENT = 0x20000000,
        PERF_DISPLAY_SECONDS = 0x30000000,
        PERF_DISPLAY_NOSHOW = 0x40000000,
        PERF_COUNTER_HISTOGRAM_TYPE = unchecked((int)0x80000000),
        PERF_DETAIL_NOVICE = 100,
        PERF_DETAIL_ADVANCED = 200,
        PERF_DETAIL_EXPERT = 300,
        PERF_DETAIL_WIZARD = 400,
        PERF_NO_UNIQUE_ID = -1,
        PROVIDER_KEEPS_VALUE_LENGTH = 0x1,
        PRINTER_CONTROL_PAUSE = 1,
        PRINTER_CONTROL_RESUME = 2,
        PRINTER_CONTROL_PURGE = 3,
        PRINTER_CONTROL_SET_STATUS = 4,
        PRINTER_STATUS_PAUSED = 0x00000001,
        PRINTER_STATUS_ERROR = 0x00000002,
        PRINTER_STATUS_PENDING_DELETION = 0x00000004,
        PRINTER_STATUS_PAPER_JAM = 0x00000008,
        PRINTER_STATUS_PAPER_OUT = 0x00000010,
        PRINTER_STATUS_MANUAL_FEED = 0x00000020,
        PRINTER_STATUS_PAPER_PROBLEM = 0x00000040,
        PRINTER_STATUS_OFFLINE = 0x00000080,
        PRINTER_STATUS_IO_ACTIVE = 0x00000100,
        PRINTER_STATUS_BUSY = 0x00000200,
        PRINTER_STATUS_PRINTING = 0x00000400,
        PRINTER_STATUS_OUTPUT_BIN_FULL = 0x00000800,
        PRINTER_STATUS_NOT_AVAILABLE = 0x00001000,
        PRINTER_STATUS_WAITING = 0x00002000,
        PRINTER_STATUS_PROCESSING = 0x00004000,
        PRINTER_STATUS_INITIALIZING = 0x00008000,
        PRINTER_STATUS_WARMING_UP = 0x00010000,
        PRINTER_STATUS_TONER_LOW = 0x00020000,
        PRINTER_STATUS_NO_TONER = 0x00040000,
        PRINTER_STATUS_PAGE_PUNT = 0x00080000,
        PRINTER_STATUS_USER_INTERVENTION = 0x00100000,
        PRINTER_STATUS_OUT_OF_MEMORY = 0x00200000,
        PRINTER_STATUS_DOOR_OPEN = 0x00400000,
        PRINTER_STATUS_SERVER_UNKNOWN = 0x00800000,
        PRINTER_STATUS_POWER_SAVE = 0x01000000,
        PRINTER_ATTRIBUTE_QUEUED = 0x00000001,
        PRINTER_ATTRIBUTE_DIRECT = 0x00000002,
        PRINTER_ATTRIBUTE_DEFAULT = 0x00000004,
        PRINTER_ATTRIBUTE_SHARED = 0x00000008,
        PRINTER_ATTRIBUTE_NETWORK = 0x00000010,
        PRINTER_ATTRIBUTE_HIDDEN = 0x00000020,
        PRINTER_ATTRIBUTE_LOCAL = 0x00000040,
        PRINTER_ATTRIBUTE_ENABLE_DEVQ = 0x00000080,
        PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 0x00000100,
        PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 0x00000200,
        PRINTER_ATTRIBUTE_WORK_OFFLINE = 0x00000400,
        PRINTER_ATTRIBUTE_ENABLE_BIDI = 0x00000800,
        PRINTER_ATTRIBUTE_RAW_ONLY = 0x00001000,
        PORT_TYPE_WRITE = 0x0001,
        PORT_TYPE_READ = 0x0002,
        PORT_TYPE_REDIRECTED = 0x0004,
        PORT_TYPE_NET_ATTACHED = 0x0008,
        PORT_STATUS_TYPE_ERROR = 1,
        PORT_STATUS_TYPE_WARNING = 2,
        PORT_STATUS_TYPE_INFO = 3,
        PORT_STATUS_OFFLINE = 1,
        PORT_STATUS_PAPER_JAM = 2,
        PORT_STATUS_PAPER_OUT = 3,
        PORT_STATUS_OUTPUT_BIN_FULL = 4,
        PORT_STATUS_PAPER_PROBLEM = 5,
        PORT_STATUS_NO_TONER = 6,
        PORT_STATUS_DOOR_OPEN = 7,
        PORT_STATUS_USER_INTERVENTION = 8,
        PORT_STATUS_OUT_OF_MEMORY = 9,
        PORT_STATUS_TONER_LOW = 10,
        PORT_STATUS_WARMING_UP = 11,
        PORT_STATUS_POWER_SAVE = 12,
        PRINTER_ENUM_DEFAULT = 0x00000001,
        PRINTER_ENUM_LOCAL = 0x00000002,
        PRINTER_ENUM_CONNECTIONS = 0x00000004,
        PRINTER_ENUM_FAVORITE = 0x00000004,
        PRINTER_ENUM_NAME = 0x00000008,
        PRINTER_ENUM_REMOTE = 0x00000010,
        PRINTER_ENUM_SHARED = 0x00000020,
        PRINTER_ENUM_NETWORK = 0x00000040,
        PRINTER_ENUM_EXPAND = 0x00004000,
        PRINTER_ENUM_CONTAINER = 0x00008000,
        PRINTER_ENUM_ICONMASK = 0x00ff0000,
        PRINTER_ENUM_ICON1 = 0x00010000,
        PRINTER_ENUM_ICON2 = 0x00020000,
        PRINTER_ENUM_ICON3 = 0x00040000,
        PRINTER_ENUM_ICON4 = 0x00080000,
        PRINTER_ENUM_ICON5 = 0x00100000,
        PRINTER_ENUM_ICON6 = 0x00200000,
        PRINTER_ENUM_ICON7 = 0x00400000,
        PRINTER_ENUM_ICON8 = 0x00800000,
        PRINTER_NOTIFY_TYPE = 0x00,
        PRINTER_NOTIFY_FIELD_SERVER_NAME = 0x00,
        PRINTER_NOTIFY_FIELD_PRINTER_NAME = 0x01,
        PRINTER_NOTIFY_FIELD_SHARE_NAME = 0x02,
        PRINTER_NOTIFY_FIELD_PORT_NAME = 0x03,
        PRINTER_NOTIFY_FIELD_DRIVER_NAME = 0x04,
        PRINTER_NOTIFY_FIELD_COMMENT = 0x05,
        PRINTER_NOTIFY_FIELD_LOCATION = 0x06,
        PRINTER_NOTIFY_FIELD_DEVMODE = 0x07,
        PRINTER_NOTIFY_FIELD_SEPFILE = 0x08,
        PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 0x09,
        PRINTER_NOTIFY_FIELD_PARAMETERS = 0x0A,
        PRINTER_NOTIFY_FIELD_DATATYPE = 0x0B,
        PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0x0C,
        PRINTER_NOTIFY_FIELD_ATTRIBUTES = 0x0D,
        PRINTER_NOTIFY_FIELD_PRIORITY = 0x0E,
        PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 0x0F,
        PRINTER_NOTIFY_FIELD_START_TIME = 0x10,
        PRINTER_NOTIFY_FIELD_UNTIL_TIME = 0x11,
        PRINTER_NOTIFY_FIELD_STATUS = 0x12,
        PRINTER_NOTIFY_FIELD_STATUS_STRING = 0x13,
        PRINTER_NOTIFY_FIELD_CJOBS = 0x14,
        PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 0x15,
        PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 0x16,
        PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 0x17,
        PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 0x18,
        PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 0x19,
        PRINTER_NOTIFY_OPTIONS_REFRESH = 0x01,
        PRINTER_NOTIFY_INFO_DISCARDED = 0x01,
        PRINTER_CHANGE_ADD_PRINTER = 0x00000001,
        PRINTER_CHANGE_SET_PRINTER = 0x00000002,
        PRINTER_CHANGE_DELETE_PRINTER = 0x00000004,
        PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 0x00000008,
        PRINTER_CHANGE_PRINTER = 0x000000FF,
        PRINTER_CHANGE_ADD_JOB = 0x00000100,
        PRINTER_CHANGE_SET_JOB = 0x00000200,
        PRINTER_CHANGE_DELETE_JOB = 0x00000400,
        PRINTER_CHANGE_WRITE_JOB = 0x00000800,
        PRINTER_CHANGE_JOB = 0x0000FF00,
        PRINTER_CHANGE_ADD_FORM = 0x00010000,
        PRINTER_CHANGE_SET_FORM = 0x00020000,
        PRINTER_CHANGE_DELETE_FORM = 0x00040000,
        PRINTER_CHANGE_FORM = 0x00070000,
        PRINTER_CHANGE_ADD_PORT = 0x00100000,
        PRINTER_CHANGE_CONFIGURE_PORT = 0x00200000,
        PRINTER_CHANGE_DELETE_PORT = 0x00400000,
        PRINTER_CHANGE_PORT = 0x00700000,
        PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 0x01000000,
        PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 0x04000000,
        PRINTER_CHANGE_PRINT_PROCESSOR = 0x07000000,
        PRINTER_CHANGE_ADD_PRINTER_DRIVER = 0x10000000,
        PRINTER_CHANGE_SET_PRINTER_DRIVER = 0x20000000,
        PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 0x40000000,
        PRINTER_CHANGE_PRINTER_DRIVER = 0x70000000,
        PRINTER_CHANGE_TIMEOUT = unchecked((int)0x80000000),
        PRINTER_CHANGE_ALL = 0x7777FFFF,
        PRINTER_ERROR_INFORMATION = unchecked((int)0x80000000),
        PRINTER_ERROR_WARNING = 0x40000000,
        PRINTER_ERROR_SEVERE = 0x20000000,
        PRINTER_ERROR_OUTOFPAPER = 0x00000001,
        PRINTER_ERROR_JAM = 0x00000002,
        PRINTER_ERROR_OUTOFTONER = 0x00000004,
        PRINTER_ACCESS_ADMINISTER = 0x00000004,
        PRINTER_ACCESS_USE = 0x00000008,
        PWR_OK = 1,
        PWR_FAIL = (-1),
        PWR_SUSPENDREQUEST = 1,
        PWR_SUSPENDRESUME = 2,
        PWR_CRITICALRESUME = 3,
        PRF_CHECKVISIBLE = 0x00000001,
        PRF_NONCLIENT = 0x00000002,
        PRF_CLIENT = 0x00000004,
        PRF_ERASEBKGND = 0x00000008,
        PRF_CHILDREN = 0x00000010,
        PRF_OWNED = 0x00000020,
        PM_NOREMOVE = 0x0000,
        PM_REMOVE = 0x0001,
        PM_NOYIELD = 0x0002,
        PSM_PAGEINFO = (0x0400+100),
        PSM_SHEETINFO = (0x0400+101),
        PSI_SETACTIVE = 0x0001,
        PSI_KILLACTIVE = 0x0002,
        PSI_APPLY = 0x0003,
        PSI_RESET = 0x0004,
        PSI_HASHELP = 0x0005,
        PSI_HELP = 0x0006,
        PSI_CHANGED = 0x0001,
        PSI_GUISTART = 0x0002,
        PSI_REBOOT = 0x0003,
        PSI_GETSIBLINGS = 0x0004,
        PBS_SMOOTH = 0x01,
        PBS_VERTICAL = 0x04,
        PBM_SETRANGE = (0x0400+1),
        PBM_SETPOS = (0x0400+2),
        PBM_DELTAPOS = (0x0400+3),
        PBM_SETSTEP = (0x0400+4),
        PBM_STEPIT = (0x0400+5),
        PBM_SETRANGE32 = (0x0400+6),
        PBM_GETRANGE = (0x0400+7),
        PBM_GETPOS = (0x0400+8),
        PSM_SETCURSEL = (0x0400+101),
        PSM_REMOVEPAGE = (0x0400+102),
        PSM_ADDPAGE = (0x0400+103),
        PSM_CHANGED = (0x0400+104),
        PSM_RESTARTWINDOWS = (0x0400+105),
        PSM_REBOOTSYSTEM = (0x0400+106),
        PSM_CANCELTOCLOSE = (0x0400+107),
        PSM_QUERYSIBLINGS = (0x0400+108),
        PSM_UNCHANGED = (0x0400+109),
        PSM_APPLY = (0x0400+110),
        PSM_SETTITLEA = (0x0400+111),
        PSM_SETTITLEW = (0x0400+120),
        PSM_SETWIZBUTTONS = (0x0400+112),
        PSM_PRESSBUTTON = (0x0400+113),
        PSM_SETCURSELID = (0x0400+114),
        PSM_SETFINISHTEXTA = (0x0400+115),
        PSM_SETFINISHTEXTW = (0x0400+121),
        PSM_GETTABCONTROL = (0x0400+116),
        PSM_ISDIALOGMESSAGE = (0x0400+117),
        PSM_GETCURRENTPAGEHWND = (0x0400+118),
        PATCOPY = 0x00F00021,
        PATPAINT = 0x00FB0A09,
        PATINVERT = 0x005A0049,
        PGN_FIRST = (0-900),
        PGN_LAST = (0-950);


        public const int QID_SYNC = unchecked((int)0xFFFFFFFF),
        QUERYROPSUPPORT = 40,
        QUERYESCSUPPORT = 8,
        QUERYDIBSUPPORT = 3073,
        QDI_SETDIBITS = 1,
        QDI_GETDIBITS = 2,
        QDI_DIBTOSCREEN = 4,
        QDI_STRETCHDIB = 8,
        QS_KEY = 0x0001,
        QS_MOUSEMOVE = 0x0002,
        QS_MOUSEBUTTON = 0x0004,
        QS_POSTMESSAGE = 0x0008,
        QS_TIMER = 0x0010,
        QS_PAINT = 0x0020,
        QS_SENDMESSAGE = 0x0040,
        QS_HOTKEY = 0x0080,
        QS_ALLPOSTMESSAGE = 0x0100,
        QS_MOUSE = QS_MOUSEMOVE | QS_MOUSEBUTTON,
        QS_INPUT = QS_MOUSE | QS_KEY,
        QS_ALLEVENTS = QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY,
        QS_ALLINPUT = QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY | QS_SENDMESSAGE;
        
        public const int REGULAR_FONTTYPE = 0x0400,
        rad1 = 0x0420,
        rad2 = 0x0421,
        rad3 = 0x0422,
        rad4 = 0x0423,
        rad5 = 0x0424,
        rad6 = 0x0425,
        rad7 = 0x0426,
        rad8 = 0x0427,
        rad9 = 0x0428,
        rad10 = 0x0429,
        rad11 = 0x042a,
        rad12 = 0x042b,
        rad13 = 0x042c,
        rad14 = 0x042d,
        rad15 = 0x042e,
        rad16 = 0x042f,
        rct1 = 0x0438,
        rct2 = 0x0439,
        rct3 = 0x043a,
        rct4 = 0x043b,
        REPLACEDLGORD = 1541,
        REGISTERING = 0x00,
        REGISTERED = 0x04,
        RPC_C_BINDING_INFINITE_TIMEOUT = 10,
        RPC_C_BINDING_MIN_TIMEOUT = 0,
        RPC_C_BINDING_DEFAULT_TIMEOUT = 5,
        RPC_C_BINDING_MAX_TIMEOUT = 9,
        RPC_C_CANCEL_INFINITE_TIMEOUT = -1,
        RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234,
        RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10,
        RPC_C_BIND_TO_ALL_NICS = 1,
        RPC_C_USE_INTERNET_PORT = 1,
        RPC_C_USE_INTRANET_PORT = 2,
        RPC_C_STATS_CALLS_IN = 0,
        RPC_C_STATS_CALLS_OUT = 1,
        RPC_C_STATS_PKTS_IN = 2,
        RPC_C_STATS_PKTS_OUT = 3,
        RPC_C_AUTHN_LEVEL_DEFAULT = 0,
        RPC_C_AUTHN_LEVEL_NONE = 1,
        RPC_C_AUTHN_LEVEL_CONNECT = 2,
        RPC_C_AUTHN_LEVEL_CALL = 3,
        RPC_C_AUTHN_LEVEL_PKT = 4,
        RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5,
        RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6,
        RPC_C_IMP_LEVEL_ANONYMOUS = 1,
        RPC_C_IMP_LEVEL_IDENTIFY = 2,
        RPC_C_IMP_LEVEL_IMPERSONATE = 3,
        RPC_C_IMP_LEVEL_DELEGATE = 4,
        RPC_C_QOS_IDENTITY_STATIC = 0,
        RPC_C_QOS_IDENTITY_DYNAMIC = 1,
        RPC_C_QOS_CAPABILITIES_DEFAULT = 0,
        RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1,
        RPC_C_PROTECT_LEVEL_DEFAULT = (0),
        RPC_C_PROTECT_LEVEL_NONE = (1),
        RPC_C_PROTECT_LEVEL_CONNECT = (2),
        RPC_C_PROTECT_LEVEL_CALL = (3),
        RPC_C_PROTECT_LEVEL_PKT = (4),
        RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = (5),
        RPC_C_PROTECT_LEVEL_PKT_PRIVACY = (6),
        RPC_C_AUTHN_NONE = 0,
        RPC_C_AUTHN_DCE_PRIVATE = 1,
        RPC_C_AUTHN_DCE_PUBLIC = 2,
        RPC_C_AUTHN_DEC_PUBLIC = 4,
        RPC_C_AUTHN_WINNT = 10,
        RPC_C_AUTHN_DEFAULT = unchecked((int)0xFFFFFFFF),
        RPC_C_SECURITY_QOS_VERSION = 1,
        RPC_C_AUTHZ_NONE = 0,
        RPC_C_AUTHZ_NAME = 1,
        RPC_C_AUTHZ_DCE = 2,
        RPC_C_EP_ALL_ELTS = 0,
        RPC_C_EP_MATCH_BY_IF = 1,
        RPC_C_EP_MATCH_BY_OBJ = 2,
        RPC_C_EP_MATCH_BY_BOTH = 3,
        RPC_C_VERS_ALL = 1,
        RPC_C_VERS_COMPATIBLE = 2,
        RPC_C_VERS_EXACT = 3,
        RPC_C_VERS_MAJOR_ONLY = 4,
        RPC_C_VERS_UPTO = 5,
        RPC_C_MGMT_INQ_IF_IDS = 0,
        RPC_C_MGMT_INQ_PRINC_NAME = 1,
        RPC_C_MGMT_INQ_STATS = 2,
        RPC_C_MGMT_IS_SERVER_LISTEN = 3,
        RPC_C_MGMT_STOP_SERVER_LISTEN = 4,
        RPC_C_PARM_MAX_PACKET_LENGTH = 1,
        RPC_C_PARM_BUFFER_LENGTH = 2,
        RPC_IF_AUTOLISTEN = 0x0001,
        RPC_IF_OLE = 0x0002,
        RPC_NCA_FLAGS_DEFAULT = 0x00000000,
        RPC_NCA_FLAGS_IDEMPOTENT = 0x00000001,
        RPC_NCA_FLAGS_BROADCAST = 0x00000002,
        RPC_NCA_FLAGS_MAYBE = 0x00000004,
        RPC_BUFFER_COMPLETE = 0x00001000,
        RPC_BUFFER_PARTIAL = 0x00002000,
        RPC_BUFFER_EXTRA = 0x00004000,
        RPCFLG_NON_NDR = unchecked((int)0x80000000),
        RPCFLG_ASYNCHRONOUS = 0x40000000,
        RPCFLG_INPUT_SYNCHRONOUS = 0x20000000,
        RPCFLG_LOCAL_CALL = 0x10000000,
        RPC_FLAGS_VALID_BIT = unchecked((int)0x8000);
        // RPC_FLAGS_VALID_BIT = 0x00008000;
        public const int RPC_INTERFACE_HAS_PIPES = 0x0001,
        RPC_C_NS_SYNTAX_DEFAULT = 0,
        RPC_C_NS_SYNTAX_DCE = 3,
        RPC_C_PROFILE_DEFAULT_ELT = 0,
        RPC_C_PROFILE_ALL_ELT = 1,
        RPC_C_PROFILE_MATCH_BY_IF = 2,
        RPC_C_PROFILE_MATCH_BY_MBR = 3,
        RPC_C_PROFILE_MATCH_BY_BOTH = 4,
        RPC_C_NS_DEFAULT_EXP_AGE = -1,
        RTS_CONTROL_DISABLE = 0x00,
        RTS_CONTROL_ENABLE = 0x01,
        RTS_CONTROL_HANDSHAKE = 0x02,
        RTS_CONTROL_TOGGLE = 0x03,
        REALTIME_PRIORITY_CLASS = 0x00000100,
        RIP_EVENT = 9,
        RESETDEV = 7,
        RIGHT_ALT_PRESSED = 0x0001,
        RIGHT_CTRL_PRESSED = 0x0004,
        RIGHTMOST_BUTTON_PRESSED = 0x0002,
        RPC_S_INVALID_STRING_BINDING = 1700,
        RPC_S_WRONG_KIND_OF_BINDING = 1701,
        RPC_S_INVALID_BINDING = 1702,
        RPC_S_PROTSEQ_NOT_SUPPORTED = 1703,
        RPC_S_INVALID_RPC_PROTSEQ = 1704,
        RPC_S_INVALID_STRING_UUID = 1705,
        RPC_S_INVALID_ENDPOINT_FORMAT = 1706,
        RPC_S_INVALID_NET_ADDR = 1707,
        RPC_S_NO_ENDPOINT_FOUND = 1708,
        RPC_S_INVALID_TIMEOUT = 1709,
        RPC_S_OBJECT_NOT_FOUND = 1710,
        RPC_S_ALREADY_REGISTERED = 1711,
        RPC_S_TYPE_ALREADY_REGISTERED = 1712,
        RPC_S_ALREADY_LISTENING = 1713,
        RPC_S_NO_PROTSEQS_REGISTERED = 1714,
        RPC_S_NOT_LISTENING = 1715,
        RPC_S_UNKNOWN_MGR_TYPE = 1716,
        RPC_S_UNKNOWN_IF = 1717,
        RPC_S_NO_BINDINGS = 1718,
        RPC_S_NO_PROTSEQS = 1719,
        RPC_S_CANT_CREATE_ENDPOINT = 1720,
        RPC_S_OUT_OF_RESOURCES = 1721,
        RPC_S_SERVER_UNAVAILABLE = 1722,
        RPC_S_SERVER_TOO_BUSY = 1723,
        RPC_S_INVALID_NETWORK_OPTIONS = 1724,
        RPC_S_NO_CALL_ACTIVE = 1725,
        RPC_S_CALL_FAILED = 1726,
        RPC_S_CALL_FAILED_DNE = 1727,
        RPC_S_PROTOCOL_ERROR = 1728,
        RPC_S_UNSUPPORTED_TRANS_SYN = 1730,
        RPC_S_UNSUPPORTED_TYPE = 1732,
        RPC_S_INVALID_TAG = 1733,
        RPC_S_INVALID_BOUND = 1734,
        RPC_S_NO_ENTRY_NAME = 1735,
        RPC_S_INVALID_NAME_SYNTAX = 1736,
        RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737,
        RPC_S_UUID_NO_ADDRESS = 1739,
        RPC_S_DUPLICATE_ENDPOINT = 1740,
        RPC_S_UNKNOWN_AUTHN_TYPE = 1741,
        RPC_S_MAX_CALLS_TOO_SMALL = 1742,
        RPC_S_STRING_TOO_LONG = 1743,
        RPC_S_PROTSEQ_NOT_FOUND = 1744,
        RPC_S_PROCNUM_OUT_OF_RANGE = 1745,
        RPC_S_BINDING_HAS_NO_AUTH = 1746,
        RPC_S_UNKNOWN_AUTHN_SERVICE = 1747,
        RPC_S_UNKNOWN_AUTHN_LEVEL = 1748,
        RPC_S_INVALID_AUTH_IDENTITY = 1749,
        RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750,
        RPC_S_NOTHING_TO_EXPORT = 1754,
        RPC_S_INCOMPLETE_NAME = 1755,
        RPC_S_INVALID_VERS_OPTION = 1756,
        RPC_S_NO_MORE_MEMBERS = 1757,
        RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758,
        RPC_S_INTERFACE_NOT_FOUND = 1759,
        RPC_S_ENTRY_ALREADY_EXISTS = 1760,
        RPC_S_ENTRY_NOT_FOUND = 1761,
        RPC_S_NAME_SERVICE_UNAVAILABLE = 1762,
        RPC_S_INVALID_NAF_ID = 1763,
        RPC_S_CANNOT_SUPPORT = 1764,
        RPC_S_NO_CONTEXT_AVAILABLE = 1765,
        RPC_S_INTERNAL_ERROR = 1766,
        RPC_S_ZERO_DIVIDE = 1767,
        RPC_S_ADDRESS_ERROR = 1768,
        RPC_S_FP_DIV_ZERO = 1769,
        RPC_S_FP_UNDERFLOW = 1770,
        RPC_S_FP_OVERFLOW = 1771,
        RPC_X_NO_MORE_ENTRIES = 1772,
        RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773,
        RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774,
        RPC_X_SS_IN_NULL_CONTEXT = 1775,
        RPC_X_SS_CONTEXT_DAMAGED = 1777,
        RPC_X_SS_HANDLES_MISMATCH = 1778,
        RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779,
        RPC_X_NULL_REF_POINTER = 1780,
        RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781,
        RPC_X_BYTE_COUNT_TOO_SMALL = 1782,
        RPC_X_BAD_STUB_DATA = 1783,
        RPC_S_CALL_IN_PROGRESS = 1791,
        RPC_S_NO_MORE_BINDINGS = 1806,
        RPC_S_NO_INTERFACES = 1817,
        RPC_S_CALL_CANCELLED = 1818,
        RPC_S_BINDING_INCOMPLETE = 1819,
        RPC_S_COMM_FAILURE = 1820,
        RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821,
        RPC_S_NO_PRINC_NAME = 1822,
        RPC_S_NOT_RPC_ERROR = 1823,
        RPC_S_UUID_LOCAL_ONLY = 1824,
        RPC_S_SEC_PKG_ERROR = 1825,
        RPC_S_NOT_CANCELLED = 1826,
        RPC_X_INVALID_ES_ACTION = 1827,
        RPC_X_WRONG_ES_VERSION = 1828,
        RPC_X_WRONG_STUB_VERSION = 1829,
        RPC_X_INVALID_PIPE_OBJECT = 1830,
        RPC_X_INVALID_PIPE_OPERATION = 1831,
        RPC_X_WRONG_PIPE_VERSION = 1832,
        RPC_S_GROUP_MEMBER_NOT_FOUND = 1898,
        RPC_S_INVALID_OBJECT = 1900,
        RPC_S_SEND_INCOMPLETE = 1913,
        REGDB_E_FIRST = unchecked((int)0x80040150),
        REGDB_E_LAST = unchecked((int)0x8004015F),
        REGDB_S_FIRST = 0x00040150,
        REGDB_S_LAST = 0x0004015F,
        REGDB_E_READREGDB = unchecked((int)0x80040150),
        REGDB_E_WRITEREGDB = unchecked((int)0x80040151),
        REGDB_E_KEYMISSING = unchecked((int)0x80040152),
        REGDB_E_INVALIDVALUE = unchecked((int)0x80040153),
        REGDB_E_CLASSNOTREG = unchecked((int)0x80040154),
        REGDB_E_IIDNOTREG = unchecked((int)0x80040155),
        RPC_E_CALL_REJECTED = unchecked((int)0x80010001),
        RPC_E_CALL_CANCELED = unchecked((int)0x80010002),
        RPC_E_CANTPOST_INSENDCALL = unchecked((int)0x80010003),
        RPC_E_CANTCALLOUT_INASYNCCALL = unchecked((int)0x80010004),
        RPC_E_CONNECTION_TERMINATED = unchecked((int)0x80010006),
        RPC_E_SERVER_DIED = unchecked((int)0x80010007),
        RPC_E_CLIENT_DIED = unchecked((int)0x80010008),
        RPC_E_INVALID_DATAPACKET = unchecked((int)0x80010009),
        RPC_E_CANTTRANSMIT_CALL = unchecked((int)0x8001000A),
        RPC_E_CLIENT_CANTMARSHAL_DATA = unchecked((int)0x8001000B),
        RPC_E_CLIENT_CANTUNMARSHAL_DATA = unchecked((int)0x8001000C),
        RPC_E_SERVER_CANTMARSHAL_DATA = unchecked((int)0x8001000D),
        RPC_E_SERVER_CANTUNMARSHAL_DATA = unchecked((int)0x8001000E),
        RPC_E_INVALID_DATA = unchecked((int)0x8001000F),
        RPC_E_INVALID_PARAMETER = unchecked((int)0x80010010),
        RPC_E_CANTCALLOUT_AGAIN = unchecked((int)0x80010011),
        RPC_E_SERVER_DIED_DNE = unchecked((int)0x80010012),
        RPC_E_SYS_CALL_FAILED = unchecked((int)0x80010100),
        RPC_E_OUT_OF_RESOURCES = unchecked((int)0x80010101),
        RPC_E_ATTEMPTED_MULTITHREAD = unchecked((int)0x80010102),
        RPC_E_NOT_REGISTERED = unchecked((int)0x80010103),
        RPC_E_FAULT = unchecked((int)0x80010104),
        RPC_E_SERVERFAULT = unchecked((int)0x80010105),
        RPC_E_CHANGED_MODE = unchecked((int)0x80010106),
        RPC_E_INVALIDMETHOD = unchecked((int)0x80010107),
        RPC_E_DISCONNECTED = unchecked((int)0x80010108),
        RPC_E_RETRY = unchecked((int)0x80010109),
        RPC_E_SERVERCALL_RETRYLATER = unchecked((int)0x8001010A),
        RPC_E_SERVERCALL_REJECTED = unchecked((int)0x8001010B),
        RPC_E_INVALID_CALLDATA = unchecked((int)0x8001010C),
        RPC_E_CANTCALLOUT_ININPUTSYNCCALL = unchecked((int)0x8001010D),
        RPC_E_WRONG_THREAD = unchecked((int)0x8001010E),
        RPC_E_THREAD_NOT_INIT = unchecked((int)0x8001010F),
        RPC_E_VERSION_MISMATCH = unchecked((int)0x80010110),
        RPC_E_INVALID_HEADER = unchecked((int)0x80010111),
        RPC_E_INVALID_EXTENSION = unchecked((int)0x80010112),
        RPC_E_INVALID_IPID = unchecked((int)0x80010113),
        RPC_E_INVALID_OBJECT = unchecked((int)0x80010114),
        RPC_S_CALLPENDING = unchecked((int)0x80010115),
        RPC_S_WAITONTIMER = unchecked((int)0x80010116),
        RPC_E_CALL_COMPLETE = unchecked((int)0x80010117),
        RPC_E_UNSECURE_CALL = unchecked((int)0x80010118),
        RPC_E_TOO_LATE = unchecked((int)0x80010119),
        RPC_E_NO_GOOD_SECURITY_PACKAGES = unchecked((int)0x8001011A),
        RPC_E_ACCESS_DENIED = unchecked((int)0x8001011B),
        RPC_E_REMOTE_DISABLED = unchecked((int)0x8001011C),
        RPC_E_INVALID_OBJREF = unchecked((int)0x8001011D),
        RPC_E_UNEXPECTED = unchecked((int)0x8001FFFF),
        R2_BLACK = 1,
        R2_NOTMERGEPEN = 2,
        R2_MASKNOTPEN = 3,
        R2_NOTCOPYPEN = 4,
        R2_MASKPENNOT = 5,
        R2_NOT = 6,
        R2_XORPEN = 7,
        R2_NOTMASKPEN = 8,
        R2_MASKPEN = 9,
        R2_NOTXORPEN = 10,
        R2_NOP = 11,
        R2_MERGENOTPEN = 12,
        R2_COPYPEN = 13,
        R2_MERGEPENNOT = 14,
        R2_MERGEPEN = 15,
        R2_WHITE = 16,
        R2_LAST = 16,
        RGN_ERROR = 0,
        RGN_AND = 1,
        RGN_OR = 2,
        RGN_XOR = 3,
        RGN_DIFF = 4,
        RGN_COPY = 5,
        RGN_MIN = 1,
        RGN_MAX = 5,
        RESTORE_CTM = 4100,
        RUSSIAN_CHARSET = 204,
        RASTER_FONTTYPE = 0x0001,
        RELATIVE = 2,
        RASTERCAPS = 38,
        RC_BITBLT = 1,
        RC_BANDING = 2,
        RC_SCALING = 4,
        RC_BITMAP64 = 8,
        RC_GDI20_OUTPUT = 0x0010,
        RC_GDI20_STATE = 0x0020,
        RC_SAVEBITMAP = 0x0040,
        RC_DI_BITMAP = 0x0080,
        RC_PALETTE = 0x0100,
        RC_DIBTODEV = 0x0200,
        RC_BIGFONT = 0x0400,
        RC_STRETCHBLT = 0x0800,
        RC_FLOODFILL = 0x1000,
        RC_STRETCHDIB = 0x2000,
        RC_OP_DX_OUTPUT = 0x4000,
        RC_DEVBITS = unchecked((int)0x8000),
        RDH_RECTANGLES = 1,
        RESOURCE_CONNECTED = 0x00000001,
        RESOURCE_GLOBALNET = 0x00000002,
        RESOURCE_REMEMBERED = 0x00000003,
        RESOURCE_RECENT = 0x00000004,
        RESOURCE_CONTEXT = 0x00000005,
        RESOURCETYPE_ANY = 0x00000000,
        RESOURCETYPE_DISK = 0x00000001,
        RESOURCETYPE_PRINT = 0x00000002,
        RESOURCETYPE_RESERVED = 0x00000008,
        RESOURCETYPE_UNKNOWN = unchecked((int)0xFFFFFFFF),
        RESOURCEUSAGE_CONNECTABLE = 0x00000001,
        RESOURCEUSAGE_CONTAINER = 0x00000002,
        RESOURCEUSAGE_NOLOCALDEVICE = 0x00000004,
        RESOURCEUSAGE_SIBLING = 0x00000008,
        RESOURCEUSAGE_ATTACHED = 0x00000010,
        RESOURCEUSAGE_ALL = (0x00000001|0x00000002|0x00000010),
        RESOURCEUSAGE_RESERVED = unchecked((int)0x80000000),
        RESOURCEDISPLAYTYPE_GENERIC = 0x00000000,
        RESOURCEDISPLAYTYPE_DOMAIN = 0x00000001,
        RESOURCEDISPLAYTYPE_SERVER = 0x00000002,
        RESOURCEDISPLAYTYPE_SHARE = 0x00000003,
        RESOURCEDISPLAYTYPE_FILE = 0x00000004,
        RESOURCEDISPLAYTYPE_GROUP = 0x00000005,
        RESOURCEDISPLAYTYPE_NETWORK = 0x00000006,
        RESOURCEDISPLAYTYPE_ROOT = 0x00000007,
        RESOURCEDISPLAYTYPE_SHAREADMIN = 0x00000008,
        RESOURCEDISPLAYTYPE_DIRECTORY = 0x00000009,
        RESOURCEDISPLAYTYPE_TREE = 0x0000000A,
        RESOURCEDISPLAYTYPE_NDSCONTAINER = 0x0000000B,
        REMOTE_NAME_INFO_LEVEL = 0x00000002,
        RP_LOGON = 0x01,
        RP_INIFILE = 0x02,
        READ_CONTROL = (0x00020000),
        RTL_CRITSECT_TYPE = 0,
        RTL_RESOURCE_TYPE = 1,
        REG_OPTION_RESERVED = (0x00000000),
        REG_OPTION_NON_VOLATILE = (0x00000000),
        REG_OPTION_VOLATILE = (0x00000001),
        REG_OPTION_CREATE_LINK = (0x00000002),
        REG_OPTION_BACKUP_RESTORE = (0x00000004),
        REG_OPTION_OPEN_LINK = (0x00000008),
        REG_CREATED_NEW_KEY = (0x00000001),
        REG_OPENED_EXISTING_KEY = (0x00000002),
        REG_WHOLE_HIVE_VOLATILE = (0x00000001),
        REG_REFRESH_HIVE = (0x00000002),
        REG_NO_LAZY_FLUSH = (0x00000004),
        REG_NOTIFY_CHANGE_NAME = (0x00000001),
        REG_NOTIFY_CHANGE_ATTRIBUTES = (0x00000002),
        REG_NOTIFY_CHANGE_LAST_SET = (0x00000004),
        REG_NOTIFY_CHANGE_SECURITY = (0x00000008),
        REG_NONE = (0),
        REG_SZ = (1),
        REG_EXPAND_SZ = (2),
        REG_BINARY = (3),
        REG_DWORD = (4),
        REG_DWORD_LITTLE_ENDIAN = (4),
        REG_DWORD_BIG_ENDIAN = (5),
        REG_LINK = (6),
        REG_MULTI_SZ = (7),
        REG_RESOURCE_LIST = (8),
        REG_FULL_RESOURCE_DESCRIPTOR = (9),
        REG_RESOURCE_REQUIREMENTS_LIST = (10),
        RT_CURSOR = 1,
        RT_BITMAP = 2,
        RT_ICON = 3,
        RT_MENU = 4,
        RT_DIALOG = 5,
        RT_STRING = 6,
        RT_FONTDIR = 7,
        RT_FONT = 8,
        RT_ACCELERATOR = 9,
        RT_RCDATA = 10,
        RT_MESSAGETABLE = 11,
        RT_GROUP_CURSOR = 1+11,
        RT_GROUP_ICON = 3+11,
        RT_VERSION = 16,
        RT_DLGINCLUDE = 17,
        RT_PLUGPLAY = 19,
        RT_VXD = 20,
        RT_ANICURSOR = 21,
        RT_ANIICON = 22,
        RDW_INVALIDATE = 0x0001,
        RDW_INTERNALPAINT = 0x0002,
        RDW_ERASE = 0x0004,
        RDW_VALIDATE = 0x0008,
        RDW_NOINTERNALPAINT = 0x0010,
        RDW_NOERASE = 0x0020,
        RDW_NOCHILDREN = 0x0040,
        RDW_ALLCHILDREN = 0x0080,
        RDW_UPDATENOW = 0x0100,
        RDW_ERASENOW = 0x0200,
        RDW_FRAME = 0x0400,
        RDW_NOFRAME = 0x0800,
        RES_ICON = 1,
        RES_CURSOR = 2,
        ROTFLAGS_REGISTRATIONKEEPSALIVE = 0x1,
        ROTFLAGS_ALLOWANYCLIENT = 0x2,
        ROT_COMPARE_MAX = 2048,
        RBN_FIRST = (0-831),
        RBN_LAST = (0-859),
        RBNM_ID = 0x00000001,
        RBNM_STYLE = 0x00000002,
        RBNM_LPARAM = 0x00000004,
        RBIM_IMAGELIST = 0x00000001,
        RBS_TOOLTIPS = 0x00000100,
        RBS_VARHEIGHT = 0x00000200,
        RBS_BANDBORDERS = 0x00000400,
        RBS_FIXEDORDER = 0x00000800,
        RBS_REGISTERDROP = 0x1000,
        RBS_AUTOSIZE = 0x2000,
        RBS_VERTICALGRIPPER = 0x4000,
        RBS_DBLCLKTOGGLE = unchecked((int)0x8000),
        RBBS_BREAK = 0x00000001,
        RBBS_FIXEDSIZE = 0x00000002,
        RBBS_CHILDEDGE = 0x00000004,
        RBBS_HIDDEN = 0x00000008,
        RBBS_NOVERT = 0x00000010,
        RBBS_FIXEDBMP = 0x00000020,
        RBBS_VARIABLEHEIGHT = 0x00000040,
        RBBS_GRIPPERALWAYS = 0x00000080,
        RBBS_NOGRIPPER = 0x00000100,
        RBBIM_STYLE = 0x00000001,
        RBBIM_COLORS = 0x00000002,
        RBBIM_TEXT = 0x00000004,
        RBBIM_IMAGE = 0x00000008,
        RBBIM_CHILD = 0x00000010,
        RBBIM_CHILDSIZE = 0x00000020,
        RBBIM_SIZE = 0x00000040,
        RBBIM_BACKGROUND = 0x00000080,
        RBBIM_ID = 0x00000100,
        RBBIM_IDEALSIZE = 0x00000200,
        RBBIM_LPARAM = 0x00000400,
        RBBIM_HEADERSIZE = 0x00000800,
        RB_INSERTBANDA = (0x0400+1),
        RB_DELETEBAND = (0x0400+2),
        RB_GETBARINFO = (0x0400+3),
        RB_SETBARINFO = (0x0400+4),
        RB_GETBANDINFO_OLD = (0x0400+5),
        RB_SETBANDINFOA = (0x0400+6),
        RB_SETPARENT = (0x0400+7),
        RB_HITTEST = (0x0400+8),
        RB_GETRECT = (0x0400+9),
        RB_INSERTBANDW = (0x0400+10),
        RB_SETBANDINFOW = (0x0400+11),
        RB_GETBANDCOUNT = (0x0400+12),
        RB_GETROWCOUNT = (0x0400+13),
        RB_GETROWHEIGHT = (0x0400+14),
        RB_IDTOINDEX = (0x0400+16),
        RB_GETTOOLTIPS = (0x0400+17),
        RB_SETTOOLTIPS = (0x0400+18),
        RB_SETBKCOLOR = (0x0400+19),
        RB_GETBKCOLOR = (0x0400+20),
        RB_SETTEXTCOLOR = (0x0400+21),
        RB_GETTEXTCOLOR = (0x0400+22),
        RB_SIZETORECT = (0x0400+23),
        RB_BEGINDRAG = (0x0400+24),
        RB_ENDDRAG = (0x0400+25),
        RB_DRAGMOVE = (0x0400+26),
        RB_GETBARHEIGHT = (0x0400+27),
        RB_GETBANDINFOW = (0x0400+28),
        RB_GETBANDINFOA = (0x0400+29),
        RB_MINIMIZEBAND = (0x0400+30),
        RB_MAXIMIZEBAND = (0x0400+31),
        RB_GETBANDBORDERS = (0x0400+34),
        RB_SHOWBAND = (0x0400+35),
        RB_SETPALETTE = (0x0400+37),
        RB_GETPALETTE = (0x0400+38),
        RB_MOVEBAND = (0x0400+39),
        RB_SETCOLORSCHEME = NativeMethods.CCM_SETCOLORSCHEME,
        RB_GETCOLORSCHEME = NativeMethods.CCM_GETCOLORSCHEME,
        RB_GETDROPTARGET = NativeMethods.CCM_GETDROPTARGET,
        RB_SETUNICODEFORMAT = NativeMethods.CCM_SETUNICODEFORMAT,
        RB_GETUNICODEFORMAT = NativeMethods.CCM_GETUNICODEFORMAT,
        RBN_HEIGHTCHANGE = ((0-831)-0),
        RBN_GETOBJECT = ((0-831)-1),
        RBN_LAYOUTCHANGED = ((0-831)-2),
        RBN_AUTOSIZE = ((0-831)-3),
        RBN_BEGINDRAG = ((0-831)-4),
        RBN_ENDDRAG = ((0-831)-5),
        RBN_DELETINGBAND = ((0-831)-6),
        RBN_DELETEDBAND = ((0-831)-7),
        RBN_CHILDSIZE = ((0-831)-8),
        RBHT_NOWHERE = 0x0001,
        RBHT_CAPTION = 0x0002,
        RBHT_CLIENT = 0x0003,
        RBHT_GRABBER = 0x0004,
        RPC_S_OK = 0,
        RPC_S_INVALID_ARG = 87,
        RPC_S_OUT_OF_MEMORY = 14,
        RPC_S_OUT_OF_THREADS = 164,
        RPC_S_INVALID_LEVEL = 87,
        RPC_S_BUFFER_TOO_SMALL = 122,
        RPC_S_INVALID_SECURITY_DESC = 1338,
        RPC_S_ACCESS_DENIED = 5,
        RPC_S_SERVER_OUT_OF_MEMORY = 1130,
        RPC_X_NO_MEMORY = 14,
        RPC_X_INVALID_BOUND = 1734,
        RPC_X_INVALID_TAG = 1733,
        RPC_X_ENUM_VALUE_TOO_LARGE = 1781,
        RPC_X_SS_CONTEXT_MISMATCH = 6,
        RPC_X_INVALID_BUFFER = 1784;
        
        
        public const int SIMULATED_FONTTYPE = unchecked((int)0x8000),
        SCREEN_FONTTYPE = 0x2000,
        ST_CONNECTED = 0x0001,
        ST_ADVISE = 0x0002,
        ST_ISLOCAL = 0x0004,
        ST_BLOCKED = 0x0008,
        ST_CLIENT = 0x0010,
        ST_TERMINATED = 0x0020,
        ST_INLIST = 0x0040,
        ST_BLOCKNEXT = 0x0080,
        ST_ISSELF = 0x0100,
        stc1 = 0x0440,
        stc2 = 0x0441,
        stc3 = 0x0442,
        stc4 = 0x0443,
        stc5 = 0x0444,
        stc6 = 0x0445,
        stc7 = 0x0446,
        stc8 = 0x0447,
        stc9 = 0x0448,
        stc10 = 0x0449,
        stc11 = 0x044a,
        stc12 = 0x044b,
        stc13 = 0x044c,
        stc14 = 0x044d,
        stc15 = 0x044e,
        stc16 = 0x044f,
        stc17 = 0x0450,
        stc18 = 0x0451,
        stc19 = 0x0452,
        stc20 = 0x0453,
        stc21 = 0x0454,
        stc22 = 0x0455,
        stc23 = 0x0456,
        stc24 = 0x0457,
        stc25 = 0x0458,
        stc26 = 0x0459,
        stc27 = 0x045a,
        stc28 = 0x045b,
        stc29 = 0x045c,
        stc30 = 0x045d,
        stc31 = 0x045e,
        stc32 = 0x045f,
        scr1 = 0x0490,
        scr2 = 0x0491,
        scr3 = 0x0492,
        scr4 = 0x0493,
        scr5 = 0x0494,
        scr6 = 0x0495,
        scr7 = 0x0496,
        scr8 = 0x0497,
        STYLE_DESCRIPTION_SIZE = 32,
        SCS_CAP_COMPSTR = 0x00000001,
        SCS_CAP_MAKEREAD = 0x00000002,
        SELECT_CAP_CONVERSION = 0x00000001,
        SELECT_CAP_SENTENCE = 0x00000002,
        SCS_SETSTR = (0x0001|0x0008),
        SCS_CHANGEATTR = (0x0002|0x0010),
        SCS_CHANGECLAUSE = (0x0004|0x0020),
        SOFTKEYBOARD_TYPE_T1 = 0x0001,
        SOFTKEYBOARD_TYPE_C1 = 0x0002,
        SND_SYNC = 0x0000,
        SND_ASYNC = 0x0001,
        SND_NODEFAULT = 0x0002,
        SND_MEMORY = 0x0004,
        SND_LOOP = 0x0008,
        SND_NOSTOP = 0x0010,
        SND_NOWAIT = 0x00002000,
        SND_ALIAS = 0x00010000,
        SND_ALIAS_ID = 0x00110000,
        SND_FILENAME = 0x00020000,
        SND_RESOURCE = 0x00040004,
        SND_PURGE = 0x0040,
        SND_APPLICATION = 0x0080,
        SND_ALIAS_START = 0,
        SEEK_SET = 0,
        SEEK_CUR = 1,
        SEEK_END = 2,
        SELECTDIB = 41,
        SC_SCREENSAVE = 0xF140,
        SO_CONNDATA = 0x7000,
        SO_CONNOPT = 0x7001,
        SO_DISCDATA = 0x7002,
        SO_DISCOPT = 0x7003,
        SO_CONNDATALEN = 0x7004,
        SO_CONNOPTLEN = 0x7005,
        SO_DISCDATALEN = 0x7006,
        SO_DISCOPTLEN = 0x7007,
        SO_OPENTYPE = 0x7008,
        SO_SYNCHRONOUS_ALERT = 0x10,
        SO_SYNCHRONOUS_NONALERT = 0x20,
        SO_MAXDG = 0x7009,
        SO_MAXPATHDG = 0x700A,
        SO_UPDATE_ACCEPT_CONTEXT = 0x700B,
        SO_CONNECT_TIME = 0x700C,
        SESSION_ESTABLISHED = 0x03,
        SESSION_ABORTED = 0x06,
        STGM_DIRECT = 0x00000000,
        STGM_TRANSACTED = 0x00010000,
        STGM_SIMPLE = 0x08000000,
        STGM_READ = 0x00000000,
        STGM_WRITE = 0x00000001,
        STGM_READWRITE = 0x00000002,
        STGM_SHARE_DENY_NONE = 0x00000040,
        STGM_SHARE_DENY_READ = 0x00000030,
        STGM_SHARE_DENY_WRITE = 0x00000020,
        STGM_SHARE_EXCLUSIVE = 0x00000010,
        STGM_PRIORITY = 0x00040000,
        STGM_DELETEONRELEASE = 0x04000000,
        STGM_NOSCRATCH = 0x00100000,
        STGM_CREATE = 0x00001000,
        STGM_CONVERT = 0x00020000,
        STGM_FAILIFTHERE = 0x00000000,
        STGM_NOSNAPSHOT = 0x00200000,
        STGTY_REPEAT = 0x00000100,
        STG_TOEND = unchecked((int)0xFFFFFFFF),
        STG_LAYOUT_SEQUENTIAL = 0x00000000,
        STG_LAYOUT_INTERLEAVED = 0x00000001,
        STDOLE_MAJORVERNUM = 0x1,
        STDOLE_MINORVERNUM = 0x0,
        STDOLE_LCID = 0x0000,
        STDOLE2_MAJORVERNUM = 0x2,
        STDOLE2_MINORVERNUM = 0x0,
        STDOLE2_LCID = 0x0000,
        SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,
        SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,
        SE_ERR_FNF = 2,
        SE_ERR_PNF = 3,
        SE_ERR_ACCESSDENIED = 5,
        SE_ERR_OOM = 8,
        SE_ERR_DLLNOTFOUND = 32,
        SE_ERR_SHARE = 26,
        SE_ERR_ASSOCINCOMPLETE = 27,
        SE_ERR_DDETIMEOUT = 28,
        SE_ERR_DDEFAIL = 29,
        SE_ERR_DDEBUSY = 30,
        SE_ERR_NOASSOC = 31,
        SEE_MASK_CLASSNAME = 0x00000001,
        SEE_MASK_CLASSKEY = 0x00000003,
        SEE_MASK_IDLIST = 0x00000004,
        SEE_MASK_INVOKEIDLIST = 0x0000000c,
        SEE_MASK_ICON = 0x00000010,
        SEE_MASK_HOTKEY = 0x00000020,
        SEE_MASK_NOCLOSEPROCESS = 0x00000040,
        SEE_MASK_CONNECTNETDRV = 0x00000080,
        SEE_MASK_FLAG_DDEWAIT = 0x00000100,
        SEE_MASK_DOENVSUBST = 0x00000200,
        SEE_MASK_FLAG_NO_UI = 0x00000400,
        SEE_MASK_UNICODE = 0x00004000,
        SEE_MASK_NO_CONSOLE = 0x00008000,
        SEE_MASK_ASYNCOK = 0x00100000;
        public const long SHGFI_ICON = 0x000000100L,
        SHGFI_DISPLAYNAME = 0x000000200L,
        SHGFI_TYPENAME = 0x000000400L,
        SHGFI_ATTRIBUTES = 0x000000800L,
        SHGFI_ICONLOCATION = 0x000001000L,
        SHGFI_EXETYPE = 0x000002000L,
        SHGFI_SYSICONINDEX = 0x000004000L,
        SHGFI_LINKOVERLAY = 0x000008000L,
        SHGFI_SELECTED = 0x000010000L,
        SHGFI_LARGEICON = 0x000000000L,
        SHGFI_SMALLICON = 0x000000001L,
        SHGFI_OPENICON = 0x000000002L,
        SHGFI_SHELLICONSIZE = 0x000000004L,
        SHGFI_PIDL = 0x000000008L,
        SHGFI_USEFILEATTRIBUTES = 0x000000010L,
        SHGNLI_PIDL = 0x000000001L,
        SHGNLI_PREFIXNAME = 0x000000002L,
        SHGNLI_NOUNIQUE = 0x000000004L;
        public const int SECURITY_CONTEXT_TRACKING = 0x00040000,
        SECURITY_EFFECTIVE_ONLY = 0x00080000,
        SECURITY_SQOS_PRESENT = 0x00100000,
        SECURITY_VALID_SQOS_FLAGS = 0x001F0000,
        SP_SERIALCOMM = (0x00000001),
        SP_PARITY = (0x0001),
        SP_BAUD = (0x0002),
        SP_DATABITS = (0x0004),
        SP_STOPBITS = (0x0008),
        SP_HANDSHAKING = (0x0010),
        SP_PARITY_CHECK = (0x0020),
        SP_RLSD = (0x0040),
        STOPBITS_10 = (0x0001),
        STOPBITS_15 = (0x0002),
        STOPBITS_20 = (0x0004),
        SPACEPARITY = 4,
        SETXOFF = 1,
        SETXON = 2,
        SETRTS = 3,
        SETDTR = 5,
        SETBREAK = 8,
        S_QUEUEEMPTY = 0,
        S_THRESHOLD = 1,
        S_ALLTHRESHOLD = 2,
        S_NORMAL = 0,
        S_LEGATO = 1,
        S_STACCATO = 2,
        S_PERIOD512 = 0,
        S_PERIOD1024 = 1,
        S_PERIOD2048 = 2,
        S_PERIODVOICE = 3,
        S_WHITE512 = 4,
        S_WHITE1024 = 5,
        S_WHITE2048 = 6,
        S_WHITEVOICE = 7,
        S_SERDVNA = (-1),
        S_SEROFM = (-2),
        S_SERMACT = (-3),
        S_SERQFUL = (-4),
        S_SERBDNT = (-5),
        S_SERDLN = (-6),
        S_SERDCC = (-7),
        S_SERDTP = (-8),
        S_SERDVL = (-9),
        S_SERDMD = (-10),
        S_SERDSH = (-11),
        S_SERDPT = (-12),
        S_SERDFQ = (-13),
        S_SERDDR = (-14),
        S_SERDSR = (-15),
        S_SERDST = (-16),
        SCS_32BIT_BINARY = 0,
        SCS_DOS_BINARY = 1,
        SCS_WOW_BINARY = 2,
        SCS_PIF_BINARY = 3,
        SCS_POSIX_BINARY = 4,
        SCS_OS216_BINARY = 5,
        SEM_FAILCRITICALERRORS = 0x0001,
        SEM_NOGPFAULTERRORBOX = 0x0002,
        SEM_NOALIGNMENTFAULTEXCEPT = 0x0004,
        SEM_NOOPENFILEERRORBOX = unchecked((int)0x8000),
        SET_TAPE_MEDIA_INFORMATION = 0,
        SET_TAPE_DRIVE_INFORMATION = 1,
        STREAM_NORMAL_ATTRIBUTE = 0x00000000,
        STREAM_MODIFIED_WHEN_READ = 0x00000001,
        STREAM_CONTAINS_SECURITY = 0x00000002,
        STREAM_CONTAINS_PROPERTIES = 0x00000004,
        STARTF_USESHOWWINDOW = 0x00000001,
        STARTF_USESIZE = 0x00000002,
        STARTF_USEPOSITION = 0x00000004,
        STARTF_USECOUNTCHARS = 0x00000008,
        STARTF_USEFILLATTRIBUTE = 0x00000010,
        STARTF_RUNFULLSCREEN = 0x00000020,
        STARTF_FORCEONFEEDBACK = 0x00000040,
        STARTF_FORCEOFFFEEDBACK = 0x00000080,
        STARTF_USESTDHANDLES = 0x00000100,
        STARTF_USEHOTKEY = 0x00000200,
        SHUTDOWN_NORETRY = 0x00000001,
        SHIFT_PRESSED = 0x0010,
        SCROLLLOCK_ON = 0x0040,
        SIMPLEBLOB = 0x1,
        SEVERITY_SUCCESS = 0,
        SEVERITY_ERROR = 1,
        STG_E_INVALIDFUNCTION = unchecked((int)0x80030001),
        STG_E_FILENOTFOUND = unchecked((int)0x80030002),
        STG_E_PATHNOTFOUND = unchecked((int)0x80030003),
        STG_E_TOOMANYOPENFILES = unchecked((int)0x80030004),
        STG_E_ACCESSDENIED = unchecked((int)0x80030005),
        STG_E_INVALIDHANDLE = unchecked((int)0x80030006),
        STG_E_INSUFFICIENTMEMORY = unchecked((int)0x80030008),
        STG_E_INVALIDPOINTER = unchecked((int)0x80030009),
        STG_E_NOMOREFILES = unchecked((int)0x80030012),
        STG_E_DISKISWRITEPROTECTED = unchecked((int)0x80030013),
        STG_E_SEEKERROR = unchecked((int)0x80030019),
        STG_E_WRITEFAULT = unchecked((int)0x8003001D),
        STG_E_READFAULT = unchecked((int)0x8003001E),
        STG_E_SHAREVIOLATION = unchecked((int)0x80030020),
        STG_E_LOCKVIOLATION = unchecked((int)0x80030021),
        STG_E_FILEALREADYEXISTS = unchecked((int)0x80030050),
        STG_E_INVALIDPARAMETER = unchecked((int)0x80030057),
        STG_E_MEDIUMFULL = unchecked((int)0x80030070),
        STG_E_PROPSETMISMATCHED = unchecked((int)0x800300F0),
        STG_E_ABNORMALAPIEXIT = unchecked((int)0x800300FA),
        STG_E_INVALIDHEADER = unchecked((int)0x800300FB),
        STG_E_INVALIDNAME = unchecked((int)0x800300FC),
        STG_E_UNKNOWN = unchecked((int)0x800300FD),
        STG_E_UNIMPLEMENTEDFUNCTION = unchecked((int)0x800300FE),
        STG_E_INVALIDFLAG = unchecked((int)0x800300FF),
        STG_E_INUSE = unchecked((int)0x80030100),
        STG_E_NOTCURRENT = unchecked((int)0x80030101),
        STG_E_REVERTED = unchecked((int)0x80030102),
        STG_E_CANTSAVE = unchecked((int)0x80030103),
        STG_E_OLDFORMAT = unchecked((int)0x80030104),
        STG_E_OLDDLL = unchecked((int)0x80030105),
        STG_E_SHAREREQUIRED = unchecked((int)0x80030106),
        STG_E_NOTFILEBASEDSTORAGE = unchecked((int)0x80030107),
        STG_E_EXTANTMARSHALLINGS = unchecked((int)0x80030108),
        STG_E_DOCFILECORRUPT = unchecked((int)0x80030109),
        STG_E_BADBASEADDRESS = unchecked((int)0x80030110),
        STG_E_INCOMPLETE = unchecked((int)0x80030201),
        STG_E_TERMINATED = unchecked((int)0x80030202),
        STG_S_CONVERTED = 0x00030200,
        STG_S_BLOCK = 0x00030201,
        STG_S_RETRYNOW = 0x00030202,
        STG_S_MONITORING = 0x00030203,
        SIMPLEREGION = 2,
        STRETCH_ANDSCANS = 1,
        STRETCH_ORSCANS = 2,
        STRETCH_DELETESCANS = 3,
        STRETCH_HALFTONE = 4,
        SETCOLORTABLE = 4,
        SETABORTPROC = 9,
        STARTDOC = 10,
        SETCOPYCOUNT = 17,
        SELECTPAPERSOURCE = 18,
        SETLINECAP = 21,
        SETLINEJOIN = 22,
        SETMITERLIMIT = 23,
        SETDIBSCALING = 32,
        SETKERNTRACK = 770,
        SETALLJUSTVALUES = 771,
        SETCHARSET = 772,
        STRETCHBLT = 2048,
        SAVE_CTM = 4101,
        SET_ARC_DIRECTION = 4102,
        SET_BACKGROUND_COLOR = 4103,
        SET_POLY_MODE = 4104,
        SET_SCREEN_ANGLE = 4105,
        SET_SPREAD = 4106,
        SET_CLIP_BOX = 4108,
        SET_BOUNDS = 4109,
        SET_MIRROR_MODE = 4110,
        SP_NOTREPORTED = 0x4000,
        SP_ERROR = (-1),
        SP_APPABORT = (-2),
        SP_USERABORT = (-3),
        SP_OUTOFDISK = (-4),
        SP_OUTOFMEMORY = (-5),
        SYMBOL_CHARSET = 2,
        SHIFTJIS_CHARSET = 128,
        SYSTEM_FONT = 13,
        SYSTEM_FIXED_FONT = 16,
        STOCK_LAST = 17;
        // STOCK_LAST = 16;
        public const int SIZEPALETTE = 104,
        SCALINGFACTORX = 114,
        SCALINGFACTORY = 115,
        SYSPAL_ERROR = 0,
        SYSPAL_STATIC = 1,
        SYSPAL_NOSTATIC = 2,
        SORT_STRINGSORT = 0x00001000,
        SUBLANG_NEUTRAL = 0x00,
        SUBLANG_DEFAULT = 0x01,
        SUBLANG_SYS_DEFAULT = 0x02,
        SUBLANG_ARABIC_SAUDI_ARABIA = 0x01,
        SUBLANG_ARABIC_IRAQ = 0x02,
        SUBLANG_ARABIC_EGYPT = 0x03,
        SUBLANG_ARABIC_LIBYA = 0x04,
        SUBLANG_ARABIC_ALGERIA = 0x05,
        SUBLANG_ARABIC_MOROCCO = 0x06,
        SUBLANG_ARABIC_TUNISIA = 0x07,
        SUBLANG_ARABIC_OMAN = 0x08,
        SUBLANG_ARABIC_YEMEN = 0x09,
        SUBLANG_ARABIC_SYRIA = 0x0a,
        SUBLANG_ARABIC_JORDAN = 0x0b,
        SUBLANG_ARABIC_LEBANON = 0x0c,
        SUBLANG_ARABIC_KUWAIT = 0x0d,
        SUBLANG_ARABIC_UAE = 0x0e,
        SUBLANG_ARABIC_BAHRAIN = 0x0f,
        SUBLANG_ARABIC_QATAR = 0x10,
        SUBLANG_CHINESE_TRADITIONAL = 0x01,
        SUBLANG_CHINESE_SIMPLIFIED = 0x02,
        SUBLANG_CHINESE_HONGKONG = 0x03,
        SUBLANG_CHINESE_SINGAPORE = 0x04,
        SUBLANG_DUTCH = 0x01,
        SUBLANG_DUTCH_BELGIAN = 0x02,
        SUBLANG_ENGLISH_US = 0x01,
        SUBLANG_ENGLISH_UK = 0x02,
        SUBLANG_ENGLISH_AUS = 0x03,
        SUBLANG_ENGLISH_CAN = 0x04,
        SUBLANG_ENGLISH_NZ = 0x05,
        SUBLANG_ENGLISH_EIRE = 0x06,
        SUBLANG_ENGLISH_SOUTH_AFRICA = 0x07,
        SUBLANG_ENGLISH_JAMAICA = 0x08,
        SUBLANG_ENGLISH_CARIBBEAN = 0x09,
        SUBLANG_ENGLISH_BELIZE = 0x0a,
        SUBLANG_ENGLISH_TRINIDAD = 0x0b,
        SUBLANG_FRENCH = 0x01,
        SUBLANG_FRENCH_BELGIAN = 0x02,
        SUBLANG_FRENCH_CANADIAN = 0x03,
        SUBLANG_FRENCH_SWISS = 0x04,
        SUBLANG_FRENCH_LUXEMBOURG = 0x05,
        SUBLANG_GERMAN = 0x01,
        SUBLANG_GERMAN_SWISS = 0x02,
        SUBLANG_GERMAN_AUSTRIAN = 0x03,
        SUBLANG_GERMAN_LUXEMBOURG = 0x04,
        SUBLANG_GERMAN_LIECHTENSTEIN = 0x05,
        SUBLANG_ITALIAN = 0x01,
        SUBLANG_ITALIAN_SWISS = 0x02,
        SUBLANG_KOREAN = 0x01,
        SUBLANG_KOREAN_JOHAB = 0x02,
        SUBLANG_NORWEGIAN_BOKMAL = 0x01,
        SUBLANG_NORWEGIAN_NYNORSK = 0x02,
        SUBLANG_PORTUGUESE = 0x02,
        SUBLANG_PORTUGUESE_BRAZILIAN = 0x01,
        SUBLANG_SERBIAN_LATIN = 0x02,
        SUBLANG_SERBIAN_CYRILLIC = 0x03,
        SUBLANG_SPANISH = 0x01,
        SUBLANG_SPANISH_MEXICAN = 0x02,
        SUBLANG_SPANISH_MODERN = 0x03,
        SUBLANG_SPANISH_GUATEMALA = 0x04,
        SUBLANG_SPANISH_COSTA_RICA = 0x05,
        SUBLANG_SPANISH_PANAMA = 0x06,
        SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x07,
        SUBLANG_SPANISH_VENEZUELA = 0x08,
        SUBLANG_SPANISH_COLOMBIA = 0x09,
        SUBLANG_SPANISH_PERU = 0x0a,
        SUBLANG_SPANISH_ARGENTINA = 0x0b,
        SUBLANG_SPANISH_ECUADOR = 0x0c,
        SUBLANG_SPANISH_CHILE = 0x0d,
        SUBLANG_SPANISH_URUGUAY = 0x0e,
        SUBLANG_SPANISH_PARAGUAY = 0x0f,
        SUBLANG_SPANISH_BOLIVIA = 0x10,
        SUBLANG_SPANISH_EL_SALVADOR = 0x11,
        SUBLANG_SPANISH_HONDURAS = 0x12,
        SUBLANG_SPANISH_NICARAGUA = 0x13,
        SUBLANG_SPANISH_PUERTO_RICO = 0x14,
        SUBLANG_SWEDISH = 0x01,
        SUBLANG_SWEDISH_FINLAND = 0x02,
        SORT_DEFAULT = 0x0,
        SORT_JAPANESE_XJIS = 0x0,
        SORT_JAPANESE_UNICODE = 0x1,
        SORT_CHINESE_BIG5 = 0x0,
        SORT_CHINESE_PRCP = 0x0,
        SORT_CHINESE_UNICODE = 0x1,
        SORT_CHINESE_PRC = 0x2,
        SORT_KOREAN_KSC = 0x0,
        SORT_KOREAN_UNICODE = 0x1,
        SORT_GERMAN_PHONE_BOOK = 0x1,
        STATUS_WAIT_0 = (0x00000000),
        STATUS_ABANDONED_WAIT_0 = (0x00000080),
        STATUS_USER_APC = (0x000000C0),
        STATUS_TIMEOUT = (0x00000102),
        STATUS_PENDING = (0x00000103),
        STATUS_SEGMENT_NOTIFICATION = (0x40000005),
        STATUS_GUARD_PAGE_VIOLATION = (unchecked((int)0x80000001)),
        STATUS_DATATYPE_MISALIGNMENT = (unchecked((int)0x80000002)),
        STATUS_BREAKPOINT = (unchecked((int)0x80000003)),
        STATUS_SINGLE_STEP = (unchecked((int)0x80000004)),
        STATUS_ACCESS_VIOLATION = (unchecked((int)0xC0000005)),
        STATUS_IN_PAGE_ERROR = (unchecked((int)0xC0000006)),
        STATUS_INVALID_HANDLE = (unchecked((int)0xC0000008)),
        STATUS_NO_MEMORY = (unchecked((int)0xC0000017)),
        STATUS_ILLEGAL_INSTRUCTION = (unchecked((int)0xC000001D)),
        STATUS_NONCONTINUABLE_EXCEPTION = (unchecked((int)0xC0000025)),
        STATUS_INVALID_DISPOSITION = (unchecked((int)0xC0000026)),
        STATUS_ARRAY_BOUNDS_EXCEEDED = (unchecked((int)0xC000008C)),
        STATUS_FLOAT_DENORMAL_OPERAND = (unchecked((int)0xC000008D)),
        STATUS_FLOAT_DIVIDE_BY_ZERO = (unchecked((int)0xC000008E)),
        STATUS_FLOAT_INEXACT_RESULT = (unchecked((int)0xC000008F)),
        STATUS_FLOAT_INVALID_OPERATION = (unchecked((int)0xC0000090)),
        STATUS_FLOAT_OVERFLOW = (unchecked((int)0xC0000091)),
        STATUS_FLOAT_STACK_CHECK = (unchecked((int)0xC0000092)),
        STATUS_FLOAT_UNDERFLOW = (unchecked((int)0xC0000093)),
        STATUS_INTEGER_DIVIDE_BY_ZERO = (unchecked((int)0xC0000094)),
        STATUS_INTEGER_OVERFLOW = (unchecked((int)0xC0000095)),
        STATUS_PRIVILEGED_INSTRUCTION = (unchecked((int)0xC0000096)),
        STATUS_STACK_OVERFLOW = (unchecked((int)0xC00000FD)),
        STATUS_CONTROL_C_EXIT = (unchecked((int)0xC000013A)),
        SIZE_OF_80387_REGISTERS = 80,
        SEMAPHORE_MODIFY_STATE = 0x0002,
        SECTION_QUERY = 0x0001,
        SECTION_MAP_WRITE = 0x0002,
        SECTION_MAP_READ = 0x0004,
        SECTION_MAP_EXECUTE = 0x0008,
        SECTION_EXTEND_SIZE = 0x0010,
        SEC_FILE = unchecked((int)0x800000),
        SEC_IMAGE = 0x1000000,
        SEC_RESERVE = 0x4000000,
        SEC_COMMIT = unchecked((int)0x8000000),
        SEC_NOCACHE = 0x10000000,
        SYNCHRONIZE = (0x00100000),
        STANDARD_RIGHTS_REQUIRED = (0x000F0000),
        STANDARD_RIGHTS_READ = ((0x00020000)),
        STANDARD_RIGHTS_WRITE = ((0x00020000)),
        STANDARD_RIGHTS_EXECUTE = ((0x00020000)),
        STANDARD_RIGHTS_ALL = (0x001F0000),
        SPECIFIC_RIGHTS_ALL = (0x0000FFFF),
        SID_REVISION = (1),
        SID_MAX_SUB_AUTHORITIES = (15),
        SID_RECOMMENDED_SUB_AUTHORITIES = (1),
        SECURITY_NULL_RID = (0x00000000),
        SECURITY_WORLD_RID = (0x00000000),
        SECURITY_LOCAL_RID = (0x00000000),
        SECURITY_CREATOR_OWNER_RID = (0x00000000),
        SECURITY_CREATOR_GROUP_RID = (0x00000001),
        SECURITY_CREATOR_OWNER_SERVER_RID = (0x00000002),
        SECURITY_CREATOR_GROUP_SERVER_RID = (0x00000003),
        SECURITY_DIALUP_RID = (0x00000001),
        SECURITY_NETWORK_RID = (0x00000002),
        SECURITY_BATCH_RID = (0x00000003),
        SECURITY_INTERACTIVE_RID = (0x00000004),
        SECURITY_SERVICE_RID = (0x00000006),
        SECURITY_ANONYMOUS_LOGON_RID = (0x00000007),
        SECURITY_PROXY_RID = (0x00000008),
        SECURITY_SERVER_LOGON_RID = (0x00000009),
        SECURITY_LOGON_IDS_RID = (0x00000005),
        SECURITY_LOGON_IDS_RID_COUNT = (3),
        SECURITY_LOCAL_SYSTEM_RID = (0x00000012),
        SECURITY_NT_NON_UNIQUE = (0x00000015),
        SECURITY_BUILTIN_DOMAIN_RID = (0x00000020),
        SE_GROUP_MANDATORY = (0x00000001),
        SE_GROUP_ENABLED_BY_DEFAULT = (0x00000002),
        SE_GROUP_ENABLED = (0x00000004),
        SE_GROUP_OWNER = (0x00000008),
        SE_GROUP_LOGON_ID = (unchecked((int)0xC0000000)),
        SYSTEM_AUDIT_ACE_TYPE = (0x2),
        SYSTEM_ALARM_ACE_TYPE = (0x3),
        SUCCESSFUL_ACCESS_ACE_FLAG = (0x40),
        SECURITY_DESCRIPTOR_REVISION = (1),
        SECURITY_DESCRIPTOR_REVISION1 = (1),
        SECURITY_DESCRIPTOR_MIN_LENGTH = (20),
        SE_OWNER_DEFAULTED = (0x0001),
        SE_GROUP_DEFAULTED = (0x0002),
        SE_DACL_PRESENT = (0x0004),
        SE_DACL_DEFAULTED = (0x0008),
        SE_SACL_PRESENT = (0x0010),
        SE_SACL_DEFAULTED = (0x0020),
        SE_SELF_RELATIVE = (unchecked((int)0x8000)),
        SE_PRIVILEGE_ENABLED_BY_DEFAULT = (0x00000001),
        SE_PRIVILEGE_ENABLED = (0x00000002),
        SE_PRIVILEGE_USED_FOR_ACCESS = (unchecked((int)0x80000000));
        public const bool SECURITY_DYNAMIC_TRACKING = (true),
        SECURITY_STATIC_TRACKING = (false);
        public const int SACL_SECURITY_INFORMATION = (0x00000008),
        SIZEOF_RFPO_DATA = 16,
        SERVICE_KERNEL_DRIVER = 0x00000001,
        SERVICE_FILE_SYSTEM_DRIVER = 0x00000002,
        SERVICE_ADAPTER = 0x00000004,
        SERVICE_RECOGNIZER_DRIVER = 0x00000008,
        SERVICE_WIN32_OWN_PROCESS = 0x00000010,
        SERVICE_WIN32_SHARE_PROCESS = 0x00000020,
        SERVICE_INTERACTIVE_PROCESS = 0x00000100,
        SERVICE_BOOT_START = 0x00000000,
        SERVICE_SYSTEM_START = 0x00000001,
        SERVICE_AUTO_START = 0x00000002,
        SERVICE_DEMAND_START = 0x00000003,
        SERVICE_DISABLED = 0x00000004,
        SERVICE_ERROR_IGNORE = 0x00000000,
        SERVICE_ERROR_NORMAL = 0x00000001,
        SERVICE_ERROR_SEVERE = 0x00000002,
        SERVICE_ERROR_CRITICAL = 0x00000003,
        SERVER_ACCESS_ADMINISTER = 0x00000001,
        SERVER_ACCESS_ENUMERATE = 0x00000002;
        public const char SC_GROUP_IDENTIFIERW = '+',
        SC_GROUP_IDENTIFIERA = '+';
        public const int SERVICE_NO_CHANGE = unchecked((int)0xFfffffff),
        SERVICE_ACTIVE = 0x00000001,
        SERVICE_INACTIVE = 0x00000002,
        SERVICE_CONTROL_STOP = 0x00000001,
        SERVICE_CONTROL_PAUSE = 0x00000002,
        SERVICE_CONTROL_CONTINUE = 0x00000003,
        SERVICE_CONTROL_INTERROGATE = 0x00000004,
        SERVICE_CONTROL_SHUTDOWN = 0x00000005,
        SERVICE_STOPPED = 0x00000001,
        SERVICE_START_PENDING = 0x00000002,
        SERVICE_STOP_PENDING = 0x00000003,
        SERVICE_RUNNING = 0x00000004,
        SERVICE_CONTINUE_PENDING = 0x00000005,
        SERVICE_PAUSE_PENDING = 0x00000006,
        SERVICE_PAUSED = 0x00000007,
        SERVICE_ACCEPT_STOP = 0x00000001,
        SERVICE_ACCEPT_PAUSE_CONTINUE = 0x00000002,
        SERVICE_ACCEPT_SHUTDOWN = 0x00000004,
        SC_MANAGER_CONNECT = 0x0001,
        SC_MANAGER_CREATE_SERVICE = 0x0002,
        SC_MANAGER_ENUMERATE_SERVICE = 0x0004,
        SC_MANAGER_LOCK = 0x0008,
        SC_MANAGER_QUERY_LOCK_STATUS = 0x0010,
        SC_MANAGER_MODIFY_BOOT_CONFIG = 0x0020,
        SERVICE_QUERY_CONFIG = 0x0001,
        SERVICE_CHANGE_CONFIG = 0x0002,
        SERVICE_QUERY_STATUS = 0x0004,
        SERVICE_ENUMERATE_DEPENDENTS = 0x0008,
        SERVICE_START = 0x0010,
        SERVICE_STOP = 0x0020,
        SERVICE_PAUSE_CONTINUE = 0x0040,
        SERVICE_INTERROGATE = 0x0080,
        SERVICE_USER_DEFINED_CONTROL = 0x0100,
        SB_HORZ = 0,
        SB_VERT = 1,
        SB_CTL = 2,
        SB_BOTH = 3,
        SB_LINEUP = 0,
        SB_LINELEFT = 0,
        SB_LINEDOWN = 1,
        SB_LINERIGHT = 1,
        SB_PAGEUP = 2,
        SB_PAGELEFT = 2,
        SB_PAGEDOWN = 3,
        SB_PAGERIGHT = 3,
        SB_THUMBPOSITION = 4,
        SB_THUMBTRACK = 5,
        SB_TOP = 6,
        SB_LEFT = 6,
        SB_BOTTOM = 7,
        SB_RIGHT = 7,
        SB_ENDSCROLL = 8,
        SW_HIDE = 0,
        SW_SHOWNORMAL = 1,
        SW_NORMAL = 1,
        SW_SHOWMINIMIZED = 2,
        SW_SHOWMAXIMIZED = 3,
        SW_MAXIMIZE = 3,
        SW_SHOWNOACTIVATE = 4,
        SW_SHOW = 5,
        SW_MINIMIZE = 6,
        SW_SHOWMINNOACTIVE = 7,
        SW_SHOWNA = 8,
        SW_RESTORE = 9,
        SW_SHOWDEFAULT = 10,
        SW_MAX = 10,
        SHOW_OPENWINDOW = 1,
        SHOW_ICONWINDOW = 2,
        SHOW_FULLSCREEN = 3,
        SHOW_OPENNOACTIVATE = 4,
        SW_PARENTCLOSING = 1,
        SW_OTHERZOOM = 2,
        SW_PARENTOPENING = 3,
        SW_OTHERUNZOOM = 4,
        ST_BEGINSWP = 0,
        ST_ENDSWP = 1,
        SMTO_NORMAL = 0x0000,
        SMTO_BLOCK = 0x0001,
        SMTO_ABORTIFHUNG = 0x0002,
        SIZE_RESTORED = 0,
        SIZE_MINIMIZED = 1,
        SIZE_MAXIMIZED = 2,
        SIZE_MAXSHOW = 3,
        SIZE_MAXHIDE = 4,
        SIZENORMAL = 0,
        SIZEICONIC = 1,
        SIZEFULLSCREEN = 2,
        SIZEZOOMSHOW = 3,
        SIZEZOOMHIDE = 4,
        SWP_NOSIZE = 0x0001,
        SWP_NOMOVE = 0x0002,
        SWP_NOZORDER = 0x0004,
        SWP_NOREDRAW = 0x0008,
        SWP_NOACTIVATE = 0x0010,
        SWP_FRAMECHANGED = 0x0020,
        SWP_SHOWWINDOW = 0x0040,
        SWP_HIDEWINDOW = 0x0080,
        SWP_NOCOPYBITS = 0x0100,
        SWP_NOOWNERZORDER = 0x0200,
        SWP_NOSENDCHANGING = 0x0400,
        SWP_DRAWFRAME = 0x0020,
        SWP_NOREPOSITION = 0x0200,
        SWP_DEFERERASE = 0x2000,
        SWP_ASYNCWINDOWPOS = 0x4000,
        SM_CXSCREEN = 0,
        SM_CYSCREEN = 1,
        SM_CXVSCROLL = 2,
        SM_CYHSCROLL = 3,
        SM_CYCAPTION = 4,
        SM_CXBORDER = 5,
        SM_CYBORDER = 6,
        SM_CXDLGFRAME = 7,
        SM_CYDLGFRAME = 8,
        SM_CYVTHUMB = 9,
        SM_CXHTHUMB = 10,
        SM_CXICON = 11,
        SM_CYICON = 12,
        SM_CXCURSOR = 13,
        SM_CYCURSOR = 14,
        SM_CYMENU = 15,
        SM_CXFULLSCREEN = 16,
        SM_CYFULLSCREEN = 17,
        SM_CYKANJIWINDOW = 18,
        SM_MOUSEPRESENT = 19,
        SM_CYVSCROLL = 20,
        SM_CXHSCROLL = 21,
        SM_DEBUG = 22,
        SM_SWAPBUTTON = 23,
        SM_RESERVED1 = 24,
        SM_RESERVED2 = 25,
        SM_RESERVED3 = 26,
        SM_RESERVED4 = 27,
        SM_CXMIN = 28,
        SM_CYMIN = 29,
        SM_CXSIZE = 30,
        SM_CYSIZE = 31,
        SM_CXFRAME = 32,
        SM_CYFRAME = 33,
        SM_CXMINTRACK = 34,
        SM_CYMINTRACK = 35,
        SM_CXDOUBLECLK = 36,
        SM_CYDOUBLECLK = 37,
        SM_CXICONSPACING = 38,
        SM_CYICONSPACING = 39,
        SM_MENUDROPALIGNMENT = 40,
        SM_PENWINDOWS = 41,
        SM_DBCSENABLED = 42,
        SM_CMOUSEBUTTONS = 43,
        SM_CXFIXEDFRAME = 7,
        SM_CYFIXEDFRAME = 8,
        SM_CXSIZEFRAME = 32,
        SM_CYSIZEFRAME = 33,
        SM_SECURE = 44,
        SM_CXEDGE = 45,
        SM_CYEDGE = 46,
        SM_CXMINSPACING = 47,
        SM_CYMINSPACING = 48,
        SM_CXSMICON = 49,
        SM_CYSMICON = 50,
        SM_CYSMCAPTION = 51,
        SM_CXSMSIZE = 52,
        SM_CYSMSIZE = 53,
        SM_CXMENUSIZE = 54,
        SM_CYMENUSIZE = 55,
        SM_ARRANGE = 56,
        SM_CXMINIMIZED = 57,
        SM_CYMINIMIZED = 58,
        SM_CXMAXTRACK = 59,
        SM_CYMAXTRACK = 60,
        SM_CXMAXIMIZED = 61,
        SM_CYMAXIMIZED = 62,
        SM_NETWORK = 63,
        SM_CLEANBOOT = 67,
        SM_CXDRAG = 68,
        SM_CYDRAG = 69,
        SM_SHOWSOUNDS = 70,
        SM_CXMENUCHECK = 71,
        SM_CYMENUCHECK = 72,
        SM_SLOWMACHINE = 73,
        SM_MIDEASTENABLED = 74,
        SM_MOUSEWHEELPRESENT = 75,
        SM_XVIRTUALSCREEN = 76,
        SM_YVIRTUALSCREEN = 77,
        SM_CXVIRTUALSCREEN = 78,
        SM_CYVIRTUALSCREEN = 79,
        SM_CMONITORS = 80,
        SM_SAMEDISPLAYFORMAT = 81,
        SM_CMETRICS = 83;
        public const int SW_SCROLLCHILDREN = 0x0001,
        SW_INVALIDATE = 0x0002,
        SW_ERASE = 0x0004,
        SC_SIZE = 0xF000,
        SC_MOVE = 0xF010,
        SC_MINIMIZE = 0xF020,
        SC_MAXIMIZE = 0xF030,
        SC_NEXTWINDOW = 0xF040,
        SC_PREVWINDOW = 0xF050,
        SC_CLOSE = 0xF060,
        SC_VSCROLL = 0xF070,
        SC_HSCROLL = 0xF080,
        SC_MOUSEMENU = 0xF090,
        SC_KEYMENU = 0xF100,
        SC_ARRANGE = 0xF110,
        SC_RESTORE = 0xF120,
        SC_TASKLIST = 0xF130,
        SC_HOTKEY = 0xF150,
        SC_DEFAULT = 0xF160,
        SC_MONITORPOWER = 0xF170,
        SC_CONTEXTHELP = 0xF180,
        SC_SEPARATOR = 0xF00F,
        SC_ICON = 0xF020,
        SC_ZOOM = 0xF030,
        SS_LEFT = 0x00000000,
        SS_CENTER = 0x00000001,
        SS_RIGHT = 0x00000002,
        SS_ICON = 0x00000003,
        SS_BLACKRECT = 0x00000004,
        SS_GRAYRECT = 0x00000005,
        SS_WHITERECT = 0x00000006,
        SS_BLACKFRAME = 0x00000007,
        SS_GRAYFRAME = 0x00000008,
        SS_WHITEFRAME = 0x00000009,
        SS_USERITEM = 0x0000000A,
        SS_SIMPLE = 0x0000000B,
        SS_LEFTNOWORDWRAP = 0x0000000C,
        SS_OWNERDRAW = 0x0000000D,
        SS_BITMAP = 0x0000000E,
        SS_ENHMETAFILE = 0x0000000F,
        SS_ETCHEDHORZ = 0x00000010,
        SS_ETCHEDVERT = 0x00000011,
        SS_ETCHEDFRAME = 0x00000012,
        SS_TYPEMASK = 0x0000001F,
        SS_NOPREFIX = 0x00000080,
        SS_NOTIFY = 0x00000100,
        SS_CENTERIMAGE = 0x00000200,
        SS_RIGHTJUST = 0x00000400,
        SS_REALSIZEIMAGE = 0x00000800,
        SS_SUNKEN = 0x00001000,
        SS_ENDELLIPSIS = 0x00004000,
        SS_PATHELLIPSIS = 0x00008000,
        SS_WORDELLIPSIS = 0x0000C000,
        SS_ELLIPSISMASK = 0x0000C000,
        STM_SETICON = 0x0170,
        STM_GETICON = 0x0171,
        STM_SETIMAGE = 0x0172,
        STM_GETIMAGE = 0x0173,
        STN_CLICKED = 0,
        STN_DBLCLK = 1,
        STN_ENABLE = 2,
        STN_DISABLE = 3,
        STM_MSGMAX = 0x0174,
        SBS_HORZ = 0x0000,
        SBS_VERT = 0x0001,
        SBS_TOPALIGN = 0x0002,
        SBS_LEFTALIGN = 0x0002,
        SBS_BOTTOMALIGN = 0x0004,
        SBS_RIGHTALIGN = 0x0004,
        SBS_SIZEBOXTOPLEFTALIGN = 0x0002,
        SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x0004,
        SBS_SIZEBOX = 0x0008,
        SBS_SIZEGRIP = 0x0010,
        SBM_SETPOS = 0x00E0,
        SBM_GETPOS = 0x00E1,
        SBM_SETRANGE = 0x00E2,
        SBM_SETRANGEREDRAW = 0x00E6,
        SBM_GETRANGE = 0x00E3,
        SBM_ENABLE_ARROWS = 0x00E4,
        SBM_SETSCROLLINFO = 0x00E9,
        SBM_GETSCROLLINFO = 0x00EA,
        SIF_RANGE = 0x0001,
        SIF_PAGE = 0x0002,
        SIF_POS = 0x0004,
        SIF_DISABLENOSCROLL = 0x0008,
        SIF_TRACKPOS = 0x0010,
        SIF_ALL = (0x0001|0x0002|0x0004|0x0010),
                  SPI_GETBEEP = 1,
        SPI_SETBEEP = 2,
        SPI_GETMOUSE = 3,
        SPI_SETMOUSE = 4,
        SPI_GETBORDER = 5,
        SPI_SETBORDER = 6,
        SPI_GETKEYBOARDSPEED = 10,
        SPI_SETKEYBOARDSPEED = 11,
        SPI_LANGDRIVER = 12,
        SPI_ICONHORIZONTALSPACING = 13,
        SPI_GETSCREENSAVETIMEOUT = 14,
        SPI_SETSCREENSAVETIMEOUT = 15,
        SPI_GETSCREENSAVEACTIVE = 16,
        SPI_SETSCREENSAVEACTIVE = 17,
        SPI_GETGRIDGRANULARITY = 18,
        SPI_SETGRIDGRANULARITY = 19,
        SPI_SETDESKWALLPAPER = 20,
        SPI_SETDESKPATTERN = 21,
        SPI_GETKEYBOARDDELAY = 22,
        SPI_SETKEYBOARDDELAY = 23,
        SPI_ICONVERTICALSPACING = 24,
        SPI_GETICONTITLEWRAP = 25,
        SPI_SETICONTITLEWRAP = 26,
        SPI_GETMENUDROPALIGNMENT = 27,
        SPI_SETMENUDROPALIGNMENT = 28,
        SPI_SETDOUBLECLKWIDTH = 29,
        SPI_SETDOUBLECLKHEIGHT = 30,
        SPI_GETICONTITLELOGFONT = 31,
        SPI_SETDOUBLECLICKTIME = 32,
        SPI_SETMOUSEBUTTONSWAP = 33,
        SPI_SETICONTITLELOGFONT = 34,
        SPI_GETFASTTASKSWITCH = 35,
        SPI_SETFASTTASKSWITCH = 36,
        SPI_SETDRAGFULLWINDOWS = 37,
        SPI_GETDRAGFULLWINDOWS = 38,
        SPI_GETNONCLIENTMETRICS = 41,
        SPI_SETNONCLIENTMETRICS = 42,
        SPI_GETMINIMIZEDMETRICS = 43,
        SPI_SETMINIMIZEDMETRICS = 44,
        SPI_GETICONMETRICS = 45,
        SPI_SETICONMETRICS = 46,
        SPI_SETWORKAREA = 47,
        SPI_GETWORKAREA = 48,
        SPI_SETPENWINDOWS = 49,
        SPI_GETHIGHCONTRAST = 66,
        SPI_SETHIGHCONTRAST = 67,
        SPI_GETKEYBOARDPREF = 68,
        SPI_SETKEYBOARDPREF = 69,
        SPI_GETSCREENREADER = 70,
        SPI_SETSCREENREADER = 71,
        SPI_GETANIMATION = 72,
        SPI_SETANIMATION = 73,
        SPI_GETFONTSMOOTHING = 74,
        SPI_SETFONTSMOOTHING = 75,
        SPI_SETDRAGWIDTH = 76,
        SPI_SETDRAGHEIGHT = 77,
        SPI_SETHANDHELD = 78,
        SPI_GETLOWPOWERTIMEOUT = 79,
        SPI_GETPOWEROFFTIMEOUT = 80,
        SPI_SETLOWPOWERTIMEOUT = 81,
        SPI_SETPOWEROFFTIMEOUT = 82,
        SPI_GETLOWPOWERACTIVE = 83,
        SPI_GETPOWEROFFACTIVE = 84,
        SPI_SETLOWPOWERACTIVE = 85,
        SPI_SETPOWEROFFACTIVE = 86,
        SPI_SETCURSORS = 87,
        SPI_SETICONS = 88,
        SPI_GETDEFAULTINPUTLANG = 89,
        SPI_SETDEFAULTINPUTLANG = 90,
        SPI_SETLANGTOGGLE = 91,
        SPI_GETWINDOWSEXTENSION = 92,
        SPI_SETMOUSETRAILS = 93,
        SPI_GETMOUSETRAILS = 94,
        SPI_SCREENSAVERRUNNING = 97,
        SPI_GETFILTERKEYS = 50,
        SPI_SETFILTERKEYS = 51,
        SPI_GETTOGGLEKEYS = 52,
        SPI_SETTOGGLEKEYS = 53,
        SPI_GETMOUSEKEYS = 54,
        SPI_SETMOUSEKEYS = 55,
        SPI_GETSHOWSOUNDS = 56,
        SPI_SETSHOWSOUNDS = 57,
        SPI_GETSTICKYKEYS = 58,
        SPI_SETSTICKYKEYS = 59,
        SPI_GETACCESSTIMEOUT = 60,
        SPI_SETACCESSTIMEOUT = 61,
        SPI_GETSERIALKEYS = 62,
        SPI_SETSERIALKEYS = 63,
        SPI_GETSOUNDSENTRY = 64,
        SPI_SETSOUNDSENTRY = 65,
        SPI_GETSNAPTODEFBUTTON = 95,
        SPI_SETSNAPTODEFBUTTON = 96,
        SPI_GETMOUSEHOVERWIDTH = 98,
        SPI_SETMOUSEHOVERWIDTH = 99,
        SPI_GETMOUSEHOVERHEIGHT = 100,
        SPI_SETMOUSEHOVERHEIGHT = 101,
        SPI_GETMOUSEHOVERTIME = 102,
        SPI_SETMOUSEHOVERTIME = 103,
        SPI_GETWHEELSCROLLLINES = 104,
        SPI_SETWHEELSCROLLLINES = 105,
        SPI_GETKEYBOARDCUES = 0x100A,
        SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES,
        SPIF_UPDATEINIFILE = 0x0001,
        SPIF_SENDWININICHANGE = 0x0002,
        SPIF_SENDCHANGE = 0x0002,
        SERKF_SERIALKEYSON = 0x00000001,
        SERKF_AVAILABLE = 0x00000002,
        SERKF_INDICATOR = 0x00000004,
        SKF_STICKYKEYSON = 0x00000001,
        SKF_AVAILABLE = 0x00000002,
        SKF_HOTKEYACTIVE = 0x00000004,
        SKF_CONFIRMHOTKEY = 0x00000008,
        SKF_HOTKEYSOUND = 0x00000010,
        SKF_INDICATOR = 0x00000020,
        SKF_AUDIBLEFEEDBACK = 0x00000040,
        SKF_TRISTATE = 0x00000080,
        SKF_TWOKEYSOFF = 0x00000100,
        SSGF_NONE = 0,
        SSGF_DISPLAY = 3,
        SSTF_NONE = 0,
        SSTF_CHARS = 1,
        SSTF_BORDER = 2,
        SSTF_DISPLAY = 3,
        SSWF_NONE = 0,
        SSWF_TITLE = 1,
        SSWF_WINDOW = 2,
        SSWF_DISPLAY = 3,
        SSWF_CUSTOM = 4,
        SSF_SOUNDSENTRYON = 0x00000001,
        SSF_AVAILABLE = 0x00000002,
        SSF_INDICATOR = 0x00000004,
        SLE_ERROR = 0x00000001,
        SLE_MINORERROR = 0x00000002,
        SLE_WARNING = 0x00000003,
        STD_CUT = 0,
        STD_COPY = 1,
        STD_PASTE = 2,
        STD_UNDO = 3,
        STD_REDOW = 4,
        STD_DELETE = 5,
        STD_FILENEW = 6,
        STD_FILEOPEN = 7,
        STD_FILESAVE = 8,
        STD_PRINTPRE = 9,
        STD_PROPERTIES = 10,
        STD_HELP = 11,
        STD_FIND = 12,
        STD_REPLACE = 13,
        STD_PRINT = 14,
        SBARS_SIZEGRIP = 0x0100,
        SB_SETTEXTA = (0x0400+1),
        SB_SETTEXTW = (0x0400+11),
        SB_GETTEXTA = (0x0400+2),
        SB_GETTEXTW = (0x0400+13),
        SB_GETTEXTLENGTHA = (0x0400+3),
        SB_GETTEXTLENGTHW = (0x0400+12),
        SB_SETPARTS = (0x0400+4),
        SB_GETPARTS = (0x0400+6),
        SB_GETBORDERS = (0x0400+7),
        SB_SETMINHEIGHT = (0x0400+8),
        SB_SIMPLE = (0x0400+9),
        SB_GETRECT = (0x0400+10),
        SB_ISSIMPLE = (0x0400+14),
        SB_SETICON = (0x0400+15),
        SB_SETTIPTEXTA = (0x0400+16),
        SB_SETTIPTEXTW = (0x0400+17),
        SB_GETTIPTEXTA = (0x0400+18),
        SB_GETTIPTEXTW = (0x0400+19),
        SB_GETICON = (0x0400+20),
        SB_SETBKCOLOR = NativeMethods.CCM_SETBKCOLOR,
        SB_SETUNICODEFORMAT = NativeMethods.CCM_SETUNICODEFORMAT,
        SB_GETUNICODEFORMAT = NativeMethods.CCM_GETUNICODEFORMAT,
        SBT_OWNERDRAW = 0x1000,
        SBT_NOBORDERS = 0x0100,
        SBT_POPOUT = 0x0200,
        SBT_RTLREADING = 0x0400,
        SBT_TOOLTIPS = 0x0800;
        public const char SC_GROUP_IDENTIFIER = '+';
        public const int SYSRGN = 4;
        public const int STILL_ACTIVE = (0x00000103),
        SEMAPHORE_ALL_ACCESS = ((0x000F0000)|(0x00100000)|0x3),
        SRCCOPY = 0x00CC0020,
        SRCPAINT = 0x00EE0086,
        SRCAND = 0x008800C6,
        SRCINVERT = 0x00660046,
        SRCERASE = 0x00440328,
        STD_INPUT_HANDLE = -10,
        STD_OUTPUT_HANDLE = -11,
        STD_ERROR_HANDLE = -12,
        SBN_FIRST = (0-880),
        SBN_LAST = (0-899),
        SBN_SIMPLEMODECHANGE = (SBN_FIRST - 0);

        public const int S_OK =      0x00000000;
        public const int S_FALSE =   0x00000001;

        public static bool Succeeded(int hr) {
            return(hr >= 0);
        }

        public static bool Failed(int hr) {
            return(hr < 0);
        }


        public const bool TRUE = true;
        public const int TIMEOUT_ASYNC = unchecked((int)0xFFFFFFFF),
        TIME_MS = 0x0001,
        TIME_SAMPLES = 0x0002,
        TIME_BYTES = 0x0004,
        TIME_SMPTE = 0x0008,
        TIME_MIDI = 0x0010,
        TIME_TICKS = 0x0020,
        TIMERR_BASE = 96,
        TIMERR_NOERROR = (0),
        TIMERR_NOCANDO = (96+1),
        TIMERR_STRUCT = (96+33),
        TIME_ONESHOT = 0x0000,
        TIME_PERIODIC = 0x0001,
        TIME_CALLBACK_FUNCTION = 0x0000,
        TIME_CALLBACK_EVENT_SET = 0x0010,
        TIME_CALLBACK_EVENT_PULSE = 0x0020,
        TCP_BSDURGENT = 0x7000,
        TF_DISCONNECT = 0x01,
        TF_REUSE_SOCKET = 0x02,
        TF_WRITE_BEHIND = 0x04,
        TRANSPORT_TYPE_CN = 0x1,
        TRANSPORT_TYPE_DG = 0x2,
        TRANSPORT_TYPE_LPC = 0x4,
        TRANSPORT_TYPE_WMSG = unchecked((int)0x8);
        public const int TRUNCATE_EXISTING = 5,
        THREAD_PRIORITY_NORMAL = 0,
        TWOSTOPBITS = 2,
        TC_NORMAL = 0,
        TC_HARDERR = 1,
        TC_GP_TRAP = 2,
        TC_SIGNAL = 3;
        // TRUE = 1;
        public const int TYPE_E_BUFFERTOOSMALL = unchecked((int)0x80028016),
        TYPE_E_INVDATAREAD = unchecked((int)0x80028018),
        TYPE_E_UNSUPFORMAT = unchecked((int)0x80028019),
        TYPE_E_REGISTRYACCESS = unchecked((int)0x8002801C),
        TYPE_E_LIBNOTREGISTERED = unchecked((int)0x8002801D),
        TYPE_E_UNDEFINEDTYPE = unchecked((int)0x80028027),
        TYPE_E_QUALIFIEDNAMEDISALLOWED = unchecked((int)0x80028028),
        TYPE_E_INVALIDSTATE = unchecked((int)0x80028029),
        TYPE_E_WRONGTYPEKIND = unchecked((int)0x8002802A),
        TYPE_E_ELEMENTNOTFOUND = unchecked((int)0x8002802B),
        TYPE_E_AMBIGUOUSNAME = unchecked((int)0x8002802C),
        TYPE_E_NAMECONFLICT = unchecked((int)0x8002802D),
        TYPE_E_UNKNOWNLCID = unchecked((int)0x8002802E),
        TYPE_E_DLLFUNCTIONNOTFOUND = unchecked((int)0x8002802F),
        TYPE_E_BADMODULEKIND = unchecked((int)0x800288BD),
        TYPE_E_SIZETOOBIG = unchecked((int)0x800288C5),
        TYPE_E_DUPLICATEID = unchecked((int)0x800288C6),
        TYPE_E_INVALIDID = unchecked((int)0x800288CF),
        TYPE_E_TYPEMISMATCH = unchecked((int)0x80028CA0),
        TYPE_E_OUTOFBOUNDS = unchecked((int)0x80028CA1),
        TYPE_E_IOERROR = unchecked((int)0x80028CA2),
        TYPE_E_CANTCREATETMPFILE = unchecked((int)0x80028CA3),
        TYPE_E_CANTLOADLIBRARY = unchecked((int)0x80029C4A),
        TYPE_E_INCONSISTENTPROPFUNCS = unchecked((int)0x80029C83),
        TYPE_E_CIRCULARTYPE = unchecked((int)0x80029C84),
        TRUST_E_PROVIDER_UNKNOWN = unchecked((int)0x800B0001),
        TRUST_E_ACTION_UNKNOWN = unchecked((int)0x800B0002),
        TRUST_E_SUBJECT_FORM_UNKNOWN = unchecked((int)0x800B0003),
        TRUST_E_SUBJECT_NOT_TRUSTED = unchecked((int)0x800B0004),
        TRUST_E_NOSIGNATURE = unchecked((int)0x800B0100),
        TA_NOUPDATECP = 0,
        TA_UPDATECP = 1,
        TA_LEFT = 0,
        TA_RIGHT = 2,
        TA_CENTER = 6,
        TA_TOP = 0,
        TA_BOTTOM = 8,
        TA_BASELINE = 24,
        TA_RTLREADING = 256,
        TA_MASK = (24+6+1+256);
        // TA_MASK = (24+6+1);
        public const int TRANSFORM_CTM = 4107,
        TCI_SRCCHARSET = 1,
        TCI_SRCCODEPAGE = 2,
        TCI_SRCFONTSIG = 3,
        TMPF_FIXED_PITCH = 0x01,
        TMPF_VECTOR = 0x02,
        TMPF_DEVICE = 0x08,
        TMPF_TRUETYPE = 0x04,
        TURKISH_CHARSET = 162,
        THAI_CHARSET = 222,
        TRUETYPE_FONTTYPE = 0x004,
        TRANSPARENT = 1,
        TECHNOLOGY = 2,
        TEXTCAPS = 34,
        TC_OP_CHARACTER = 0x00000001,
        TC_OP_STROKE = 0x00000002,
        TC_CP_STROKE = 0x00000004,
        TC_CR_90 = 0x00000008,
        TC_CR_ANY = 0x00000010,
        TC_SF_X_YINDEP = 0x00000020,
        TC_SA_DOUBLE = 0x00000040,
        TC_SA_INTEGER = 0x00000080,
        TC_SA_CONTIN = 0x00000100,
        TC_EA_DOUBLE = 0x00000200,
        TC_IA_ABLE = 0x00000400,
        TC_UA_ABLE = 0x00000800,
        TC_SO_ABLE = 0x00001000,
        TC_RA_ABLE = 0x00002000,
        TC_VA_ABLE = 0x00004000,
        TC_RESERVED = 0x00008000,
        TC_SCROLLBLT = 0x00010000,
        TT_POLYGON_TYPE = 24,
        TT_PRIM_LINE = 1,
        TT_PRIM_QSPLINE = 2,
        TT_AVAILABLE = 0x0001,
        TT_ENABLED = 0x0002,
        TIME_NOMINUTESORSECONDS = 0x00000001,
        TIME_NOSECONDS = 0x00000002,
        TIME_NOTIMEMARKER = 0x00000004,
        TIME_FORCE24HOURFORMAT = 0x00000008,
        THREAD_TERMINATE = (0x0001),
        THREAD_SUSPEND_RESUME = (0x0002),
        THREAD_GET_CONTEXT = (0x0008),
        THREAD_SET_CONTEXT = (0x0010),
        THREAD_SET_INFORMATION = (0x0020),
        THREAD_QUERY_INFORMATION = (0x0040),
        THREAD_SET_THREAD_TOKEN = (0x0080),
        THREAD_IMPERSONATE = (0x0100),
        THREAD_DIRECT_IMPERSONATION = (0x0200),
        TLS_MINIMUM_AVAILABLE = 64,
        THREAD_BASE_PRIORITY_LOWRT = 15,
        THREAD_BASE_PRIORITY_MAX = 2,
        THREAD_BASE_PRIORITY_MIN = -2,
        THREAD_BASE_PRIORITY_IDLE = -15,
        TIME_ZONE_ID_UNKNOWN = 0,
        TIME_ZONE_ID_STANDARD = 1,
        TIME_ZONE_ID_DAYLIGHT = 2,
        TOKEN_ASSIGN_PRIMARY = (0x0001),
        TOKEN_DUPLICATE = (0x0002),
        TOKEN_IMPERSONATE = (0x0004),
        TOKEN_QUERY = (0x0008),
        TOKEN_QUERY_SOURCE = (0x0010),
        TOKEN_ADJUST_PRIVILEGES = (0x0020),
        TOKEN_ADJUST_GROUPS = (0x0040),
        TOKEN_ADJUST_DEFAULT = (0x0080),
        TOKEN_EXECUTE = (((0x00020000))),
        TOKEN_SOURCE_LENGTH = 8,
        TAPE_ERASE_SHORT = 0,
        TAPE_ERASE_LONG = 1,
        TAPE_LOAD = 0,
        TAPE_UNLOAD = 1,
        TAPE_TENSION = 2,
        TAPE_LOCK = 3,
        TAPE_UNLOCK = 4,
        TAPE_FORMAT = 5,
        TAPE_SETMARKS = 0,
        TAPE_FILEMARKS = 1,
        TAPE_SHORT_FILEMARKS = 2,
        TAPE_LONG_FILEMARKS = 3,
        TAPE_ABSOLUTE_POSITION = 0,
        TAPE_LOGICAL_POSITION = 1,
        TAPE_PSEUDO_LOGICAL_POSITION = 2,
        TAPE_REWIND = 0,
        TAPE_ABSOLUTE_BLOCK = 1,
        TAPE_LOGICAL_BLOCK = 2,
        TAPE_PSEUDO_LOGICAL_BLOCK = 3,
        TAPE_SPACE_END_OF_DATA = 4,
        TAPE_SPACE_RELATIVE_BLOCKS = 5,
        TAPE_SPACE_FILEMARKS = 6,
        TAPE_SPACE_SEQUENTIAL_FMKS = 7,
        TAPE_SPACE_SETMARKS = 8,
        TAPE_SPACE_SEQUENTIAL_SMKS = 9,
        TAPE_DRIVE_FIXED = 0x00000001,
        TAPE_DRIVE_SELECT = 0x00000002,
        TAPE_DRIVE_INITIATOR = 0x00000004,
        TAPE_DRIVE_ERASE_SHORT = 0x00000010,
        TAPE_DRIVE_ERASE_LONG = 0x00000020,
        TAPE_DRIVE_ERASE_BOP_ONLY = 0x00000040,
        TAPE_DRIVE_ERASE_IMMEDIATE = 0x00000080,
        TAPE_DRIVE_TAPE_CAPACITY = 0x00000100,
        TAPE_DRIVE_TAPE_REMAINING = 0x00000200,
        TAPE_DRIVE_FIXED_BLOCK = 0x00000400,
        TAPE_DRIVE_VARIABLE_BLOCK = 0x00000800,
        TAPE_DRIVE_WRITE_PROTECT = 0x00001000,
        TAPE_DRIVE_EOT_WZ_SIZE = 0x00002000,
        TAPE_DRIVE_ECC = 0x00010000,
        TAPE_DRIVE_COMPRESSION = 0x00020000,
        TAPE_DRIVE_PADDING = 0x00040000,
        TAPE_DRIVE_REPORT_SMKS = 0x00080000,
        TAPE_DRIVE_GET_ABSOLUTE_BLK = 0x00100000,
        TAPE_DRIVE_GET_LOGICAL_BLK = 0x00200000,
        TAPE_DRIVE_SET_EOT_WZ_SIZE = 0x00400000,
        TAPE_DRIVE_EJECT_MEDIA = 0x01000000,
        TAPE_DRIVE_RESERVED_BIT = unchecked((int)0x80000000),
        TAPE_DRIVE_LOAD_UNLOAD = unchecked((int)0x80000001),
        TAPE_DRIVE_TENSION = unchecked((int)0x80000002),
        TAPE_DRIVE_LOCK_UNLOCK = unchecked((int)0x80000004),
        TAPE_DRIVE_REWIND_IMMEDIATE = unchecked((int)0x80000008),
        TAPE_DRIVE_SET_BLOCK_SIZE = unchecked((int)0x80000010),
        TAPE_DRIVE_LOAD_UNLD_IMMED = unchecked((int)0x80000020),
        TAPE_DRIVE_TENSION_IMMED = unchecked((int)0x80000040),
        TAPE_DRIVE_LOCK_UNLK_IMMED = unchecked((int)0x80000080),
        TAPE_DRIVE_SET_ECC = unchecked((int)0x80000100),
        TAPE_DRIVE_SET_COMPRESSION = unchecked((int)0x80000200),
        TAPE_DRIVE_SET_PADDING = unchecked((int)0x80000400),
        TAPE_DRIVE_SET_REPORT_SMKS = unchecked((int)0x80000800),
        TAPE_DRIVE_ABSOLUTE_BLK = unchecked((int)0x80001000),
        TAPE_DRIVE_ABS_BLK_IMMED = unchecked((int)0x80002000),
        TAPE_DRIVE_LOGICAL_BLK = unchecked((int)0x80004000),
        TAPE_DRIVE_LOG_BLK_IMMED = unchecked((int)0x80008000),
        TAPE_DRIVE_END_OF_DATA = unchecked((int)0x80010000),
        TAPE_DRIVE_RELATIVE_BLKS = unchecked((int)0x80020000),
        TAPE_DRIVE_FILEMARKS = unchecked((int)0x80040000),
        TAPE_DRIVE_SEQUENTIAL_FMKS = unchecked((int)0x80080000),
        TAPE_DRIVE_SETMARKS = unchecked((int)0x80100000),
        TAPE_DRIVE_SEQUENTIAL_SMKS = unchecked((int)0x80200000),
        TAPE_DRIVE_REVERSE_POSITION = unchecked((int)0x80400000),
        TAPE_DRIVE_SPACE_IMMEDIATE = unchecked((int)0x80800000),
        TAPE_DRIVE_WRITE_SETMARKS = unchecked((int)0x81000000),
        TAPE_DRIVE_WRITE_FILEMARKS = unchecked((int)0x82000000),
        TAPE_DRIVE_WRITE_SHORT_FMKS = unchecked((int)0x84000000),
        TAPE_DRIVE_WRITE_LONG_FMKS = unchecked((int)0x88000000),
        TAPE_DRIVE_WRITE_MARK_IMMED = unchecked((int)0x90000000),
        TAPE_DRIVE_FORMAT = unchecked((int)0xA0000000),
        TAPE_DRIVE_FORMAT_IMMEDIATE = unchecked((int)0xC0000000),
        TAPE_DRIVE_HIGH_FEATURES = unchecked((int)0x80000000),
        TAPE_FIXED_PARTITIONS = 0,
        TAPE_SELECT_PARTITIONS = 1,
        TAPE_INITIATOR_PARTITIONS = 2,
        TME_HOVER = 0x00000001,
        TME_LEAVE = 0x00000002,
        TME_QUERY = 0x40000000,
        TME_CANCEL = unchecked((int)0x80000000),
        TPM_LEFTBUTTON = 0x0000,
        TPM_RIGHTBUTTON = 0x0002,
        TPM_LEFTALIGN = 0x0000,
        TPM_CENTERALIGN = 0x0004,
        TPM_RIGHTALIGN = 0x0008,
        TPM_TOPALIGN = 0x0000,
        TPM_VCENTERALIGN = 0x0010,
        TPM_BOTTOMALIGN = 0x0020,
        TPM_HORIZONTAL = 0x0000,
        TPM_VERTICAL = 0x0040,
        TPM_NONOTIFY = 0x0080,
        TPM_RETURNCMD = 0x0100,
        TKF_TOGGLEKEYSON = 0x00000001,
        TKF_AVAILABLE = 0x00000002,
        TKF_HOTKEYACTIVE = 0x00000004,
        TKF_CONFIRMHOTKEY = 0x00000008,
        TKF_HOTKEYSOUND = 0x00000010,
        TKF_INDICATOR = 0x00000020,
        TV_FIRST = 0x1100,
        TVN_FIRST = (0-400),
        TVN_LAST = (0-499),
        TTN_FIRST = (0-520),
        TTN_LAST = (0-549),
        TCN_FIRST = (0-550),
        TCN_LAST = (0-580),
        TBN_FIRST = (0-700),
        TBN_LAST = (0-720),
        TBSTATE_CHECKED = 0x01,
        TBSTATE_PRESSED = 0x02,
        TBSTATE_ENABLED = 0x04,
        TBSTATE_HIDDEN = 0x08,
        TBSTATE_INDETERMINATE = 0x10,
        TBSTATE_WRAP = 0x20,
        TBSTATE_ELLIPSES = 0x40,
        TBSTATE_MARKED = unchecked((int)0x80),
        TBSTYLE_BUTTON = 0x00,
        TBSTYLE_SEP = 0x01,
        TBSTYLE_CHECK = 0x02,
        TBSTYLE_GROUP = 0x04,
        TBSTYLE_CHECKGROUP = (0x04|0x02),
        TBSTYLE_DROPDOWN = 0x08,
        TBSTYLE_AUTOSIZE = 0x10,
        TBSTYLE_NOPREFIX = 0x20,
        TBSTYLE_TOOLTIPS = 0x0100,
        TBSTYLE_WRAPABLE = 0x0200,
        TBSTYLE_ALTDRAG = 0x0400,
        TBSTYLE_FLAT = 0x0800,
        TBSTYLE_LIST = 0x1000,
        TBSTYLE_CUSTOMERASE = 0x2000,
        TBSTYLE_REGISTERDROP = 0x4000,
        TBSTYLE_TRANSPARENT = unchecked((int)0x8000),
        TBSTYLE_EX_DRAWDDARROWS = 0x00000001,
        TB_ENABLEBUTTON = (0x0400+1),
        TB_CHECKBUTTON = (0x0400+2),
        TB_PRESSBUTTON = (0x0400+3),
        TB_HIDEBUTTON = (0x0400+4),
        TB_INDETERMINATE = (0x0400+5),
        TB_MARKBUTTON = (0x0400+6),
        TB_ISBUTTONENABLED = (0x0400+9),
        TB_ISBUTTONCHECKED = (0x0400+10),
        TB_ISBUTTONPRESSED = (0x0400+11),
        TB_ISBUTTONHIDDEN = (0x0400+12),
        TB_ISBUTTONINDETERMINATE = (0x0400+13),
        TB_ISBUTTONHIGHLIGHTED = (0x0400+14),
        TB_SETSTATE = (0x0400+17),
        TB_GETSTATE = (0x0400+18),
        TB_ADDBITMAP = (0x0400+19),
        TB_ADDBUTTONSA = (0x0400+20),
        TB_ADDBUTTONSW = (0x0400+68),
        TB_INSERTBUTTONA = (0x0400+21),
        TB_INSERTBUTTONW = (0x0400+67),
        TB_DELETEBUTTON = (0x0400+22),
        TB_GETBUTTON = (0x0400+23),
        TB_BUTTONCOUNT = (0x0400+24),
        TB_COMMANDTOINDEX = (0x0400+25),
        TB_SAVERESTOREA = (0x0400+26),
        TB_SAVERESTOREW = (0x0400+76),
        TB_CUSTOMIZE = (0x0400+27),
        TB_ADDSTRINGA = (0x0400+28),
        TB_ADDSTRINGW = (0x0400+77),
        TB_GETITEMRECT = (0x0400+29),
        TB_BUTTONSTRUCTSIZE = (0x0400+30),
        TB_SETBUTTONSIZE = (0x0400+31),
        TB_SETBITMAPSIZE = (0x0400+32),
        TB_AUTOSIZE = (0x0400+33),
        TB_GETTOOLTIPS = (0x0400+35),
        TB_SETTOOLTIPS = (0x0400+36),
        TB_SETPARENT = (0x0400+37),
        TB_SETROWS = (0x0400+39),
        TB_GETROWS = (0x0400+40),
        TB_GETBITMAPFLAGS = (0x0400+41),
        TB_SETCMDID = (0x0400+42),
        TB_CHANGEBITMAP = (0x0400+43),
        TB_GETBITMAP = (0x0400+44),
        TB_GETBUTTONTEXTA = (0x0400+45),
        TB_GETBUTTONTEXTW = (0x0400+75),
        TB_REPLACEBITMAP = (0x0400+46),
        TB_SETINDENT = (0x0400+47),
        TB_SETIMAGELIST = (0x0400+48),
        TB_GETIMAGELIST = (0x0400+49),
        TB_LOADIMAGES = (0x0400+50),
        TB_GETRECT = (0x0400+51),
        TB_SETHOTIMAGELIST = (0x0400+52),
        TB_GETHOTIMAGELIST = (0x0400+53),
        TB_SETDISABLEDIMAGELIST = (0x0400+54),
        TB_GETDISABLEDIMAGELIST = (0x0400+55),
        TB_SETSTYLE = (0x0400+56),
        TB_GETSTYLE = (0x0400+57),
        TB_GETBUTTONSIZE = (0x0400+58),
        TB_SETBUTTONWIDTH = (0x0400+59),
        TB_SETMAXTEXTROWS = (0x0400+60),
        TB_GETTEXTROWS = (0x0400+61),
        TB_GETOBJECT = (0x0400+62),
        TB_GETBUTTONINFOW = (0x0400+63),
        TB_SETBUTTONINFOW = (0x0400+64),
        TB_GETBUTTONINFOA = (0x0400+65),
        TB_SETBUTTONINFOA = (0x0400+66),
        TB_HITTEST = (0x0400+69),
        TB_GETHOTITEM = (0x0400+71),
        TB_SETHOTITEM = (0x0400+72),
        TB_SETANCHORHIGHLIGHT = (0x0400+73),
        TB_GETANCHORHIGHLIGHT = (0x0400+74),
        TB_MAPACCELERATORA = (0x0400+78),
        TB_GETINSERTMARK = (0x0400+79),
        TB_SETINSERTMARK = (0x0400+80),
        TB_INSERTMARKHITTEST = (0x0400+81),
        TB_MOVEBUTTON = (0x0400+82),
        TB_GETMAXSIZE = (0x0400+83),
        TB_SETEXTENDEDSTYLE = (0x0400+84),
        TB_GETEXTENDEDSTYLE = (0x0400+85),
        TB_GETPADDING = (0x0400+86),
        TB_SETPADDING = (0x0400+87),
        TB_SETINSERTMARKCOLOR = (0x0400+88),
        TB_GETINSERTMARKCOLOR = (0x0400+89),
        TB_MAPACCELERATORW = (0x0400+90),
        TB_SETCOLORSCHEME = NativeMethods.CCM_SETCOLORSCHEME,
        TB_GETCOLORSCHEME = NativeMethods.CCM_GETCOLORSCHEME,
        TB_SETUNICODEFORMAT = NativeMethods.CCM_SETUNICODEFORMAT,
        TB_GETUNICODEFORMAT = NativeMethods.CCM_GETUNICODEFORMAT,
        TBIMHT_AFTER = 0x00000001,
        TBIMHT_BACKGROUND = 0x00000002,
        TBIF_IMAGE = 0x00000001,
        TBIF_TEXT = 0x00000002,
        TBIF_STATE = 0x00000004,
        TBIF_STYLE = 0x00000008,
        TBIF_LPARAM = 0x00000010,
        TBIF_COMMAND = 0x00000020,
        TBIF_SIZE = 0x00000040,
        TBBF_LARGE = 0x0001,
        TBN_GETBUTTONINFOA = ((0-700)-0),
        TBN_GETBUTTONINFOW = ((0-700)-20),
        TBN_BEGINDRAG = ((0-700)-1),
        TBN_ENDDRAG = ((0-700)-2),
        TBN_BEGINADJUST = ((0-700)-3),
        TBN_ENDADJUST = ((0-700)-4),
        TBN_RESET = ((0-700)-5),
        TBN_QUERYINSERT = ((0-700)-6),
        TBN_QUERYDELETE = ((0-700)-7),
        TBN_TOOLBARCHANGE = ((0-700)-8),
        TBN_CUSTHELP = ((0-700)-9),
        TBN_DROPDOWN = ((0-700)-10),
        TBN_CLOSEUP = ((0-700)-11),
        TBN_GETOBJECT = ((0-700)-12),
        TBN_HOTITEMCHANGE = ((0-700)-13),
        TBN_DRAGOUT = ((0-700)-14),
        TBN_DELETINGBUTTON = ((0-700)-15),
        TBN_GETDISPINFOA = ((0-700)-16),
        TBN_GETDISPINFOW = ((0-700)-17),
        TBN_GETINFOTIPA = ((0-700)-18),
        TBN_GETINFOTIPW = ((0-700)-19),
        TTS_ALWAYSTIP = 0x01,
        TTS_NOPREFIX = 0x02,
        TTF_IDISHWND = 0x0001,
        TTF_CENTERTIP = 0x0002,
        TTF_RTLREADING = 0x0004,
        TTF_SUBCLASS = 0x0010,
        TTF_TRACK = 0x0020,
        TTF_ABSOLUTE = 0x0080,
        TTF_TRANSPARENT = 0x0100,
        TTF_DI_SETITEM = unchecked((int)0x8000),
        TTDT_AUTOMATIC = 0,
        TTDT_RESHOW = 1,
        TTDT_AUTOPOP = 2,
        TTDT_INITIAL = 3,
        TTM_ACTIVATE = (0x0400+1),
        TTM_ADJUSTRECT = (0x400 + 31),
        TTM_SETDELAYTIME = (0x0400+3),
        TTM_ADDTOOLA = (0x0400+4),
        TTM_ADDTOOLW = (0x0400+50),
        TTM_DELTOOLA = (0x0400+5),
        TTM_DELTOOLW = (0x0400+51),
        TTM_NEWTOOLRECTA = (0x0400+6),
        TTM_NEWTOOLRECTW = (0x0400+52),
        TTM_RELAYEVENT = (0x0400+7),
        TTM_GETTOOLINFOA = (0x0400+8),
        TTM_GETTOOLINFOW = (0x0400+53),
        TTM_SETTOOLINFOA = (0x0400+9),
        TTM_SETTOOLINFOW = (0x0400+54),
        TTM_HITTESTA = (0x0400+10),
        TTM_HITTESTW = (0x0400+55),
        TTM_GETTEXTA = (0x0400+11),
        TTM_GETTEXTW = (0x0400+56),
        TTM_UPDATE = (0x0400+29),
        TTM_UPDATETIPTEXTA = (0x0400+12),
        TTM_UPDATETIPTEXTW = (0x0400+57),
        TTM_GETTOOLCOUNT = (0x0400+13),
        TTM_ENUMTOOLSA = (0x0400+14),
        TTM_ENUMTOOLSW = (0x0400+58),
        TTM_GETCURRENTTOOLA = (0x0400+15),
        TTM_GETCURRENTTOOLW = (0x0400+59),
        TTM_WINDOWFROMPOINT = (0x0400+16),
        TTM_TRACKACTIVATE = (0x0400+17),
        TTM_TRACKPOSITION = (0x0400+18),
        TTM_SETTIPBKCOLOR = (0x0400+19),
        TTM_SETTIPTEXTCOLOR = (0x0400+20),
        TTM_GETDELAYTIME = (0x0400+21),
        TTM_GETTIPBKCOLOR = (0x0400+22),
        TTM_GETTIPTEXTCOLOR = (0x0400+23),
        TTM_SETMAXTIPWIDTH = (0x0400+24),
        TTM_GETMAXTIPWIDTH = (0x0400+25),
        TTM_SETMARGIN = (0x0400+26),
        TTM_GETMARGIN = (0x0400+27),
        TTM_POP = (0x0400+28),
        TTN_GETDISPINFOA = ((0-520)-0),
        TTN_GETDISPINFOW = ((0-520)-10),
        TTN_SHOW = ((0-520)-1),
        TTN_POP = ((0-520)-2),
        TTN_NEEDTEXTA = ((0-520)-0),
        TTN_NEEDTEXTW = ((0-520)-10),
        TBS_AUTOTICKS = 0x0001,
        TBS_VERT = 0x0002,
        TBS_HORZ = 0x0000,
        TBS_TOP = 0x0004,
        TBS_BOTTOM = 0x0000,
        TBS_LEFT = 0x0004,
        TBS_RIGHT = 0x0000,
        TBS_BOTH = 0x0008,
        TBS_NOTICKS = 0x0010,
        TBS_ENABLESELRANGE = 0x0020,
        TBS_FIXEDLENGTH = 0x0040,
        TBS_NOTHUMB = 0x0080,
        TBS_TOOLTIPS = 0x0100,
        TBM_GETPOS = (0x0400),
        TBM_GETRANGEMIN = (0x0400+1),
        TBM_GETRANGEMAX = (0x0400+2),
        TBM_GETTIC = (0x0400+3),
        TBM_SETTIC = (0x0400+4),
        TBM_SETPOS = (0x0400+5),
        TBM_SETRANGE = (0x0400+6),
        TBM_SETRANGEMIN = (0x0400+7),
        TBM_SETRANGEMAX = (0x0400+8),
        TBM_CLEARTICS = (0x0400+9),
        TBM_SETSEL = (0x0400+10),
        TBM_SETSELSTART = (0x0400+11),
        TBM_SETSELEND = (0x0400+12),
        TBM_GETPTICS = (0x0400+14),
        TBM_GETTICPOS = (0x0400+15),
        TBM_GETNUMTICS = (0x0400+16),
        TBM_GETSELSTART = (0x0400+17),
        TBM_GETSELEND = (0x0400+18),
        TBM_CLEARSEL = (0x0400+19),
        TBM_SETTICFREQ = (0x0400+20),
        TBM_SETPAGESIZE = (0x0400+21),
        TBM_GETPAGESIZE = (0x0400+22),
        TBM_SETLINESIZE = (0x0400+23),
        TBM_GETLINESIZE = (0x0400+24),
        TBM_GETTHUMBRECT = (0x0400+25),
        TBM_GETCHANNELRECT = (0x0400+26),
        TBM_SETTHUMBLENGTH = (0x0400+27),
        TBM_GETTHUMBLENGTH = (0x0400+28),
        TBM_SETTOOLTIPS = (0x0400+29),
        TBM_GETTOOLTIPS = (0x0400+30),
        TBM_SETTIPSIDE = (0x0400+31),
        TBTS_TOP = 0,
        TBTS_LEFT = 1,
        TBTS_BOTTOM = 2,
        TBTS_RIGHT = 3,
        TBM_SETBUDDY = (0x0400+32),
        TBM_GETBUDDY = (0x0400+33),
        TB_LINEUP = 0,
        TB_LINEDOWN = 1,
        TB_PAGEUP = 2,
        TB_PAGEDOWN = 3,
        TB_THUMBPOSITION = 4,
        TB_THUMBTRACK = 5,
        TB_TOP = 6,
        TB_BOTTOM = 7,
        TB_ENDTRACK = 8,
        TBCD_TICS = 0x0001,
        TBCD_THUMB = 0x0002,
        TBCD_CHANNEL = 0x0003,
        TBCDRF_NOEDGES = 0x00010000,
        TBCDRF_HILITEHOTTRACK = 0x00020000,
        TBCDRF_NOOFFSET = 0x00040000,
        TBCDRF_NOMARK = 0x00080000,
        TBCDRF_NOETCHEDEFFECT = 0x00100000,
        TVS_HASBUTTONS = 0x0001,
        TVS_HASLINES = 0x0002,
        TVS_LINESATROOT = 0x0004,
        TVS_EDITLABELS = 0x0008,
        TVS_DISABLEDRAGDROP = 0x0010,
        TVS_SHOWSELALWAYS = 0x0020,
        TVS_RTLREADING = 0x0040,
        TVS_NOTOOLTIPS = 0x0080,
        TVS_CHECKBOXES = 0x0100,
        TVS_TRACKSELECT = 0x0200,
        TVS_SHAREDIMAGELISTS = 0x0000,
        TVS_PRIVATEIMAGELISTS = 0x0400,
        TVS_FULLROWSELECT = 0x1000,
        TVIF_TEXT = 0x0001,
        TVIF_IMAGE = 0x0002,
        TVIF_PARAM = 0x0004,
        TVIF_STATE = 0x0008,
        TVIF_HANDLE = 0x0010,
        TVIF_SELECTEDIMAGE = 0x0020,
        TVIF_CHILDREN = 0x0040,
        TVIS_SELECTED = 0x0002,
        TVIS_CUT = 0x0004,
        TVIS_DROPHILITED = 0x0008,
        TVIS_BOLD = 0x0010,
        TVIS_EXPANDED = 0x0020,
        TVIS_EXPANDEDONCE = 0x0040,
        TVIS_EXPANDPARTIAL = 0x0080,
        TVIS_OVERLAYMASK = 0x0F00,
        TVIS_STATEIMAGEMASK = 0xF000,
        TVIS_USERMASK = 0xF000,
        TVI_ROOT = (unchecked((int)0xFFFF0000)),
        TVI_FIRST = (unchecked((int)0xFFFF0001)),
        TVI_LAST = (unchecked((int)0xFFFF0002)),
        TVI_SORT = (unchecked((int)0xFFFF0003)),
        TVM_INSERTITEMA = (0x1100+0),
        TVM_INSERTITEMW = (0x1100+50),
        TVM_DELETEITEM = (0x1100+1),
        TVM_EXPAND = (0x1100+2),
        TVE_COLLAPSE = 0x0001,
        TVE_EXPAND = 0x0002,
        TVE_TOGGLE = 0x0003,
        TVE_EXPANDPARTIAL = 0x4000,
        TVE_COLLAPSERESET = unchecked((int)0x8000),
        TVM_GETITEMRECT = (0x1100+4),
        TVM_GETCOUNT = (0x1100+5),
        TVM_GETINDENT = (0x1100+6),
        TVM_SETINDENT = (0x1100+7),
        TVM_GETIMAGELIST = (0x1100+8),
        TVSIL_NORMAL = 0,
        TVSIL_STATE = 2,
        TVM_SETIMAGELIST = (0x1100+9),
        TVM_GETNEXTITEM = (0x1100+10),
        TVGN_ROOT = 0x0000,
        TVGN_NEXT = 0x0001,
        TVGN_PREVIOUS = 0x0002,
        TVGN_PARENT = 0x0003,
        TVGN_CHILD = 0x0004,
        TVGN_FIRSTVISIBLE = 0x0005,
        TVGN_NEXTVISIBLE = 0x0006,
        TVGN_PREVIOUSVISIBLE = 0x0007,
        TVGN_DROPHILITE = 0x0008,
        TVGN_CARET = 0x0009,
        TVM_SELECTITEM = (0x1100+11),
        TVM_GETITEMA = (0x1100+12),
        TVM_GETITEMW = (0x1100+62),
        TVM_SETITEMA = (0x1100+13),
        TVM_SETITEMW = (0x1100+63),
        TVM_EDITLABELA = (0x1100+14),
        TVM_EDITLABELW = (0x1100+65),
        TVM_GETEDITCONTROL = (0x1100+15),
        TVM_GETVISIBLECOUNT = (0x1100+16),
        TVM_HITTEST = (0x1100+17),
        TVHT_NOWHERE = 0x0001,
        TVHT_ONITEMICON = 0x0002,
        TVHT_ONITEMLABEL = 0x0004,
        TVHT_ONITEMINDENT = 0x0008,
        TVHT_ONITEMBUTTON = 0x0010,
        TVHT_ONITEMRIGHT = 0x0020,
        TVHT_ONITEMSTATEICON = 0x0040,
        TVHT_ABOVE = 0x0100,
        TVHT_BELOW = 0x0200,
        TVHT_TORIGHT = 0x0400,
        TVHT_TOLEFT = 0x0800,
        TVM_CREATEDRAGIMAGE = (0x1100+18),
        TVM_SORTCHILDREN = (0x1100+19),
        TVM_ENSUREVISIBLE = (0x1100+20),
        TVM_SORTCHILDRENCB = (0x1100+21),
        TVM_ENDEDITLABELNOW = (0x1100+22),
        TVM_GETISEARCHSTRINGA = (0x1100+23),
        TVM_GETISEARCHSTRINGW = (0x1100+64),
        TVM_SETTOOLTIPS = (0x1100+24),
        TVM_GETTOOLTIPS = (0x1100+25),
        TVM_SETITEMHEIGHT = (0x1100+27),
        TVM_GETITEMHEIGHT = (0x1100+28),
        TVN_SELCHANGINGA = ((0-400)-1),
        TVN_SELCHANGINGW = ((0-400)-50),
        TVN_SELCHANGEDA = ((0-400)-2),
        TVN_SELCHANGEDW = ((0-400)-51),
        TVC_UNKNOWN = 0x0000,
        TVC_BYMOUSE = 0x0001,
        TVC_BYKEYBOARD = 0x0002,
        TVN_GETDISPINFOA = ((0-400)-3),
        TVN_GETDISPINFOW = ((0-400)-52),
        TVN_SETDISPINFOA = ((0-400)-4),
        TVN_SETDISPINFOW = ((0-400)-53),
        TVIF_DI_SETITEM = 0x1000,
        TVN_ITEMEXPANDINGA = ((0-400)-5),
        TVN_ITEMEXPANDINGW = ((0-400)-54),
        TVN_ITEMEXPANDEDA = ((0-400)-6),
        TVN_ITEMEXPANDEDW = ((0-400)-55),
        TVN_BEGINDRAGA = ((0-400)-7),
        TVN_BEGINDRAGW = ((0-400)-56),
        TVN_BEGINRDRAGA = ((0-400)-8),
        TVN_BEGINRDRAGW = ((0-400)-57),
        TVN_DELETEITEMA = ((0-400)-9),
        TVN_DELETEITEMW = ((0-400)-58),
        TVN_BEGINLABELEDITA = ((0-400)-10),
        TVN_BEGINLABELEDITW = ((0-400)-59),
        TVN_ENDLABELEDITA = ((0-400)-11),
        TVN_ENDLABELEDITW = ((0-400)-60),
        TVN_KEYDOWN = ((0-400)-12),
        TCS_SCROLLOPPOSITE = 0x0001,
        TCS_BOTTOM = 0x0002,
        TCS_RIGHT = 0x0002,
        TCS_MULTISELECT = 0x0004,
        TCS_FLATBUTTONS = 0x0008,
        TCS_FORCEICONLEFT = 0x0010,
        TCS_FORCELABELLEFT = 0x0020,
        TCS_HOTTRACK = 0x0040,
        TCS_VERTICAL = 0x0080,
        TCS_TABS = 0x0000,
        TCS_BUTTONS = 0x0100,
        TCS_SINGLELINE = 0x0000,
        TCS_MULTILINE = 0x0200,
        TCS_RIGHTJUSTIFY = 0x0000,
        TCS_FIXEDWIDTH = 0x0400,
        TCS_RAGGEDRIGHT = 0x0800,
        TCS_FOCUSONBUTTONDOWN = 0x1000,
        TCS_OWNERDRAWFIXED = 0x2000,
        TCS_TOOLTIPS = 0x4000,
        TCS_FOCUSNEVER = unchecked((int)0x8000),
        TCM_FIRST = 0x1300,
        TCM_GETIMAGELIST = (0x1300+2),
        TCM_SETIMAGELIST = (0x1300+3),
        TCM_GETITEMCOUNT = (0x1300+4),
        TCIF_TEXT = 0x0001,
        TCIF_IMAGE = 0x0002,
        TCIF_RTLREADING = 0x0004,
        TCIF_PARAM = 0x0008,
        TCIF_STATE = 0x0010,
        TCIS_BUTTONPRESSED = 0x0001,
        TCM_GETITEMA = (0x1300+5),
        TCM_GETITEMW = (0x1300+60),
        TCM_SETITEMA = (0x1300+6),
        TCM_SETITEMW = (0x1300+61),
        TCM_INSERTITEMA = (0x1300+7),
        TCM_INSERTITEMW = (0x1300+62),
        TCM_DELETEITEM = (0x1300+8),
        TCM_DELETEALLITEMS = (0x1300+9),
        TCM_GETITEMRECT = (0x1300+10),
        TCM_GETCURSEL = (0x1300+11),
        TCM_SETCURSEL = (0x1300+12),
        TCHT_NOWHERE = 0x0001,
        TCHT_ONITEMICON = 0x0002,
        TCHT_ONITEMLABEL = 0x0004,
        TCHT_ONITEM = (0x0002|0x0004),
        TCM_HITTEST = (0x1300+13),
        TCM_SETITEMEXTRA = (0x1300+14),
        TCM_ADJUSTRECT = (0x1300+40),
        TCM_SETITEMSIZE = (0x1300+41),
        TCM_REMOVEIMAGE = (0x1300+42),
        TCM_SETPADDING = (0x1300+43),
        TCM_GETROWCOUNT = (0x1300+44),
        TCM_GETTOOLTIPS = (0x1300+45),
        TCM_SETTOOLTIPS = (0x1300+46),
        TCM_GETCURFOCUS = (0x1300+47),
        TCM_SETCURFOCUS = (0x1300+48),
        TCM_SETMINTABWIDTH = (0x1300+49),
        TCM_DESELECTALL = (0x1300+50),
        TCN_KEYDOWN = ((0-550)-0),
        TCN_SELCHANGE = ((0-550)-1),
        TCN_SELCHANGING = ((0-550)-2),
        THREAD_PRIORITY_LOWEST = -2,
        THREAD_PRIORITY_BELOW_NORMAL = (-2+1),
        THREAD_PRIORITY_HIGHEST = 2,
        THREAD_PRIORITY_ABOVE_NORMAL = (2-1),
        THREAD_PRIORITY_ERROR_RETURN = (0x7fffffff),
        THREAD_PRIORITY_TIME_CRITICAL = 15,
        THREAD_PRIORITY_IDLE = -15,
        TVHT_ONITEM = (0x0002|0x0004|0x0040),
        TBDDRET_DEFAULT = 0,
        TBDDRET_NODEFAULT = 1,
        TBDDRET_TREATPRESSED = 2,
        TBNF_IMAGE = 0x00000001,
        TBNF_TEXT = 0x00000002,
        TBNF_DI_SETITEM = 0x10000000;

        public const int TYMED_HGLOBAL      = 1;
        public const int TYMED_FILE         = 2;
        public const int TYMED_ISTREAM      = 4;
        public const int TYMED_ISTORAGE     = 8;
        public const int TYMED_GDI          = 16;
        public const int TYMED_MFPICT       = 32;
        public const int TYMED_ENHMF        = 64;
        public const int TYMED_NULL         = 0;

        public const int UI_CAP_2700 = 0x00000001,
        UI_CAP_ROT90 = 0x00000002,
        UI_CAP_ROTANY = 0x00000004,
        UIS_SET = 1,
        UIS_CLEAR = 2,
        UIS_INITIALIZE = 3,
        UISF_HIDEFOCUS = 0x1,
        UISF_HIDEACCEL = 0x2,
        UNIQUE_NAME = 0x00,
        UPDFCACHE_NODATACACHE = (0x1),
        UPDFCACHE_ONSAVECACHE = (0x2),
        UPDFCACHE_ONSTOPCACHE = (0x4),
        UPDFCACHE_NORMALCACHE = (unchecked((int)0x8)),
        UPDFCACHE_IFBLANK = (0x10),
        UPDFCACHE_ONLYIFBLANK = (unchecked((int)0x80000000)),
        UPDFCACHE_IFBLANKORONSAVECACHE = ((0x10)|(0x2)),
        UPDFCACHE_ALL = (~(unchecked((int)0x80000000))),
        UPDFCACHE_ALLBUTNODATACACHE = ((~(unchecked((int)0x80000000)))&~(0x1)),
        USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3,
        USER_MARSHAL_FC_BYTE = 1,
        USER_MARSHAL_FC_CHAR = 2,
        USER_MARSHAL_FC_SMALL = 3,
        USER_MARSHAL_FC_USMALL = 4,
        USER_MARSHAL_FC_WCHAR = 5,
        USER_MARSHAL_FC_SHORT = 6,
        USER_MARSHAL_FC_USHORT = 7,
        USER_MARSHAL_FC_LONG = 8,
        USER_MARSHAL_FC_ULONG = 9,
        USER_MARSHAL_FC_FLOAT = 10,
        USER_MARSHAL_FC_HYPER = 11,
        USER_MARSHAL_FC_DOUBLE = 12,
        UNLOAD_DLL_DEBUG_EVENT = 7,
        UNIVERSAL_NAME_INFO_LEVEL = 0x00000001,
        UOI_FLAGS = 1,
        UOI_NAME = 2,
        UOI_TYPE = 3,
        UOI_USER_SID = 4,
        UDN_FIRST = (0-721),
        UDN_LAST = (0-740),
        UD_MAXVAL = 0x7fff,
        UD_MINVAL = (-0x7fff),
        UDS_WRAP = 0x0001,
        UDS_SETBUDDYINT = 0x0002,
        UDS_ALIGNRIGHT = 0x0004,
        UDS_ALIGNLEFT = 0x0008,
        UDS_AUTOBUDDY = 0x0010,
        UDS_ARROWKEYS = 0x0020,
        UDS_HORZ = 0x0040,
        UDS_NOTHOUSANDS = 0x0080,
        UDS_HOTTRACK = 0x0100,
        UDM_SETRANGE = (0x0400+101),
        UDM_GETRANGE = (0x0400+102),
        UDM_SETPOS = (0x0400+103),
        UDM_GETPOS = (0x0400+104),
        UDM_SETBUDDY = (0x0400+105),
        UDM_GETBUDDY = (0x0400+106),
        UDM_SETACCEL = (0x0400+107),
        UDM_GETACCEL = (0x0400+108),
        UDM_SETBASE = (0x0400+109),
        UDM_GETBASE = (0x0400+110),
        UDM_SETRANGE32 = (0x0400+111),
        UDM_GETRANGE32 = (0x0400+112),
        /* NT5 begin */
        ULW_COLORKEY            =0x00000001,
        ULW_ALPHA               =0x00000002,
        ULW_OPAQUE              =0x00000004,
        /* NT5 end */
        UDN_DELTAPOS = ((0-721)-1);
        
        public const int VARIANT_NOVALUEPROP = 0x1,
        VARIANT_ALPHABOOL = 0x2,
        VARIANT_NOUSEROVERRIDE = 0x4,
        VAR_TIMEVALUEONLY = (0x00000001),
        VAR_DATEVALUEONLY = (0x00000002),
        VAR_VALIDDATE = 0x0004,
        VAR_CALENDAR_HIJRI = 0x0008,
        VARIANT_CALENDAR_HIJRI = 0x0008,
        VER_PLATFORM_WIN32s = 0,
        VER_PLATFORM_WIN32_WINDOWS = 1,
        VER_PLATFORM_WIN32_NT = 2,
        VIEW_E_FIRST = unchecked((int)0x80040140),
        VIEW_E_LAST = unchecked((int)0x8004014F),
        VIEW_S_FIRST = 0x00040140,
        VIEW_S_LAST = 0x0004014F,
        VIEW_E_DRAW = unchecked((int)0x80040140),
        VIEW_S_ALREADY_FROZEN = 0x00040140,
        VTA_BASELINE = 24,
        VTA_LEFT = 8,
        VTA_RIGHT = 0,
        VTA_CENTER = 6,
        VTA_BOTTOM = 2,
        VTA_TOP = 0,
        VARIABLE_PITCH = 2,
        VIETNAMESE_CHARSET = 163,
        VERTSIZE = 6,
        VERTRES = 10,
        VREFRESH = 116,
        VALID_INHERIT_FLAGS = (0xF),
        VK_LBUTTON = 0x01,
        VK_RBUTTON = 0x02,
        VK_CANCEL = 0x03,
        VK_MBUTTON = 0x04,
        VK_BACK = 0x08,
        VK_TAB = 0x09,
        VK_CLEAR = 0x0C,
        VK_RETURN = 0x0D,
        VK_SHIFT = 0x10,
        VK_CONTROL = 0x11,
        VK_MENU = 0x12,
        VK_PAUSE = 0x13,
        VK_CAPITAL = 0x14,
        VK_ESCAPE = 0x1B,
        VK_SPACE = 0x20,
        VK_PRIOR = 0x21,
        VK_NEXT = 0x22,
        VK_END = 0x23,
        VK_HOME = 0x24,
        VK_LEFT = 0x25,
        VK_UP = 0x26,
        VK_RIGHT = 0x27,
        VK_DOWN = 0x28,
        VK_SELECT = 0x29,
        VK_PRINT = 0x2A,
        VK_EXECUTE = 0x2B,
        VK_SNAPSHOT = 0x2C,
        VK_INSERT = 0x2D,
        VK_DELETE = 0x2E,
        VK_HELP = 0x2F,
        VK_LWIN = 0x5B,
        VK_RWIN = 0x5C,
        VK_APPS = 0x5D,
        VK_NUMPAD0 = 0x60,
        VK_NUMPAD1 = 0x61,
        VK_NUMPAD2 = 0x62,
        VK_NUMPAD3 = 0x63,
        VK_NUMPAD4 = 0x64,
        VK_NUMPAD5 = 0x65,
        VK_NUMPAD6 = 0x66,
        VK_NUMPAD7 = 0x67,
        VK_NUMPAD8 = 0x68,
        VK_NUMPAD9 = 0x69,
        VK_MULTIPLY = 0x6A,
        VK_ADD = 0x6B,
        VK_SEPARATOR = 0x6C,
        VK_SUBTRACT = 0x6D,
        VK_DECIMAL = 0x6E,
        VK_DIVIDE = 0x6F,
        VK_F1 = 0x70,
        VK_F2 = 0x71,
        VK_F3 = 0x72,
        VK_F4 = 0x73,
        VK_F5 = 0x74,
        VK_F6 = 0x75,
        VK_F7 = 0x76,
        VK_F8 = 0x77,
        VK_F9 = 0x78,
        VK_F10 = 0x79,
        VK_F11 = 0x7A,
        VK_F12 = 0x7B,
        VK_F13 = 0x7C,
        VK_F14 = 0x7D,
        VK_F15 = 0x7E,
        VK_F16 = 0x7F,
        VK_F17 = unchecked((int)0x80),
        VK_F18 = unchecked((int)0x81),
        VK_F19 = unchecked((int)0x82),
        VK_F20 = unchecked((int)0x83),
        VK_F21 = unchecked((int)0x84),
        VK_F22 = unchecked((int)0x85),
        VK_F23 = unchecked((int)0x86),
        VK_F24 = unchecked((int)0x87),
        VK_NUMLOCK = 0x90,
        VK_SCROLL = 0x91,
        VK_LSHIFT = 0xA0,
        VK_RSHIFT = 0xA1,
        VK_LCONTROL = 0xA2,
        VK_RCONTROL = 0xA3,
        VK_LMENU = 0xA4,
        VK_RMENU = 0xA5,
        VK_PROCESSKEY = 0xE5,
        VK_ATTN = 0xF6,
        VK_CRSEL = 0xF7,
        VK_EXSEL = 0xF8,
        VK_EREOF = 0xF9,
        VK_PLAY = 0xFA,
        VK_ZOOM = 0xFB,
        VK_NONAME = 0xFC,
        VK_PA1 = 0xFD,
        VK_OEM_CLEAR = 0xFE,
        VS_FILE_INFO = 16,
        VS_VERSION_INFO = 1,
        VS_USER_DEFINED = 100,
        VS_FFI_SIGNATURE = unchecked((int)0xFEEF04BD),
        VS_FFI_STRUCVERSION = 0x00010000,
        VS_FFI_FILEFLAGSMASK = 0x0000003F,
        VS_FF_DEBUG = 0x00000001,
        VS_FF_PRERELEASE = 0x00000002,
        VS_FF_PATCHED = 0x00000004,
        VS_FF_PRIVATEBUILD = 0x00000008,
        VS_FF_INFOINFERRED = 0x00000010,
        VS_FF_SPECIALBUILD = 0x00000020,
        VOS_UNKNOWN = 0x00000000,
        VOS_DOS = 0x00010000,
        VOS_OS216 = 0x00020000,
        VOS_OS232 = 0x00030000,
        VOS_NT = 0x00040000,
        VOS__BASE = 0x00000000,
        VOS__WINDOWS16 = 0x00000001,
        VOS__PM16 = 0x00000002,
        VOS__PM32 = 0x00000003,
        VOS__WINDOWS32 = 0x00000004,
        VOS_DOS_WINDOWS16 = 0x00010001,
        VOS_DOS_WINDOWS32 = 0x00010004,
        VOS_OS216_PM16 = 0x00020002,
        VOS_OS232_PM32 = 0x00030003,
        VOS_NT_WINDOWS32 = 0x00040004,
        VFT_UNKNOWN = 0x00000000,
        VFT_APP = 0x00000001,
        VFT_DLL = 0x00000002,
        VFT_DRV = 0x00000003,
        VFT_FONT = 0x00000004,
        VFT_VXD = 0x00000005,
        VFT_STATIC_LIB = 0x00000007,
        VFT2_UNKNOWN = 0x00000000,
        VFT2_DRV_PRINTER = 0x00000001,
        VFT2_DRV_KEYBOARD = 0x00000002,
        VFT2_DRV_LANGUAGE = 0x00000003,
        VFT2_DRV_DISPLAY = 0x00000004,
        VFT2_DRV_MOUSE = 0x00000005,
        VFT2_DRV_NETWORK = 0x00000006,
        VFT2_DRV_SYSTEM = 0x00000007,
        VFT2_DRV_INSTALLABLE = 0x00000008,
        VFT2_DRV_SOUND = 0x00000009,
        VFT2_DRV_COMM = 0x0000000A,
        VFT2_DRV_INPUTMETHOD = 0x0000000B,
        VFT2_FONT_RASTER = 0x00000001,
        VFT2_FONT_VECTOR = 0x00000002,
        VFT2_FONT_TRUETYPE = 0x00000003,
        VFFF_ISSHAREDFILE = 0x0001,
        VFF_CURNEDEST = 0x0001,
        VFF_FILEINUSE = 0x0002,
        VFF_BUFFTOOSMALL = 0x0004,
        VIFF_FORCEINSTALL = 0x0001,
        VIFF_DONTDELETEOLD = 0x0002,
        VIF_TEMPFILE = 0x00000001,
        VIF_MISMATCH = 0x00000002,
        VIF_SRCOLD = 0x00000004,
        VIF_DIFFLANG = 0x00000008,
        VIF_DIFFCODEPG = 0x00000010,
        VIF_DIFFTYPE = 0x00000020,
        VIF_WRITEPROT = 0x00000040,
        VIF_FILEINUSE = 0x00000080,
        VIF_OUTOFSPACE = 0x00000100,
        VIF_ACCESSVIOLATION = 0x00000200,
        VIF_SHARINGVIOLATION = 0x00000400,
        VIF_CANNOTCREATE = 0x00000800,
        VIF_CANNOTDELETE = 0x00001000,
        VIF_CANNOTRENAME = 0x00002000,
        VIF_CANNOTDELETECUR = 0x00004000,
        VIF_OUTOFMEMORY = 0x00008000,
        VIF_CANNOTREADSRC = 0x00010000,
        VIF_CANNOTREADDST = 0x00020000,
        VIF_BUFFTOOSMALL = 0x00040000,
        VIEW_LARGEICONS = 0,
        VIEW_SMALLICONS = 1,
        VIEW_LIST = 2,
        VIEW_DETAILS = 3,
        VIEW_SORTNAME = 4,
        VIEW_SORTSIZE = 5,
        VIEW_SORTDATE = 6,
        VIEW_SORTTYPE = 7,
        VIEW_PARENTFOLDER = 8,
        VIEW_NETCONNECT = 9,
        VIEW_NETDISCONNECT = 10,
        VIEW_NEWFOLDER = 11,
        VIEW_VIEWMENU = 12;

        public const int WM_DDE_FIRST = 0x03E0,
        WM_DDE_INITIATE = (0x03E0),
        WM_DDE_TERMINATE = (0x03E0+1),
        WM_DDE_ADVISE = (0x03E0+2),
        WM_DDE_UNADVISE = (0x03E0+3),
        WM_DDE_ACK = (0x03E0+4),
        WM_DDE_DATA = (0x03E0+5),
        WM_DDE_REQUEST = (0x03E0+6),
        WM_DDE_POKE = (0x03E0+7),
        WM_DDE_EXECUTE = (0x03E0+8),
        WM_DDE_LAST = (0x03E0+8),
        WAVERR_BASE = 32,
        WAVERR_BADFORMAT = (32+0),
        WAVERR_STILLPLAYING = (32+1),
        WAVERR_UNPREPARED = (32+2),
        WAVERR_SYNC = (32+3),
        WAVERR_LASTERROR = (32+3),
        WOM_OPEN = 0x3BB,
        WOM_CLOSE = 0x3BC,
        WOM_DONE = 0x3BD,
        WIM_OPEN = 0x3BE,
        WIM_CLOSE = 0x3BF,
        WIM_DATA = 0x3C0,
        WAVE_FORMAT_QUERY = 0x0001,
        WAVE_ALLOWSYNC = 0x0002,
        WAVE_MAPPED = 0x0004,
        WAVE_FORMAT_DIRECT = 0x0008,
        WAVE_FORMAT_DIRECT_QUERY = (0x0001|0x0008),
        WHDR_DONE = 0x00000001,
        WHDR_PREPARED = 0x00000002,
        WHDR_BEGINLOOP = 0x00000004,
        WHDR_ENDLOOP = 0x00000008,
        WHDR_INQUEUE = 0x00000010,
        WAVECAPS_PITCH = 0x0001,
        WAVECAPS_PLAYBACKRATE = 0x0002,
        WAVECAPS_VOLUME = 0x0004,
        WAVECAPS_LRVOLUME = 0x0008,
        WAVECAPS_SYNC = 0x0010,
        WAVECAPS_SAMPLEACCURATE = 0x0020,
        WAVECAPS_DIRECTSOUND = 0x0040,
        WAVE_INVALIDFORMAT = 0x00000000,
        WAVE_FORMAT_1M08 = 0x00000001,
        WAVE_FORMAT_1S08 = 0x00000002,
        WAVE_FORMAT_1M16 = 0x00000004,
        WAVE_FORMAT_1S16 = 0x00000008,
        WAVE_FORMAT_2M08 = 0x00000010,
        WAVE_FORMAT_2S08 = 0x00000020,
        WAVE_FORMAT_2M16 = 0x00000040,
        WAVE_FORMAT_2S16 = 0x00000080,
        WAVE_FORMAT_4M08 = 0x00000100,
        WAVE_FORMAT_4S08 = 0x00000200,
        WAVE_FORMAT_4M16 = 0x00000400,
        WAVE_FORMAT_4S16 = 0x00000800,
        WAVE_FORMAT_PCM = 1,
        WIN32 = 100,
        WIZ_CXDLG = 276,
        WIZ_CYDLG = 140,
        WIZ_CXBMP = 80,
        WIZ_BODYX = 92,
        WIZ_BODYCX = 184,
        WIN_CERT_REVISION_1_0 = (0x0100),
        WIN_CERT_TYPE_X509 = (0x0001),
        WIN_CERT_TYPE_PKCS_SIGNED_DATA = (0x0002),
        WIN_CERT_TYPE_RESERVED_1 = (0x0003),
        WINDOW_BUFFER_SIZE_EVENT = 0x0004,
        WINVER = 0x0400,
        WHITEONBLACK = 2,
        WINDING = 2,
        WHITE_BRUSH = 0,
        WHITE_PEN = 6,
        WGL_FONT_LINES = 0,
        WGL_FONT_POLYGONS = 1,
        WGL_SWAP_MAIN_PLANE = 0x00000001,
        WGL_SWAP_OVERLAY1 = 0x00000002,
        WGL_SWAP_OVERLAY2 = 0x00000004,
        WGL_SWAP_OVERLAY3 = 0x00000008,
        WGL_SWAP_OVERLAY4 = 0x00000010,
        WGL_SWAP_OVERLAY5 = 0x00000020,
        WGL_SWAP_OVERLAY6 = 0x00000040,
        WGL_SWAP_OVERLAY7 = 0x00000080,
        WGL_SWAP_OVERLAY8 = 0x00000100,
        WGL_SWAP_OVERLAY9 = 0x00000200,
        WGL_SWAP_OVERLAY10 = 0x00000400,
        WGL_SWAP_OVERLAY11 = 0x00000800,
        WGL_SWAP_OVERLAY12 = 0x00001000,
        WGL_SWAP_OVERLAY13 = 0x00002000,
        WGL_SWAP_OVERLAY14 = 0x00004000,
        WGL_SWAP_OVERLAY15 = 0x00008000,
        WGL_SWAP_UNDERLAY1 = 0x00010000,
        WGL_SWAP_UNDERLAY2 = 0x00020000,
        WGL_SWAP_UNDERLAY3 = 0x00040000,
        WGL_SWAP_UNDERLAY4 = 0x00080000,
        WGL_SWAP_UNDERLAY5 = 0x00100000,
        WGL_SWAP_UNDERLAY6 = 0x00200000,
        WGL_SWAP_UNDERLAY7 = 0x00400000,
        WGL_SWAP_UNDERLAY8 = 0x00800000,
        WGL_SWAP_UNDERLAY9 = 0x01000000,
        WGL_SWAP_UNDERLAY10 = 0x02000000,
        WGL_SWAP_UNDERLAY11 = 0x04000000,
        WGL_SWAP_UNDERLAY12 = 0x08000000,
        WGL_SWAP_UNDERLAY13 = 0x10000000,
        WGL_SWAP_UNDERLAY14 = 0x20000000,
        WGL_SWAP_UNDERLAY15 = 0x40000000,
        WNNC_NET_MSNET = 0x00010000,
        WNNC_NET_LANMAN = 0x00020000,
        WNNC_NET_NETWARE = 0x00030000,
        WNNC_NET_VINES = 0x00040000,
        WNNC_NET_10NET = 0x00050000,
        WNNC_NET_LOCUS = 0x00060000,
        WNNC_NET_SUN_PC_NFS = 0x00070000,
        WNNC_NET_LANSTEP = 0x00080000,
        WNNC_NET_9TILES = 0x00090000,
        WNNC_NET_LANTASTIC = 0x000A0000,
        WNNC_NET_AS400 = 0x000B0000,
        WNNC_NET_FTP_NFS = 0x000C0000,
        WNNC_NET_PATHWORKS = 0x000D0000,
        WNNC_NET_LIFENET = 0x000E0000,
        WNNC_NET_POWERLAN = 0x000F0000,
        WNNC_NET_BWNFS = 0x00100000,
        WNNC_NET_COGENT = 0x00110000,
        WNNC_NET_FARALLON = 0x00120000,
        WNNC_NET_APPLETALK = 0x00130000,
        WNNC_NET_INTERGRAPH = 0x00140000,
        WNNC_NET_SYMFONET = 0x00150000,
        WNNC_NET_CLEARCASE = 0x00160000,
        WNFMT_MULTILINE = 0x01,
        WNFMT_ABBREVIATED = 0x02,
        WNFMT_INENUM = 0x10,
        WNFMT_CONNECTION = 0x20,
        WN_SUCCESS = 0,
        WN_NO_ERROR = 0,
        WN_NOT_SUPPORTED = 50,
        WN_CANCEL = 1223,
        WN_RETRY = 1237,
        WN_NET_ERROR = 59,
        WN_MORE_DATA = 234,
        WN_BAD_POINTER = 487,
        WN_BAD_VALUE = 87,
        WN_BAD_USER = 2202,
        WN_BAD_PASSWORD = 86,
        WN_ACCESS_DENIED = 5,
        WN_FUNCTION_BUSY = 170,
        WN_WINDOWS_ERROR = 59,
        WN_OUT_OF_MEMORY = 8,
        WN_NO_NETWORK = 1222,
        WN_EXTENDED_ERROR = 1208,
        WN_BAD_LEVEL = 124,
        WN_BAD_HANDLE = 6,
        WN_NOT_INITIALIZING = 1247,
        WN_NO_MORE_DEVICES = 1248,
        WN_NOT_CONNECTED = 2250,
        WN_OPEN_FILES = 2401,
        WN_DEVICE_IN_USE = 2404,
        WN_BAD_NETNAME = 67,
        WN_BAD_LOCALNAME = 1200,
        WN_ALREADY_CONNECTED = 85,
        WN_DEVICE_ERROR = 31,
        WN_CONNECTION_CLOSED = 1201,
        WN_NO_NET_OR_BAD_PATH = 1203,
        WN_BAD_PROVIDER = 1204,
        WN_CANNOT_OPEN_PROFILE = 1205,
        WN_BAD_PROFILE = 1206,
        WN_BAD_DEV_TYPE = 66,
        WN_DEVICE_ALREADY_REMEMBERED = 1202,
        WN_NO_MORE_ENTRIES = 259,
        WN_NOT_CONTAINER = 1207,
        WN_NOT_AUTHENTICATED = 1244,
        WN_NOT_LOGGED_ON = 1245,
        WN_NOT_VALIDATED = 1311,
        WNCON_FORNETCARD = 0x00000001,
        WNCON_NOTROUTED = 0x00000002,
        WNCON_SLOWLINK = 0x00000004,
        WNCON_DYNAMIC = 0x00000008,
        WC_DEFAULTCHECK = 0x00000100,
        WC_COMPOSITECHECK = 0x00000200,
        WC_DISCARDNS = 0x00000010,
        WC_SEPCHARS = 0x00000020,
        WC_DEFAULTCHAR = 0x00000040,
        WRITE_DAC = (0x00040000),
                    WRITE_OWNER = (0x00080000),
                                  WIN31_CLASS = 0,
        WH_MIN = (-1),
                 WH_MSGFILTER = (-1),
                                WH_JOURNALRECORD = 0,
        WH_JOURNALPLAYBACK = 1,
        WH_KEYBOARD = 2,
        WH_GETMESSAGE = 3,
        WH_CALLWNDPROC = 4,
        WH_CBT = 5,
        WH_SYSMSGFILTER = 6,
        WH_MOUSE = 7,
        WH_HARDWARE = 8,
        WH_DEBUG = 9,
        WH_SHELL = 10,
        WH_FOREGROUNDIDLE = 11,
        WH_CALLWNDPROCRET = 12,
        WH_MAX = 12;
        // WH_MAX = 11;
        public const int WH_MINHOOK = (-1),
                                      WH_MAXHOOK = 12,
        WINSTA_ENUMDESKTOPS = 0x0001,
        WINSTA_READATTRIBUTES = 0x0002,
        WINSTA_ACCESSCLIPBOARD = 0x0004,
        WINSTA_CREATEDESKTOP = 0x0008,
        WINSTA_WRITEATTRIBUTES = 0x0010,
        WINSTA_ACCESSGLOBALATOMS = 0x0020,
        WINSTA_EXITWINDOWS = 0x0040,
        WINSTA_ENUMERATE = 0x0100,
        WINSTA_READSCREEN = 0x0200,
        WSF_VISIBLE = 0x0001,
        WM_NULL = 0x0000,
        WM_CREATE = 0x0001,
        WM_DESTROY = 0x0002,
        WM_MOVE = 0x0003,
        WM_SIZE = 0x0005,
        WM_ACTIVATE = 0x0006,
        WA_INACTIVE = 0,
        WA_ACTIVE = 1,
        WA_CLICKACTIVE = 2,
        WM_SETFOCUS = 0x0007,
        WM_KILLFOCUS = 0x0008,
        WM_ENABLE = 0x000A,
        WM_SETREDRAW = 0x000B,
        WM_SETTEXT = 0x000C,
        WM_GETTEXT = 0x000D,
        WM_GETTEXTLENGTH = 0x000E,
        WM_PAINT = 0x000F,
        WM_CLOSE = 0x0010,
        WM_QUERYENDSESSION = 0x0011,
        WM_QUIT = 0x0012,
        WM_QUERYOPEN = 0x0013,
        WM_ERASEBKGND = 0x0014,
        WM_SYSCOLORCHANGE = 0x0015,
        WM_ENDSESSION = 0x0016,
        WM_SHOWWINDOW = 0x0018,
        WM_WININICHANGE = 0x001A,
        WM_SETTINGCHANGE = 0x001A,
        WM_DEVMODECHANGE = 0x001B,
        WM_ACTIVATEAPP = 0x001C,
        WM_FONTCHANGE = 0x001D,
        WM_TIMECHANGE = 0x001E,
        WM_CANCELMODE = 0x001F,
        WM_SETCURSOR = 0x0020,
        WM_MOUSEACTIVATE = 0x0021,
        WM_CHILDACTIVATE = 0x0022,
        WM_QUEUESYNC = 0x0023,
        WM_GETMINMAXINFO = 0x0024,
        WM_PAINTICON = 0x0026,
        WM_ICONERASEBKGND = 0x0027,
        WM_NEXTDLGCTL = 0x0028,
        WM_SPOOLERSTATUS = 0x002A,
        WM_DRAWITEM = 0x002B,
        WM_MEASUREITEM = 0x002C,
        WM_DELETEITEM = 0x002D,
        WM_VKEYTOITEM = 0x002E,
        WM_CHARTOITEM = 0x002F,
        WM_SETFONT = 0x0030,
        WM_GETFONT = 0x0031,
        WM_SETHOTKEY = 0x0032,
        WM_GETHOTKEY = 0x0033,
        WM_QUERYDRAGICON = 0x0037,
        WM_COMPAREITEM = 0x0039,
        WM_GETOBJECT = 0x003D,
        WM_COMPACTING = 0x0041,
        WM_COMMNOTIFY = 0x0044,
        WM_WINDOWPOSCHANGING = 0x0046,
        WM_WINDOWPOSCHANGED = 0x0047,
        WM_POWER = 0x0048,
        WM_COPYDATA = 0x004A,
        WM_CANCELJOURNAL = 0x004B,
        WM_NOTIFY = 0x004E,
        WM_INPUTLANGCHANGEREQUEST = 0x0050,
        WM_INPUTLANGCHANGE = 0x0051,
        WM_TCARD = 0x0052,
        WM_HELP = 0x0053,
        WM_USERCHANGED = 0x0054,
        WM_NOTIFYFORMAT = 0x0055,
        WM_CONTEXTMENU = 0x007B,
        WM_STYLECHANGING = 0x007C,
        WM_STYLECHANGED = 0x007D,
        WM_DISPLAYCHANGE = 0x007E,
        WM_GETICON = 0x007F,
        WM_SETICON = 0x0080,
        WM_NCCREATE = 0x0081,
        WM_NCDESTROY = 0x0082,
        WM_NCCALCSIZE = 0x0083,
        WM_NCHITTEST = 0x0084,
        WM_NCPAINT = 0x0085,
        WM_NCACTIVATE = 0x0086,
        WM_GETDLGCODE = 0x0087,
        WM_NCMOUSEMOVE = 0x00A0,
        WM_NCLBUTTONDOWN = 0x00A1,
        WM_NCLBUTTONUP = 0x00A2,
        WM_NCLBUTTONDBLCLK = 0x00A3,
        WM_NCRBUTTONDOWN = 0x00A4,
        WM_NCRBUTTONUP = 0x00A5,
        WM_NCRBUTTONDBLCLK = 0x00A6,
        WM_NCMBUTTONDOWN = 0x00A7,
        WM_NCMBUTTONUP = 0x00A8,
        WM_NCMBUTTONDBLCLK = 0x00A9,
        WM_KEYFIRST = 0x0100,
        WM_KEYDOWN = 0x0100,
        WM_KEYUP = 0x0101,
        WM_CHAR = 0x0102,
        WM_DEADCHAR = 0x0103,
        WM_SYSKEYDOWN = 0x0104,
        WM_SYSKEYUP = 0x0105,
        WM_SYSCHAR = 0x0106,
        WM_SYSDEADCHAR = 0x0107,
        WM_KEYLAST = 0x0108,
        WM_IME_STARTCOMPOSITION = 0x010D,
        WM_IME_ENDCOMPOSITION = 0x010E,
        WM_IME_COMPOSITION = 0x010F,
        WM_IME_KEYLAST = 0x010F,
        WM_INITDIALOG = 0x0110,
        WM_COMMAND = 0x0111,
        WM_SYSCOMMAND = 0x0112,
        WM_TIMER = 0x0113,
        WM_HSCROLL = 0x0114,
        WM_VSCROLL = 0x0115,
        WM_INITMENU = 0x0116,
        WM_INITMENUPOPUP = 0x0117,
        WM_MENUSELECT = 0x011F,
        WM_MENUCHAR = 0x0120,
        WM_ENTERIDLE = 0x0121,
        WM_CHANGEUISTATE = 0x0127,
        WM_UPDATEUISTATE = 0x0128,
        WM_QUERYUISTATE = 0x0129,
        WM_CTLCOLORMSGBOX = 0x0132,
        WM_CTLCOLOREDIT = 0x0133,
        WM_CTLCOLORLISTBOX = 0x0134,
        WM_CTLCOLORBTN = 0x0135,
        WM_CTLCOLORDLG = 0x0136,
        WM_CTLCOLORSCROLLBAR = 0x0137,
        WM_CTLCOLORSTATIC = 0x0138,
        WM_MOUSEFIRST = 0x0200,
        WM_MOUSEMOVE = 0x0200,
        WM_LBUTTONDOWN = 0x0201,
        WM_LBUTTONUP = 0x0202,
        WM_LBUTTONDBLCLK = 0x0203,
        WM_RBUTTONDOWN = 0x0204,
        WM_RBUTTONUP = 0x0205,
        WM_RBUTTONDBLCLK = 0x0206,
        WM_MBUTTONDOWN = 0x0207,
        WM_MBUTTONUP = 0x0208,
        WM_MBUTTONDBLCLK = 0x0209,
        WM_NCMOUSEHOVER = 0x02A0,
        WM_NCMOUSELEAVE = 0x02A2,
        WM_MOUSEWHEEL = 0x020A,
        WM_MOUSELAST = 0x020A;
        public const int WHEEL_DELTA = 120,
        WM_PARENTNOTIFY = 0x0210,
        WM_ENTERMENULOOP = 0x0211,
        WM_EXITMENULOOP = 0x0212,
        WM_NEXTMENU = 0x0213,
        WM_SIZING = 0x0214,
        WM_CAPTURECHANGED = 0x0215,
        WM_MOVING = 0x0216,
        WM_POWERBROADCAST = 0x0218,
        WM_DEVICECHANGE = 0x0219,
        WM_IME_SETCONTEXT = 0x0281,
        WM_IME_NOTIFY = 0x0282,
        WM_IME_CONTROL = 0x0283,
        WM_IME_COMPOSITIONFULL = 0x0284,
        WM_IME_SELECT = 0x0285,
        WM_IME_CHAR = 0x0286,
        WM_IME_KEYDOWN = 0x0290,
        WM_IME_KEYUP = 0x0291,
        WM_MDICREATE = 0x0220,
        WM_MDIDESTROY = 0x0221,
        WM_MDIACTIVATE = 0x0222,
        WM_MDIRESTORE = 0x0223,
        WM_MDINEXT = 0x0224,
        WM_MDIMAXIMIZE = 0x0225,
        WM_MDITILE = 0x0226,
        WM_MDICASCADE = 0x0227,
        WM_MDIICONARRANGE = 0x0228,
        WM_MDIGETACTIVE = 0x0229,
        WM_MDISETMENU = 0x0230,
        WM_ENTERSIZEMOVE = 0x0231,
        WM_EXITSIZEMOVE = 0x0232,
        WM_DROPFILES = 0x0233,
        WM_MDIREFRESHMENU = 0x0234,
        WM_MOUSEHOVER = 0x02A1,
        WM_MOUSELEAVE = 0x02A3,
        WM_CUT = 0x0300,
        WM_COPY = 0x0301,
        WM_PASTE = 0x0302,
        WM_CLEAR = 0x0303,
        WM_UNDO = 0x0304,
        WM_RENDERFORMAT = 0x0305,
        WM_RENDERALLFORMATS = 0x0306,
        WM_DESTROYCLIPBOARD = 0x0307,
        WM_DRAWCLIPBOARD = 0x0308,
        WM_PAINTCLIPBOARD = 0x0309,
        WM_VSCROLLCLIPBOARD = 0x030A,
        WM_SIZECLIPBOARD = 0x030B,
        WM_ASKCBFORMATNAME = 0x030C,
        WM_CHANGECBCHAIN = 0x030D,
        WM_HSCROLLCLIPBOARD = 0x030E,
        WM_QUERYNEWPALETTE = 0x030F,
        WM_PALETTEISCHANGING = 0x0310,
        WM_PALETTECHANGED = 0x0311,
        WM_HOTKEY = 0x0312,
        WM_PRINT = 0x0317,
        WM_PRINTCLIENT = 0x0318,
        WM_HANDHELDFIRST = 0x0358,
        WM_HANDHELDLAST = 0x035F,
        WM_AFXFIRST = 0x0360,
        WM_AFXLAST = 0x037F,
        WM_PENWINFIRST = 0x0380,
        WM_PENWINLAST = 0x038F,
        WM_APP = unchecked((int)0x8000),
        WM_USER = 0x0400,
        WMSZ_LEFT = 1,
        WMSZ_RIGHT = 2,
        WMSZ_TOP = 3,
        WMSZ_TOPLEFT = 4,
        WMSZ_TOPRIGHT = 5,
        WMSZ_BOTTOM = 6,
        WMSZ_BOTTOMLEFT = 7,
        WMSZ_BOTTOMRIGHT = 8,
        WVR_ALIGNTOP = 0x0010,
        WVR_ALIGNLEFT = 0x0020,
        WVR_ALIGNBOTTOM = 0x0040,
        WVR_ALIGNRIGHT = 0x0080,
        WVR_HREDRAW = 0x0100,
        WVR_VREDRAW = 0x0200,
        WVR_VALIDRECTS = 0x0400,
        WS_OVERLAPPED = 0x00000000,
        WS_POPUP = unchecked((int)0x80000000),
        WS_CHILD = 0x40000000,
        WS_MINIMIZE = 0x20000000,
        WS_VISIBLE = 0x10000000,
        WS_DISABLED = 0x08000000,
        WS_CLIPSIBLINGS = 0x04000000,
        WS_CLIPCHILDREN = 0x02000000,
        WS_MAXIMIZE = 0x01000000,
        WS_CAPTION = 0x00C00000,
        WS_BORDER = 0x00800000,
        WS_DLGFRAME = 0x00400000,
        WS_VSCROLL = 0x00200000,
        WS_HSCROLL = 0x00100000,
        WS_SYSMENU = 0x00080000,
        WS_THICKFRAME = 0x00040000,
        WS_GROUP = 0x00020000,
        WS_TABSTOP = 0x00010000,
        WS_MINIMIZEBOX = 0x00020000,
        WS_MAXIMIZEBOX = 0x00010000,
        WS_TILED = 0x00000000,
        WS_ICONIC = 0x20000000,
        WS_SIZEBOX = 0x00040000,
        WS_OVERLAPPEDWINDOW = (0x00000000|0x00C00000|0x00080000|0x00040000|0x00020000|0x00010000),
        WS_POPUPWINDOW = (unchecked((int)0x80000000)|0x00800000|0x00080000),
        WS_CHILDWINDOW = (0x40000000),
        WS_EX_DLGMODALFRAME = 0x00000001,
        WS_EX_NOPARENTNOTIFY = 0x00000004,
        WS_EX_TOPMOST = 0x00000008,
        WS_EX_ACCEPTFILES = 0x00000010,
        WS_EX_TRANSPARENT = 0x00000020,
        WS_EX_MDICHILD = 0x00000040,
        WS_EX_TOOLWINDOW = 0x00000080,
        WS_EX_WINDOWEDGE = 0x00000100,
        WS_EX_CLIENTEDGE = 0x00000200,
        WS_EX_CONTEXTHELP = 0x00000400,
        WS_EX_RIGHT = 0x00001000,
        WS_EX_LEFT = 0x00000000,
        WS_EX_RTLREADING = 0x00002000,
        WS_EX_LTRREADING = 0x00000000,
        WS_EX_LEFTSCROLLBAR = 0x00004000,
        WS_EX_RIGHTSCROLLBAR = 0x00000000,
        WS_EX_CONTROLPARENT = 0x00010000,
        WS_EX_STATICEDGE = 0x00020000,
        WS_EX_APPWINDOW = 0x00040000,
        WS_EX_OVERLAPPEDWINDOW = (0x00000100|0x00000200),
        WS_EX_PALETTEWINDOW = (0x00000100|0x00000080|0x00000008),
        
        /* NT5 Begin */
        WS_EX_LAYERED           = 0x00080000,
        WS_EX_NOINHERITLAYOUT   = 0x00100000, // Disable inheritence of mirroring by children
        WS_EX_LAYOUTRTL         = 0x00400000, // Right to left mirroring
        WS_EX_NOACTIVATE        = 0x08000000,
        /* NT5 End */
        
        WPF_SETMINPOSITION = 0x0001,
        WPF_RESTORETOMAXIMIZED = 0x0002,
        WB_LEFT = 0,
        WB_RIGHT = 1,
        WB_ISDELIMITER = 2,
        WDT_INPROC_CALL = (0x48746457),
        WDT_REMOTE_CALL = (0x52746457),
        WM_CHOOSEFONT_GETLOGFONT = (0x0400+1),
        WM_PSD_PAGESETUPDLG = (0x0400),
        WM_PSD_FULLPAGERECT = (0x0400+1),
        WM_PSD_MINMARGINRECT = (0x0400+2),
        WM_PSD_MARGINRECT = (0x0400+3),
        WM_PSD_GREEKTEXTRECT = (0x0400+4),
        WM_PSD_ENVSTAMPRECT = (0x0400+5),
        WM_PSD_YAFULLPAGERECT = (0x0400+6),
        WAIT_IO_COMPLETION = (0x000000C0),
        WS_TILEDWINDOW = (0x00000000|0x00C00000|0x00080000|0x00040000|0x00020000|0x00010000);
        
        public const int WAIT_OBJECT_0 = 0x00000000,
        WAIT_FAILED = unchecked((int)0xFFFFFFFF),
        WAIT_TIMEOUT = 0x00000102,
        WAIT_ABANDONED = 0x00000080,
        WAIT_ABANDONED_0 = WAIT_ABANDONED,
        WHITENESS = 0x00FF0062;


        public const int XST_NULL = 0,
        XST_INCOMPLETE = 1,
        XST_CONNECTED = 2,
        XST_INIT1 = 3,
        XST_INIT2 = 4,
        XST_REQSENT = 5,
        XST_DATARCVD = 6,
        XST_POKESENT = 7,
        XST_POKEACKRCVD = 8,
        XST_EXECSENT = 9,
        XST_EXECACKRCVD = 10,
        XST_ADVSENT = 11,
        XST_UNADVSENT = 12,
        XST_ADVACKRCVD = 13,
        XST_UNADVACKRCVD = 14,
        XST_ADVDATASENT = 15,
        XST_ADVDATAACKRCVD = 16,
        XTYPF_NOBLOCK = 0x0002,
        XTYPF_NODATA = 0x0004,
        XTYPF_ACKREQ = 0x0008,
        XCLASS_MASK = 0xFC00,
        XCLASS_BOOL = 0x1000,
        XCLASS_DATA = 0x2000,
        XCLASS_FLAGS = 0x4000,
        XCLASS_NOTIFICATION = unchecked((int)0x8000),
        XTYP_ERROR = (0x0000|unchecked((int)0x8000)|0x0002),
        XTYP_ADVDATA = (0x0010|0x4000),
        XTYP_ADVREQ = (0x0020|0x2000|0x0002),
        XTYP_ADVSTART = (0x0030|0x1000),
        XTYP_ADVSTOP = (0x0040|unchecked((int)0x8000)),
        XTYP_EXECUTE = (0x0050|0x4000),
        XTYP_CONNECT = (0x0060|0x1000|0x0002),
        XTYP_CONNECT_CONFIRM = (0x0070|unchecked((int)0x8000)|0x0002),
        XTYP_XACT_COMPLETE = (0x0080|unchecked((int)0x8000)),
        XTYP_POKE = (0x0090|0x4000),
        XTYP_REGISTER = (0x00A0|unchecked((int)0x8000)|0x0002),
        XTYP_REQUEST = (0x00B0|0x2000),
        XTYP_DISCONNECT = (0x00C0|unchecked((int)0x8000)|0x0002),
        XTYP_UNREGISTER = (0x00D0|unchecked((int)0x8000)|0x0002),
        XTYP_WILDCONNECT = (0x00E0|0x2000|0x0002),
        XTYP_MASK = 0x00F0,
        XTYP_SHIFT = 4,
        XTYP_MONITOR = (0x00F0|unchecked((int)0x8000)|0x0002);

        public static readonly int CBEM_GETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.CBEM_GETITEMA : NativeMethods.CBEM_GETITEMW;
        public static readonly int CBEM_SETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.CBEM_SETITEMA : NativeMethods.CBEM_SETITEMW;
        public static readonly int CBEN_ENDEDIT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.CBEN_ENDEDITA : NativeMethods.CBEN_ENDEDITW;
        public static readonly int CBEM_INSERTITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.CBEM_INSERTITEMA : NativeMethods.CBEM_INSERTITEMW;
        public static readonly int LVM_GETITEMTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_GETITEMTEXTA : NativeMethods.LVM_GETITEMTEXTW;
        public static readonly int LVM_SETITEMTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_SETITEMTEXTA : NativeMethods.LVM_SETITEMTEXTW;
        public static readonly int ACM_OPEN = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.ACM_OPENA : NativeMethods.ACM_OPENW;
        public static readonly int DTM_SETFORMAT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.DTM_SETFORMATA : NativeMethods.DTM_SETFORMATW;
        public static readonly int DTN_USERSTRING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.DTN_USERSTRINGA : NativeMethods.DTN_USERSTRINGW;
        public static readonly int DTN_WMKEYDOWN = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.DTN_WMKEYDOWNA : NativeMethods.DTN_WMKEYDOWNW;
        public static readonly int DTN_FORMAT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.DTN_FORMATA : NativeMethods.DTN_FORMATW;
        public static readonly int DTN_FORMATQUERY = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.DTN_FORMATQUERYA : NativeMethods.DTN_FORMATQUERYW;
        public static readonly int EMR_EXTTEXTOUT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.EMR_EXTTEXTOUTA : NativeMethods.EMR_EXTTEXTOUTW;
        public static readonly int EMR_POLYTEXTOUT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.EMR_POLYTEXTOUTA : NativeMethods.EMR_POLYTEXTOUTW;
        public static readonly int HDM_INSERTITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDM_INSERTITEMA : NativeMethods.HDM_INSERTITEMW;
        public static readonly int HDM_GETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDM_GETITEMA : NativeMethods.HDM_GETITEMW;
        public static readonly int HDM_SETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDM_SETITEMA : NativeMethods.HDM_SETITEMW;
        public static readonly int HDN_ITEMCHANGING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_ITEMCHANGINGA : NativeMethods.HDN_ITEMCHANGINGW;
        public static readonly int HDN_ITEMCHANGED = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_ITEMCHANGEDA : NativeMethods.HDN_ITEMCHANGEDW;
        public static readonly int HDN_ITEMCLICK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_ITEMCLICKA : NativeMethods.HDN_ITEMCLICKW;
        public static readonly int HDN_ITEMDBLCLICK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_ITEMDBLCLICKA : NativeMethods.HDN_ITEMDBLCLICKW;
        public static readonly int HDN_DIVIDERDBLCLICK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_DIVIDERDBLCLICKA : NativeMethods.HDN_DIVIDERDBLCLICKW;
        public static readonly int HDN_BEGINTRACK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_BEGINTRACKA : NativeMethods.HDN_BEGINTRACKW;
        public static readonly int HDN_ENDTRACK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_ENDTRACKA : NativeMethods.HDN_ENDTRACKW;
        public static readonly int HDN_TRACK = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_TRACKA : NativeMethods.HDN_TRACKW;
        public static readonly int HDN_GETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.HDN_GETDISPINFOA : NativeMethods.HDN_GETDISPINFOW;
        public static readonly int LVM_GETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_GETITEMA : NativeMethods.LVM_GETITEMW;
        public static readonly int LVM_SETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_SETITEMA : NativeMethods.LVM_SETITEMW;
        public static readonly int LVM_INSERTITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_INSERTITEMA : NativeMethods.LVM_INSERTITEMW;
        public static readonly int LVM_FINDITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_FINDITEMA : NativeMethods.LVM_FINDITEMW;
        public static readonly int LVM_GETSTRINGWIDTH = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_GETSTRINGWIDTHA : NativeMethods.LVM_GETSTRINGWIDTHW;
        public static readonly int LVM_EDITLABEL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_EDITLABELA : NativeMethods.LVM_EDITLABELW;
        public static readonly int LVM_GETCOLUMN = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_GETCOLUMNA : NativeMethods.LVM_GETCOLUMNW;
        public static readonly int LVM_SETCOLUMN = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_SETCOLUMNA : NativeMethods.LVM_SETCOLUMNW;
        public static readonly int LVM_GETISEARCHSTRING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_GETISEARCHSTRINGA : NativeMethods.LVM_GETISEARCHSTRINGW;
        public static readonly int LVM_INSERTCOLUMN = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVM_INSERTCOLUMNA : NativeMethods.LVM_INSERTCOLUMNW;
        public static readonly int LVN_BEGINLABELEDIT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVN_BEGINLABELEDITA : NativeMethods.LVN_BEGINLABELEDITW;
        public static readonly int LVN_ENDLABELEDIT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVN_ENDLABELEDITA : NativeMethods.LVN_ENDLABELEDITW;
        public static readonly int LVN_ODFINDITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVN_ODFINDITEMA : NativeMethods.LVN_ODFINDITEMW;
        public static readonly int LVN_GETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVN_GETDISPINFOA : NativeMethods.LVN_GETDISPINFOW;
        public static readonly int LVN_SETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.LVN_SETDISPINFOA : NativeMethods.LVN_SETDISPINFOW;
        public static readonly int PSM_SETTITLE = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.PSM_SETTITLEA : NativeMethods.PSM_SETTITLEW;
        public static readonly int PSM_SETFINISHTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.PSM_SETFINISHTEXTA : NativeMethods.PSM_SETFINISHTEXTW;
        public static readonly int RB_INSERTBAND = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.RB_INSERTBANDA : NativeMethods.RB_INSERTBANDW;
        public static readonly int RB_SETBANDINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.RB_SETBANDINFOA : NativeMethods.RB_SETBANDINFOW;
        public static readonly int SB_SETTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.SB_SETTEXTA : NativeMethods.SB_SETTEXTW;
        public static readonly int SB_GETTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.SB_GETTEXTA : NativeMethods.SB_GETTEXTW;
        public static readonly int SB_GETTEXTLENGTH = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.SB_GETTEXTLENGTHA : NativeMethods.SB_GETTEXTLENGTHW;
        public static readonly int SB_SETTIPTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.SB_SETTIPTEXTA : NativeMethods.SB_SETTIPTEXTW;
        public static readonly int SB_GETTIPTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.SB_GETTIPTEXTA : NativeMethods.SB_GETTIPTEXTW;
        public static readonly int TB_SAVERESTORE = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_SAVERESTOREA : NativeMethods.TB_SAVERESTOREW;
        public static readonly int TB_ADDSTRING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_ADDSTRINGA : NativeMethods.TB_ADDSTRINGW;
        public static readonly int TB_GETBUTTONTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_GETBUTTONTEXTA : NativeMethods.TB_GETBUTTONTEXTW;
        public static readonly int TB_MAPACCELERATOR = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_MAPACCELERATORA : NativeMethods.TB_MAPACCELERATORW;
        public static readonly int TB_GETBUTTONINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_GETBUTTONINFOA : NativeMethods.TB_GETBUTTONINFOW;
        public static readonly int TB_SETBUTTONINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TB_SETBUTTONINFOA : NativeMethods.TB_SETBUTTONINFOW;
#if cpr
        public const int RB_GETBANDINFO = (Win32Lib.systemCommCtrlVersion >= Win32Lib.WIN32_IE400) ?
                                          ((Marshal.SystemDefaultCharSize == 1) ? NativeMethods.RB_GETBANDINFOA : NativeMethods.RB_GETBANDINFOW) :
                                          NativeMethods.RB_GETBANDINFO_OLD;
        public const int TB_INSERTBUTTON = ((Marshal.SystemDefaultCharSize == 1) ||
                                            (Win32Lib.systemCommCtrlVersion < Win32Lib.WIN32_IE400)) ?
                                           NativeMethods.TB_INSERTBUTTONA : NativeMethods.TB_INSERTBUTTONW;
        public const int TB_ADDBUTTONS = ((Marshal.SystemDefaultCharSize == 1) ||
                                          (Win32Lib.systemCommCtrlVersion < Win32Lib.WIN32_IE400)) ?
                                         NativeMethods.TB_ADDBUTTONSA : NativeMethods.TB_ADDBUTTONSW;
#else
        public static readonly int RB_GETBANDINFO = (Marshal.SystemDefaultCharSize == 1) ? NativeMethods.RB_GETBANDINFOA : NativeMethods.RB_GETBANDINFOW;
        public static readonly int TB_INSERTBUTTON = (Marshal.SystemDefaultCharSize == 1) ? NativeMethods.TB_INSERTBUTTONA : NativeMethods.TB_INSERTBUTTONW;
        public static readonly int TB_ADDBUTTONS = (Marshal.SystemDefaultCharSize == 1) ? NativeMethods.TB_ADDBUTTONSA : NativeMethods.TB_ADDBUTTONSW;
#endif
        public static readonly int TBN_GETBUTTONINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TBN_GETBUTTONINFOA : NativeMethods.TBN_GETBUTTONINFOW;
        public static readonly int TBN_GETINFOTIP = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TBN_GETINFOTIPA : NativeMethods.TBN_GETINFOTIPW;
        public static readonly int TBN_GETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TBN_GETDISPINFOA : NativeMethods.TBN_GETDISPINFOW;
        public static readonly int TTM_ADDTOOL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_ADDTOOLA : NativeMethods.TTM_ADDTOOLW;
        public static readonly int TTM_DELTOOL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_DELTOOLA : NativeMethods.TTM_DELTOOLW;
        public static readonly int TTM_NEWTOOLRECT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_NEWTOOLRECTA : NativeMethods.TTM_NEWTOOLRECTW;
        public static readonly int TTM_GETTOOLINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_GETTOOLINFOA : NativeMethods.TTM_GETTOOLINFOW;
        public static readonly int TTM_SETTOOLINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_SETTOOLINFOA : NativeMethods.TTM_SETTOOLINFOW;
        public static readonly int TTM_HITTEST = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_HITTESTA : NativeMethods.TTM_HITTESTW;
        public static readonly int TTM_GETTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_GETTEXTA : NativeMethods.TTM_GETTEXTW;
        public static readonly int TTM_UPDATETIPTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_UPDATETIPTEXTA : NativeMethods.TTM_UPDATETIPTEXTW;
        public static readonly int TTM_ENUMTOOLS = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_ENUMTOOLSA : NativeMethods.TTM_ENUMTOOLSW;
        public static readonly int TTM_GETCURRENTTOOL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTM_GETCURRENTTOOLA : NativeMethods.TTM_GETCURRENTTOOLW;
        public static readonly int TTN_GETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTN_GETDISPINFOA : NativeMethods.TTN_GETDISPINFOW;
        public static readonly int TTN_NEEDTEXT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TTN_NEEDTEXTA : NativeMethods.TTN_NEEDTEXTW;
        public static readonly int TVM_INSERTITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVM_INSERTITEMA : NativeMethods.TVM_INSERTITEMW;
        public static readonly int TVM_GETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVM_GETITEMA : NativeMethods.TVM_GETITEMW;
        public static readonly int TVM_SETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVM_SETITEMA : NativeMethods.TVM_SETITEMW;
        public static readonly int TVM_EDITLABEL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVM_EDITLABELA : NativeMethods.TVM_EDITLABELW;
        public static readonly int TVM_GETISEARCHSTRING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVM_GETISEARCHSTRINGA : NativeMethods.TVM_GETISEARCHSTRINGW;
        public static readonly int TVN_SELCHANGING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_SELCHANGINGA : NativeMethods.TVN_SELCHANGINGW;
        public static readonly int TVN_SELCHANGED = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_SELCHANGEDA : NativeMethods.TVN_SELCHANGEDW;
        public static readonly int TVN_GETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_GETDISPINFOA : NativeMethods.TVN_GETDISPINFOW;
        public static readonly int TVN_SETDISPINFO = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_SETDISPINFOA : NativeMethods.TVN_SETDISPINFOW;
        public static readonly int TVN_ITEMEXPANDING = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_ITEMEXPANDINGA : NativeMethods.TVN_ITEMEXPANDINGW;
        public static readonly int TVN_ITEMEXPANDED = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_ITEMEXPANDEDA : NativeMethods.TVN_ITEMEXPANDEDW;
        public static readonly int TVN_BEGINDRAG = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_BEGINDRAGA : NativeMethods.TVN_BEGINDRAGW;
        public static readonly int TVN_BEGINRDRAG = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_BEGINRDRAGA : NativeMethods.TVN_BEGINRDRAGW;
        public static readonly int TVN_DELETEITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_DELETEITEMA : NativeMethods.TVN_DELETEITEMW;
        public static readonly int TVN_BEGINLABELEDIT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_BEGINLABELEDITA : NativeMethods.TVN_BEGINLABELEDITW;
        public static readonly int TVN_ENDLABELEDIT = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TVN_ENDLABELEDITA : NativeMethods.TVN_ENDLABELEDITW;
        public static readonly int TCM_GETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TCM_GETITEMA : NativeMethods.TCM_GETITEMW;
        public static readonly int TCM_SETITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TCM_SETITEMA : NativeMethods.TCM_SETITEMW;
        public static readonly int TCM_INSERTITEM = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.TCM_INSERTITEMA : NativeMethods.TCM_INSERTITEMW;
        public static readonly int CP_WINNEUTRAL = Marshal.SystemDefaultCharSize == 1 ? NativeMethods.CP_WINANSI : NativeMethods.CP_WINUNICODE;

        //cpr  public static final int MCS_NOTODAY = (Win32Lib.systemCommCtrlVersion >= Win32Lib.WIN32_IE400) ? 0x0010 : 0x0008;
        public const int MCS_NOTODAY = 0x0010;

        // CAUTION(SreeramN): We have to do this as a property, so that we do not cause an infinite
        // loop trying to initialize Ole when this is called from Application.OleRequired();
        //
        private static int enterMessage = -1;
        public static int WM_MOUSEENTER {
           get {
              if (enterMessage == -1) {
                  UnsafeNativeMethods.OleInitialize();
                  enterMessage = SafeNativeMethods.RegisterWindowMessage("WinFormsMouseEnter");
              }
              return enterMessage;
           }
        }

        public const string LBSELCHSTRINGA = "commdlg_LBSelChangedNotify",
        SHAREVISTRINGA = "commdlg_ShareViolation",
        FILEOKSTRINGA = "commdlg_FileNameOK",
        COLOROKSTRINGA = "commdlg_ColorOK",
        SETRGBSTRINGA = "commdlg_SetRGBColor",
        HELPMSGSTRINGA = "commdlg_help",
        FINDMSGSTRINGA = "commdlg_FindReplace",
        LBSELCHSTRINGW = "commdlg_LBSelChangedNotify",
        SHAREVISTRINGW = "commdlg_ShareViolation",
        FILEOKSTRINGW = "commdlg_FileNameOK",
        COLOROKSTRINGW = "commdlg_ColorOK",
        SETRGBSTRINGW = "commdlg_SetRGBColor",
        HELPMSGSTRINGW = "commdlg_help",
        FINDMSGSTRINGW = "commdlg_FindReplace",
        SZDDESYS_TOPIC = "System",
        SZDDESYS_ITEM_TOPICS = "Topics",
        SZDDESYS_ITEM_SYSITEMS = "SysItems",
        SZDDESYS_ITEM_RTNMSG = "ReturnMessage",
        SZDDESYS_ITEM_STATUS = "Status",
        SZDDESYS_ITEM_FORMATS = "Formats",
        SZDDESYS_ITEM_HELP = "Help",
        SZDDE_ITEM_ITEMLIST = "TopicItemList",
        ALL_TRANSPORTS = "M???",
        MS_NBF = "MNBF",
        MS_DEF_PROV_A = "Microsoft Base Cryptographic Provider v1.0",
        MS_DEF_PROV_W = "Microsoft Base Cryptographic Provider v1.0",
        SE_CREATE_TOKEN_NAME = "SeCreateTokenPrivilege",
        SE_ASSIGNPRIMARYTOKEN_NAME = "SeAssignPrimaryTokenPrivilege",
        SE_LOCK_MEMORY_NAME = "SeLockMemoryPrivilege",
        SE_INCREASE_QUOTA_NAME = "SeIncreaseQuotaPrivilege",
        SE_UNSOLICITED_INPUT_NAME = "SeUnsolicitedInputPrivilege",
        SE_MACHINE_ACCOUNT_NAME = "SeMachineAccountPrivilege",
        SE_TCB_NAME = "SeTcbPrivilege",
        SE_SECURITY_NAME = "SeSecurityPrivilege",
        SE_TAKE_OWNERSHIP_NAME = "SeTakeOwnershipPrivilege",
        SE_LOAD_DRIVER_NAME = "SeLoadDriverPrivilege",
        SE_SYSTEM_PROFILE_NAME = "SeSystemProfilePrivilege",
        SE_SYSTEMTIME_NAME = "SeSystemtimePrivilege",
        SE_PROF_SINGLE_PROCESS_NAME = "SeProfileSingleProcessPrivilege",
        SE_INC_BASE_PRIORITY_NAME = "SeIncreaseBasePriorityPrivilege",
        SE_CREATE_PAGEFILE_NAME = "SeCreatePagefilePrivilege",
        SE_CREATE_PERMANENT_NAME = "SeCreatePermanentPrivilege",
        SE_BACKUP_NAME = "SeBackupPrivilege",
        SE_RESTORE_NAME = "SeRestorePrivilege",
        SE_SHUTDOWN_NAME = "SeShutdownPrivilege",
        SE_DEBUG_NAME = "SeDebugPrivilege",
        SE_AUDIT_NAME = "SeAuditPrivilege",
        SE_SYSTEM_ENVIRONMENT_NAME = "SeSystemEnvironmentPrivilege",
        SE_CHANGE_NOTIFY_NAME = "SeChangeNotifyPrivilege",
        SE_REMOTE_SHUTDOWN_NAME = "SeRemoteShutdownPrivilege",
        SPLREG_DEFAULT_SPOOL_DIRECTORY = "DefaultSpoolDirectory",
        SPLREG_PORT_THREAD_PRIORITY_DEFAULT = "PortThreadPriorityDefault",
        SPLREG_PORT_THREAD_PRIORITY = "PortThreadPriority",
        SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT = "SchedulerThreadPriorityDefault",
        SPLREG_SCHEDULER_THREAD_PRIORITY = "SchedulerThreadPriority",
        SPLREG_BEEP_ENABLED = "BeepEnabled",
        SPLREG_NET_POPUP = "NetPopup",
        SPLREG_EVENT_LOG = "EventLog",
        SPLREG_MAJOR_VERSION = "MajorVersion",
        SPLREG_MINOR_VERSION = "MinorVersion",
        SPLREG_ARCHITECTURE = "Architecture",
        SERVICES_ACTIVE_DATABASEW = "ServicesActive",
        SERVICES_FAILED_DATABASEW = "ServicesFailed",
        SERVICES_ACTIVE_DATABASEA = "ServicesActive",
        SERVICES_FAILED_DATABASEA = "ServicesFailed",
        WC_HEADERA = "SysHeader32",
        WC_HEADERW = "SysHeader32",
        WC_HEADER = "SysHeader",
        
#if WINCTL                                        
        TOOLBARCLASSNAMEW = "WFCToolbarWindow32",
        TOOLBARCLASSNAMEA = "WFCToolbarWindow32",
        TOOLBARCLASSNAME = "WFCToolbarWindow32",
#else
        TOOLBARCLASSNAMEW = "ToolbarWindow32",
        TOOLBARCLASSNAMEA = "ToolbarWindow32",
        TOOLBARCLASSNAME = "ToolbarWindow32",
#endif 
       
        REBARCLASSNAMEW = "ReBarWindow32",
        REBARCLASSNAMEA = "ReBarWindow32",
        REBARCLASSNAME = "ReBarWindow32",
        
        
#if WINCTL        
        TOOLTIPS_CLASSW = "WFCTooltips32",
        TOOLTIPS_CLASSA = "WFCTooltips32",
        TOOLTIPS_CLASS = "WFCTooltips32",
#else
        TOOLTIPS_CLASSW = "tooltips_class32",
        TOOLTIPS_CLASSA = "tooltips_class32",
        TOOLTIPS_CLASS = "tooltips_class32",
#endif
        
        /*
        STATUSCLASSNAMEW = "msctls_statusbar32",
        STATUSCLASSNAMEA = "msctls_statusbar32",
        STATUSCLASSNAME = "msctls_statusbar32",
        TRACKBAR_CLASSA = "msctls_trackbar32",
        TRACKBAR_CLASSW = "msctls_trackbar32",
        TRACKBAR_CLASS = "msctls_trackbar32",
        */
        DRAGLISTMSGSTRING = "commctrl_DragListMsg",
        /*
        UPDOWN_CLASSA = "msctls_updown32",
        UPDOWN_CLASSW = "msctls_updown32",
        UPDOWN_CLASS = "msctls_updown32",
        PROGRESS_CLASSA = "msctls_progress32",
        PROGRESS_CLASSW = "msctls_progress32",
        PROGRESS_CLASS = "msctls_progress32",
        */
        HOTKEY_CLASSA = "msctls_hotkey32",
        HOTKEY_CLASSW = "msctls_hotkey32",
        HOTKEY_CLASS = "msctls_hotkey32",
        WC_BUTTON = "BUTTON",
        WC_COMBOBOX = "COMBOBOX",
        WC_EDIT = "EDIT",
        WC_LISTBOX = "LISTBOX",
        WC_MDICLIENT = "MDICLIENT",
        WC_SCROLLBAR = "SCROLLBAR",
        WC_RICHEDITA = "RichEdit32",
        WC_RICHEDITW = "RichEdit32",
        WC_RICHEDIT = "RichEdit32",
                 
#if WINCTL
        WC_DATETIMEPICKA = "WFCDateTimePick32",
        WC_DATETIMEPICKW = "WFCDateTimePick32",
        WC_DATETIMEPICK = "WFCDateTimePick32",
        WC_LISTVIEWA = "WFCListView32",
        WC_LISTVIEWW = "WFCListView32",
        WC_LISTVIEW = "WFCListView32",
        WC_MONTHCALA = "WFCMonthCal32",
        WC_MONTHCALW = "WFCMonthCal32",
        WC_MONTHCAL = "WFCMonthCal32",
        WC_PROGRESSA = "WFCProgress32",
        WC_PROGRESSW = "WFCProgress32",
        WC_PROGRESS = "WFCProgress32",
        WC_STATUSBARA = "WFCStatusBar32",
        WC_STATUSBARW = "WFCStatusBar32",
        WC_STATUSBAR = "WFCStatusBar32",
        WC_TOOLBAR = "WFCToolbarWindow32",
        WC_TRACKBARA = "WFCTrackbar32",
        WC_TRACKBARW = "WFCTrackbar32",
        WC_TRACKBAR = "WFCTrackbar32",
        WC_TREEVIEWA = "WFCTreeView32",
        WC_TREEVIEWW = "WFCTreeView32",
        WC_TREEVIEW = "WFCTreeView32",
#else
        WC_DATETIMEPICKA = "SysDateTimePick32",
        WC_DATETIMEPICKW = "SysDateTimePick32",
        WC_DATETIMEPICK = "SysDateTimePick32",
        WC_LISTVIEWA = "SysListView32",
        WC_LISTVIEWW = "SysListView32",
        WC_LISTVIEW = "SysListView32",
        WC_MONTHCALA = "SysMonthCal32",
        WC_MONTHCALW = "SysMonthCal32",
        WC_MONTHCAL = "SysMonthCal32",
        WC_PROGRESSA = "msctls_progress32",
        WC_PROGRESSW = "msctls_progress32",
        WC_PROGRESS = "msctls_progress32",
        WC_STATUSBARA = "msctls_statusbar32",
        WC_STATUSBARW = "msctls_statusbar32",
        WC_STATUSBAR = "msctls_statusbar32",
        WC_TOOLBAR = "ToolbarWindow32",
        WC_TRACKBARA = "msctls_trackbar32",
        WC_TRACKBARW = "msctls_trackbar32",
        WC_TRACKBAR = "msctls_trackbar32",
        WC_TREEVIEWA = "SysTreeView32",
        WC_TREEVIEWW = "SysTreeView32",
        WC_TREEVIEW = "SysTreeView32",
#endif
        
        WC_COMBOBOXEXW = "ComboBoxEx32",
        WC_COMBOBOXEXA = "ComboBoxEx32",
        WC_COMBOBOXEX = "ComboBoxEx32",
        WC_STATIC = "STATIC",
        
#if WINCTL                         
        WC_TABCONTROLA = "WFCTabControl32",
        WC_TABCONTROLW = "WFCTabControl32",
        WC_TABCONTROL = "WFCTabControl32",
#else        
        WC_TABCONTROLA = "SysTabControl32",
        WC_TABCONTROLW = "SysTabControl32",
        WC_TABCONTROL = "SysTabControl32",
#endif        
        
        /*
        ANIMATE_CLASSW = "SysAnimate32",
        ANIMATE_CLASSA = "SysAnimate32",
        ANIMATE_CLASS = "SysAnimate32",
        MONTHCAL_CLASSW = "SysMonthCal32",
        MONTHCAL_CLASSA = "SysMonthCal32",
        MONTHCAL_CLASS = "SysMonthCal32",
        DATETIMEPICK_CLASSW = "SysDateTimePick32",
        DATETIMEPICK_CLASSA = "SysDateTimePick32",
        DATETIMEPICK_CLASS = "SysDateTimePick32",
        */
        LBSELCHSTRING = "commdlg_LBSelChangedNotify",
        FINDMSGSTRING = "commdlg_FindReplace",
        SHAREVISTRING = "commdlg_ShareViolation",
        SERVICES_FAILED_DATABASE = "ServicesFailed",
        MS_DEF_PROV_ = "Microsoft Base Cryptographic Provider v1.0",
        HELPMSGSTRING = "commdlg_help",
        FILEOKSTRING = "commdlg_FileNameOK",
        SERVICES_ACTIVE_DATABASE = "ServicesActive",
        COLOROKSTRING = "commdlg_ColorOK",
        SETRGBSTRING = "commdlg_SetRGBColor",
        MSH_MOUSEWHEEL = "MSWHEEL_ROLLMSG",
        MSH_SCROLL_LINES = "MSH_SCROLL_LINES_MSG",
        MSH_WHEELSUPPORT = "MSH_WHEELSUPPORT_MSG",
        MOUSEZ_CLASSNAME = "MouseZ",
        MOUSEZ_TITLE = "Magellan MSWHEEL";


        public static RegistryHive
        HKEY_CLASSES_ROOT         = RegistryHive.ClassesRoot,
        HKEY_CURRENT_USER         = RegistryHive.CurrentUser,
        HKEY_LOCAL_MACHINE        = RegistryHive.LocalMachine,
        HKEY_USERS                = RegistryHive.Users,
        HKEY_PERFORMANCE_DATA     = RegistryHive.PerformanceData,
        HKEY_CURRENT_CONFIG       = RegistryHive.CurrentConfig,
        HKEY_DYN_DATA             = RegistryHive.DynData;

        public const int CHILDID_SELF = 0;
        public const int OBJID_WINDOW = 0x00000000;
        public const int OBJID_CLIENT = unchecked(unchecked((int)0xFFFFFFFC));
        public const string uuid_IAccessible  = "{618736E0-3C3D-11CF-810C-00AA00389B71}";
        public const string uuid_IEnumVariant = "{00020404-0000-0000-C000-000000000046}";
        
        public const int OLECMDID_UPDATECOMMANDS    = 21;
        public const int OLECMDF_SUPPORTED          = 0x00000001;
        public const int OLECMDF_ENABLED            = 0x00000002;
        public const int OLECMDF_LATCHED            = 0x00000004;
        public const int OLECMDF_NINCHED            = 0x00000008;
        public const int OLECMDF_INVISIBLE          = 0x00000010;
        public const int OLECMDF_DEFHIDEONCTXTMENU  = 0x00000020;
        public static readonly Guid CLSID_NULL = new Guid(0,(short)0,(short)0, new byte[] {(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0});


        public const int CSIDL_DESKTOP                    = 0x0000;        // <desktop>
        public const int CSIDL_INTERNET                   = 0x0001;        // Internet Explorer (icon on desktop)
        public const int CSIDL_PROGRAMS                   = 0x0002;        // Start Menu\Programs
        public const int CSIDL_CONTROLS                   = 0x0003;        // My Computer\Control Panel
        public const int CSIDL_PRINTERS                   = 0x0004;        // My Computer\Printers
        public const int CSIDL_PERSONAL                   = 0x0005;        // My Documents
        public const int CSIDL_FAVORITES                  = 0x0006;        // <user name>\Favorites
        public const int CSIDL_STARTUP                    = 0x0007;        // Start Menu\Programs\Startup
        public const int CSIDL_RECENT                     = 0x0008;        // <user name>\Recent
        public const int CSIDL_SENDTO                     = 0x0009;        // <user name>\SendTo
        public const int CSIDL_BITBUCKET                  = 0x000a;        // <desktop>\Recycle Bin
        public const int CSIDL_STARTMENU                  = 0x000b;        // <user name>\Start Menu
        public const int CSIDL_DESKTOPDIRECTORY           = 0x0010;        // <user name>\Desktop
        public const int CSIDL_DRIVES                     = 0x0011;        // My Computer
        public const int CSIDL_NETWORK                    = 0x0012;        // Network Neighborhood
        public const int CSIDL_NETHOOD                    = 0x0013;        // <user name>\nethood
        public const int CSIDL_FONTS                      = 0x0014;        // windows\fonts
        public const int CSIDL_TEMPLATES                  = 0x0015;
        public const int CSIDL_COMMON_STARTMENU           = 0x0016;        // All Users\Start Menu
        public const int CSIDL_COMMON_PROGRAMS            = 0x0017;        // All Users\Programs
        public const int CSIDL_COMMON_STARTUP             = 0x0018;        // All Users\Startup
        public const int CSIDL_COMMON_DESKTOPDIRECTORY    = 0x0019;        // All Users\Desktop
        public const int CSIDL_APPDATA                    = 0x001a;        // <user name>\Application Data
        public const int CSIDL_PRINTHOOD                  = 0x001b;        // <user name>\PrintHood
        public const int CSIDL_LOCAL_APPDATA              = 0x001c;        // <user name>\Local Settings\Applicaiton Data (non roaming)
        public const int CSIDL_ALTSTARTUP                 = 0x001d;        // non localized startup
        public const int CSIDL_COMMON_ALTSTARTUP          = 0x001e;        // non localized common startup
        public const int CSIDL_COMMON_FAVORITES           = 0x001f;
        public const int CSIDL_INTERNET_CACHE             = 0x0020;
        public const int CSIDL_COOKIES                    = 0x0021;
        public const int CSIDL_HISTORY                    = 0x0022;
        public const int CSIDL_COMMON_APPDATA             = 0x0023;        // All Users\Application Data
        public const int CSIDL_WINDOWS                    = 0x0024;        // GetWindowsDirectory()
        public const int CSIDL_SYSTEM                     = 0x0025;        // GetSystemDirectory()
        public const int CSIDL_PROGRAM_FILES              = 0x0026;        // C:\Program Files
        public const int CSIDL_MYPICTURES                 = 0x0027;        // C:\Program Files\My Pictures
        public const int CSIDL_PROFILE                    = 0x0028;        // USERPROFILE
        public const int CSIDL_SYSTEMX86                  = 0x0029;        // x86 system directory on RISC
        public const int CSIDL_PROGRAM_FILESX86           = 0x002a;        // x86 C:\Program Files on RISC
        public const int CSIDL_PROGRAM_FILES_COMMON       = 0x002b;        // C:\Program Files\Common
        public const int CSIDL_PROGRAM_FILES_COMMONX86    = 0x002c;        // x86 Program Files\Common on RISC
        public const int CSIDL_COMMON_TEMPLATES           = 0x002d;        // All Users\Templates
        public const int CSIDL_COMMON_DOCUMENTS           = 0x002e;        // All Users\Documents
        public const int CSIDL_COMMON_ADMINTOOLS          = 0x002f;        // All Users\Start Menu\Programs\Administrative Tools
        public const int CSIDL_ADMINTOOLS                 = 0x0030;        // <user name>\Start Menu\Programs\Administrative Tools
        
        public const int SHGFP_TYPE_CURRENT               = 0;             // the current (user) folder path setting
        public const int SHGFP_TYPE_DEFAULT               = 1;             // the default folder path setting

        public const int CSIDL_FLAG_CREATE                = 0x8000;        // combine with CSIDL_ value to force create on SHGetSpecialFolderLocation()
        public const int CSIDL_FLAG_DONT_VERIFY           = 0x4000;        // combine with CSIDL_ value to force create on SHGetSpecialFolderLocation()
        public const int CSIDL_FLAG_MASK                  = 0xFF00;        // mask for all possible flag values

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.WM_REFLECT"]/*' />
        /// <devdoc>
        ///     These are .NET Framework specific messages that we add for our convenience.
        /// </devdoc>
        public const int WM_REFLECT          = NativeMethods.WM_USER + 0x1C00;
        public const int WM_CTLCOLOR         = 0x0019;

        /*
        * wait constants
        */



        public const int TBSTYLE_WRAPPABLE     = 0x0200;
        public const int TVM_SETBKCOLOR        = (NativeMethods.TV_FIRST + 29);
        public const int TVM_SETTEXTCOLOR      = (NativeMethods.TV_FIRST + 30);

        /*
        * MISCELLANEOUS
        */
        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.FONTDESC"]/*' />
        /// <devdoc>
        /// </devdoc>
        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]
        public class FONTDESC {
            public int      cbSizeOfStruct = Marshal.SizeOf(typeof(FONTDESC));
            public string   lpstrName;
            public long     cySize;
            public short    sWeight;
            public short    sCharset;
            public bool     fItalic;
            public bool     fUnderline;
            public bool     fStrikethrough;
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.PICTDESCbmp"]/*' />
        /// <devdoc>
        /// </devdoc>
        [StructLayout(LayoutKind.Sequential)]
        public class PICTDESCbmp {
            internal int cbSizeOfStruct = 4 * 5;
            internal int picType = Ole.PICTYPE_BITMAP;
            internal IntPtr hbitmap = NativeMethods.NullIntPtr;
            internal IntPtr hpalette = NativeMethods.NullIntPtr;
            internal int unused = 0;

            public PICTDESCbmp(System.Drawing.Bitmap bitmap) {
                hbitmap = bitmap.GetHbitmap();
                // gpr: What about palettes?
            }
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.PICTDESCicon"]/*' />
        /// <devdoc>
        /// </devdoc>
        [StructLayout(LayoutKind.Sequential)]
        public class PICTDESCicon {
            internal int cbSizeOfStruct = 4 * 5;
            internal int picType = Ole.PICTYPE_ICON;
            internal IntPtr hicon = NativeMethods.NullIntPtr;
            internal int unused1 = 0;
            internal int unused2 = 0;

            public PICTDESCicon(System.Drawing.Icon icon) {
                hicon = SafeNativeMethods.CopyImage(icon.Handle, NativeMethods.IMAGE_ICON, icon.Size.Width, icon.Size.Height, 0);
            }
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.PICTDESCemf"]/*' />
        /// <devdoc>
        /// </devdoc>
        [StructLayout(LayoutKind.Sequential)]
        public class PICTDESCemf {
            internal int cbSizeOfStruct = 4 * 5;
            internal int picType = Ole.PICTYPE_ENHMETAFILE;
            internal IntPtr hemf = NativeMethods.NullIntPtr;
            internal int unused1 = 0;
            internal int unused2 = 0;

            public PICTDESCemf(System.Drawing.Imaging.Metafile metafile) {
                //gpr                hemf = metafile.CopyHandle();
            }
        }

        
        [StructLayout(LayoutKind.Sequential)]
        public class USEROBJECTFLAGS {
            public int fInherit = 0;
            public int fReserved = 0;
            public int dwFlags = 0;
        }

        
        [StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        internal class SYSTEMTIMEARRAY {
            public short wYear1;
            public short wMonth1;
            public short wDayOfWeek1;
            public short wDay1;
            public short wHour1;
            public short wMinute1;
            public short wSecond1;
            public short wMilliseconds1;
            public short wYear2;
            public short wMonth2;
            public short wDayOfWeek2;
            public short wDay2;
            public short wHour2;
            public short wMinute2;
            public short wSecond2;
            public short wMilliseconds2;
        }
        
        public delegate bool EnumChildrenCallback(IntPtr hwnd, IntPtr lParam);

        
        
        [StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        public class HELPWININFO {
            public int wStructSize = 0;
            public int x = 0;
            public int y = 0;
            public int dx = 0;
            public int dy = 0;
            public int wMax = 0;
            public string rgchMember = null;
        }

        [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class HH_POPUP {
            internal int       cbStruct=Marshal.SizeOf(typeof(HH_POPUP));
            internal IntPtr    hinst = NullIntPtr;
            internal int       idString = 0;
            internal string    pszText;
            internal POINT     pt;
            internal int       clrForeground = -1;
            internal int       clrBackground = -1;
            internal RECT      rcMargins = RECT.FromXYWH(-1, -1, -1, -1);     // amount of space between edges of window and text, -1 for each member to ignore
            internal string    pszFont = null;
        }

        [StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        public class MONITORINFOEX {
            internal int     cbSize = 0;
            internal RECT    rcMonitor = new RECT();
            internal RECT    rcWork = new RECT();
            internal int     dwFlags = 0;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst=32)]
            internal string  dwDevice = null;
        }

        [StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        public class MONITORINFO {
            internal int     cbSize = 0;
            internal RECT    rcMonitor = new RECT();
            internal RECT    rcWork = new RECT();
            internal int     dwFlags = 0;
        }

        
        public delegate bool EnumChildrenProc(IntPtr hwnd, IntPtr lParam);




        public delegate int EditStreamCallback(int dwCookie, IntPtr buf, int cb, IntPtr transferred);

        [StructLayout(LayoutKind.Sequential)]
        public class EDITSTREAM {
            public int  dwCookie = 0;
            public int  dwError = 0;
            public EditStreamCallback   pfnCallback = null;
        }

        [StructLayout(LayoutKind.Sequential)]
        public class VS_FIXEDFILEINFO {
            public int dwSignature = 0;
            public int dwStructVersion = 0;
            public int dwFileVersionMS = 0;
            public int dwFileVersionLS = 0;
            public int dwProductVersionMS = 0;
            public int dwProductVersionLS = 0;
            public int dwFileFlagsMask = 0;
            public int dwFileFlags = 0;
            public int dwFileOS = 0;
            public int dwFileType = 0;
            public int dwFileSubtype = 0;
            public int dwFileDateMS = 0;
            public int dwFileDateLS = 0;
        }
    [System.Runtime.InteropServices.ComImport(), Guid("0FF510A3-5FA5-49F1-8CCC-190D71083F3E"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IVsPerPropertyBrowsing {
        // hides the property at the given dispid from the property browser
        // implmentors should can return E_NOTIMPL to show all properties that
        // are otherwise browsable.
        
        [PreserveSig]
        int HideProperty(int dispid,ref bool pfHide);
      
        // allows properties of type VT_DISPATCH to be viewed recusively.  Non-NULL VT_DISPATCH properties
        // will have the "+" expandable glyph next to them and can be expanded or collapsed by the user
        // Returning a non-S_OK return code or false for pfDisplay will suppress this feature
        
        [PreserveSig]
        int DisplayChildProperties(int dispid, 
                                   ref bool pfDisplay);
      
        // retrieves the localized name and description for a property.
        // returning a non-S_OK return code will display the default values
        
        [PreserveSig]
        int GetLocalizedPropertyInfo(int dispid, int localeID, 
                                     [Out, MarshalAs(UnmanagedType.LPArray)]
                                     string[] pbstrLocalizedName, 
                                     [Out, MarshalAs(UnmanagedType.LPArray)]
                                     string[] pbstrLocalizeDescription);
      
        // determines if the given (usually current) value for a property is the default.  If it is not default,
        // the property will be shown as bold in the browser to indcate that it has been modified from the default.
        // Implmentors should return a non-S_OK return code or *fDefault = TRUE to display property value normally.
        
        [PreserveSig]
        int HasDefaultValue(int dispid,
                           ref bool fDefault);
      
        // determines if a property should be made read only.  This only applies to properties that are writeable,
        // but returning TRUE for pfReadOnly will cause them to be displayed by the propety browser as read only.
        [PreserveSig]
        int IsPropertyReadOnly(int dispid, 
                               ref bool fReadOnly);
                               
        
        // returns the classname for this object.  The class name is the non-bolded text that appears in the 
        // property browser selection combo.  If this method returns a non-S_OK return code, the default
        // will be used.  The default is the name string from a call to ITypeInfo::GetDocumentation(MEMID_NIL, ...);
        [PreserveSig]
        int GetClassName([In, Out]ref string pbstrClassName);

        // checks whether the given property can be reset to some default value.  If return value is non-S_OK or *pfCanReset is 
        // is FALSE, the value will not be able to be reset.
        //
        [PreserveSig]
        int CanResetPropertyValue(int dispid, [In, Out]ref bool pfCanReset);

        // Resets the value of the given property.  This method will only be called of CanResetProperty returns S_OK and *pfCanReset == TRUE for the
        // given property.  If the return value is S_OK, the property's value will then be refreshed to the new default
        // values.
        [PreserveSig]
        int ResetPropertyValue(int dispid);                               
   }
    [System.Runtime.InteropServices.ComImport(), Guid("7494683C-37A0-11d2-A273-00C04F8EF4FF"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IManagedPerPropertyBrowsing {

        
        [PreserveSig]
        int GetPropertyAttributes(int dispid, 
                                  ref int  pcAttributes,
                                  ref IntPtr pbstrAttrNames,
                                  ref IntPtr pvariantInitValues);
    }
    [System.Runtime.InteropServices.ComImport(), Guid("33C0C1D8-33CF-11d3-BFF2-00C04F990235"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IProvidePropertyBuilder {

             [PreserveSig]
             int MapPropertyToBuilder(
                    
                     int dispid,
                    [In, Out, MarshalAs(UnmanagedType.LPArray)]
                      int[] pdwCtlBldType,
                    [In, Out, MarshalAs(UnmanagedType.LPArray)]
                      string[] pbstrGuidBldr,
          [In, Out, MarshalAs(UnmanagedType.Bool)]
          ref bool builderAvailable);

             [PreserveSig]
             int ExecuteBuilder(
                    
                     int dispid,
                    [In, MarshalAs(UnmanagedType.BStr)]
                     string bstrGuidBldr,
                    [In, MarshalAs(UnmanagedType.Interface)]
                     object pdispApp,
                    
                     IntPtr hwndBldrOwner,
                    [Out, In, MarshalAs(UnmanagedType.Struct)]
                     ref object pvarValue,
                    [In, Out, MarshalAs(UnmanagedType.Bool)]
                     ref bool actionCommitted);
    }

        [StructLayout(LayoutKind.Sequential, Pack=1)]
        public class INITCOMMONCONTROLSEX {
            public int  dwSize = 8; //ndirect.DllLib.sizeOf(this);
            public int  dwICC;
        }


        [StructLayout(LayoutKind.Sequential, Pack=1)]
        public class IMAGELISTDRAWPARAMS {
            public int      cbSize = 56; //ndirect.DllLib.sizeOf(this);
            public IntPtr   himl;
            public int      i;
            public IntPtr   hdcDst;
            public int      x;
            public int      y;
            public int      cx;
            public int      cy;
            public int      xBitmap;
            public int      yBitmap;
            public int      rgbBk;
            public int      rgbFg;
            public int      fStyle;
            public int      dwRop;
        }


        [StructLayout(LayoutKind.Sequential, Pack=1)]
        public class IMAGEINFO {
            public IntPtr   hbmImage;
            public IntPtr   hbmMask;
            public int      Unused1;
            public int      Unused2;
            // rcImage was a by-value RECT structure
            public int      rcImage_left;
            public int      rcImage_top;
            public int      rcImage_right;
            public int      rcImage_bottom;
        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class TRACKMOUSEEVENT {
                public int      cbSize = 16; //ndirect.DllLib.sizeOf(this);
                public int      dwFlags;
                public IntPtr   hwndTrack;
                public int      dwHoverTime;
        }
        
        [StructLayout(LayoutKind.Sequential)]
        public class POINT {
            public int x;
            public int y;

            public POINT() {
            }

            public POINT(int x, int y) {
                this.x = x;
                this.y = y;
            }
        }

        public delegate IntPtr WndProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT {
            public int left;
            public int top;
            public int right;
            public int bottom;

            public RECT(int left, int top, int right, int bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }

            public static RECT FromXYWH(int x, int y, int width, int height) {
                return new RECT(x,
                                y,
                                x + width,
                                y + height);
            }
        }

        public delegate int ListViewCompareCallback(IntPtr lParam1, IntPtr lParam2, IntPtr lParamSort);

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class WNDCLASS {
                public int      style;
                public IntPtr   lpfnWndProc;
                public int      cbClsExtra;
                public int      cbWndExtra;
                public IntPtr   hInstance;
                public IntPtr   hIcon;
                public IntPtr   hCursor;
                public IntPtr   hbrBackground;
                public string   lpszMenuName;
                public string   lpszClassName;
        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class WNDCLASS_I {
                public int      style;
                public IntPtr   lpfnWndProc;
                public int      cbClsExtra;
                public int      cbWndExtra;
                public IntPtr   hInstance;
                public IntPtr   hIcon;
                public IntPtr   hCursor;
                public IntPtr   hbrBackground;
                public IntPtr   lpszMenuName;
                public IntPtr   lpszClassName;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class NONCLIENTMETRICS {
            public int      cbSize = Marshal.SizeOf(typeof(NONCLIENTMETRICS));
            public int      iBorderWidth; 
            public int      iScrollWidth; 
            public int      iScrollHeight; 
            public int      iCaptionWidth; 
            public int      iCaptionHeight; 
            [MarshalAs(UnmanagedType.Struct)]
            public LOGFONT  lfCaptionFont; 
            public int      iSmCaptionWidth; 
            public int      iSmCaptionHeight; 
            [MarshalAs(UnmanagedType.Struct)]
            public LOGFONT  lfSmCaptionFont; 
            public int      iMenuWidth; 
            public int      iMenuHeight; 
            [MarshalAs(UnmanagedType.Struct)]
            public LOGFONT  lfMenuFont; 
            [MarshalAs(UnmanagedType.Struct)]
            public LOGFONT  lfStatusFont; 
            [MarshalAs(UnmanagedType.Struct)]
            public LOGFONT  lfMessageFont; 
        }
        
        [StructLayout(LayoutKind.Sequential)]
        public struct MSG {
            public IntPtr   hwnd;
            public int      message;
            public IntPtr   wParam;
            public IntPtr   lParam;
            public int      time;
            // pt was a by-value POINT structure
            public int      pt_x;
            public int      pt_y;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public struct PAINTSTRUCT {
            public IntPtr   hdc;
            public bool     fErase;
            // rcPaint was a by-value RECT structure
            public int      rcPaint_left;
            public int      rcPaint_top;
            public int      rcPaint_right;
            public int      rcPaint_bottom;
            public bool     fRestore;
            public bool     fIncUpdate;    
            public int      reserved1;
            public int      reserved2;
            public int      reserved3;
            public int      reserved4;
            public int      reserved5;
            public int      reserved6;
            public int      reserved7;
            public int      reserved8;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class SCROLLINFO {
            public int cbSize = 28; //ndirect.DllLib.sizeOf(this);
            public int fMask;
            public int nMin;
            public int nMax;
            public int nPage;
            public int nPos;
            public int nTrackPos;

            public SCROLLINFO() {
            }

            public SCROLLINFO(int mask, int min, int max, int page, int pos) {
                fMask = mask;
                nMin = min;
                nMax = max;
                nPage = page;
                nPos = pos;
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class TPMPARAMS {
            public int  cbSize = 20; //ndirect.DllLib.sizeOf(this);
            // rcExclude was a by-value RECT structure
            public int  rcExclude_left;
            public int  rcExclude_top;
            public int  rcExclude_right;
            public int  rcExclude_bottom;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class SIZE {
            public int cx;
            public int cy;

            public SIZE() {
            }

            public SIZE(int cx, int cy) {
                this.cx = cx;
                this.cy = cy;
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class WINDOWPLACEMENT {
            public int  length = 44;
            public int  flags;
            public int  showCmd;
            // ptMinPosition was a by-value POINT structure
            public int  ptMinPosition_x;
            public int  ptMinPosition_y;
            // ptMaxPosition was a by-value POINT structure
            public int  ptMaxPosition_x;
            public int  ptMaxPosition_y;
            // rcNormalPosition was a by-value RECT structure
            public int  rcNormalPosition_left;
            public int  rcNormalPosition_top;
            public int  rcNormalPosition_right;
            public int  rcNormalPosition_bottom;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        public class STARTUPINFO {
                public int      cb;
                public string   lpReserved;
                public string   lpDesktop;
                public string   lpTitle;
                public int      dwX;
                public int      dwY;
                public int      dwXSize;
                public int      dwYSize;
                public int      dwXCountChars;
                public int      dwYCountChars;
                public int      dwFillAttribute;
                public int      dwFlags;
                public short    wShowWindow;
                public short    cbReserved2;
                public IntPtr   lpReserved2;
                public IntPtr   hStdInput;
                public IntPtr   hStdOutput;
                public IntPtr   hStdError;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential,CharSet=CharSet.Auto)]
        public class STARTUPINFO_I {
                public int      cb;
                public IntPtr   lpReserved;
                public IntPtr   lpDesktop;
                public IntPtr   lpTitle;
                public int      dwX;
                public int      dwY;
                public int      dwXSize;
                public int      dwYSize;
                public int      dwXCountChars;
                public int      dwYCountChars;
                public int      dwFillAttribute;
                public int      dwFlags;
                public short    wShowWindow;
                public short    cbReserved2;
                public IntPtr   lpReserved2;
                public IntPtr   hStdInput;
                public IntPtr   hStdOutput;
                public IntPtr   hStdError;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class PAGESETUPDLG {
            public int      lStructSize; 
            public IntPtr   hwndOwner; 
            public IntPtr   hDevMode; 
            public IntPtr   hDevNames; 
            public int      Flags; 

            //POINT           ptPaperSize; 
            public int      paperSizeX;
            public int      paperSizeY;

            // RECT            rtMinMargin; 
            public int      minMarginLeft;
            public int      minMarginTop;
            public int      minMarginRight;
            public int      minMarginBottom;

            // RECT            rtMargin; 
            public int      marginLeft;
            public int      marginTop;
            public int      marginRight;
            public int      marginBottom;

            public IntPtr   hInstance; 
            public IntPtr   lCustData; 
            public WndProc  lpfnPageSetupHook; 
            public WndProc  lpfnPagePaintHook; 
            public string   lpPageSetupTemplateName; 
            public IntPtr   hPageSetupTemplate; 
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
        public class PRINTDLG {
            public   int    lStructSize;
            public   IntPtr hwndOwner;
            public   IntPtr hDevMode;
            public   IntPtr hDevNames;
            public   IntPtr hDC;
            public   int    Flags;
            public   short  nFromPage;
            public   short  nToPage;
            public   short  nMinPage;
            public   short  nMaxPage;
            public   short  nCopies;
            public   IntPtr hInstance;
            public   IntPtr lCustData;
            public   WndProc lpfnPrintHook;
            public   WndProc lpfnSetupHook;
            public   string lpPrintTemplateName;
            public   string lpSetupTemplateName;
            public   IntPtr hPrintTemplate;
            public   IntPtr hSetupTemplate;
        }
        
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class PICTDESC
        {
            internal int cbSizeOfStruct;
            public int picType;
            internal IntPtr union1;
            internal int union2;
            internal int union3;

            public static PICTDESC CreateBitmapPICTDESC(IntPtr hbitmap, IntPtr hpal) {
                PICTDESC pictdesc = new PICTDESC();
                pictdesc.cbSizeOfStruct = 16;
                pictdesc.picType = Ole.PICTYPE_BITMAP;
                pictdesc.union1 = hbitmap;
                pictdesc.union2 = (int)(((long)hpal) & 0xffffffff);
                pictdesc.union3 = (int)(((long)hpal) >> 32);
                return pictdesc;
            }

            public static PICTDESC CreateIconPICTDESC(IntPtr hicon) {
                PICTDESC pictdesc = new PICTDESC();
                pictdesc.cbSizeOfStruct = 12;
                pictdesc.picType = Ole.PICTYPE_ICON;
                pictdesc.union1 = hicon;
                return pictdesc;
            }

            public static PICTDESC CreateEnhMetafilePICTDESC(IntPtr hEMF) {
                PICTDESC pictdesc = new PICTDESC();
                pictdesc.cbSizeOfStruct = 12;
                pictdesc.picType = Ole.PICTYPE_ENHMETAFILE;
                pictdesc.union1 = hEMF;
                return pictdesc;
            }

            public static PICTDESC CreateWinMetafilePICTDESC(IntPtr hmetafile, int x, int y) {
                PICTDESC pictdesc = new PICTDESC();
                pictdesc.cbSizeOfStruct = 20;
                pictdesc.picType = Ole.PICTYPE_METAFILE;
                pictdesc.union1 = hmetafile;
                pictdesc.union2 = x;
                pictdesc.union3 = y;
                return pictdesc;
            }

            public virtual IntPtr GetHandle() {
                return union1;
            }

            public virtual IntPtr GetHPal() {
                if (picType == Ole.PICTYPE_BITMAP)
                    return (IntPtr)(union2 | (((long)union3) << 32));
                else
                    return NullIntPtr;
            }
        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public  sealed class tagFONTDESC {
             public int cbSizeofstruct = System.Runtime.InteropServices.Marshal.SizeOf(typeof(tagFONTDESC)); 
             
             [MarshalAs(UnmanagedType.LPWStr)]
             public string lpstrName; 
             
             [MarshalAs(UnmanagedType.U8)] 
             public long cySize; 
             
             [MarshalAs(UnmanagedType.U2)] 
             public short sWeight; 
             
             [MarshalAs(UnmanagedType.U2)] 
             public short sCharset;
             
             [MarshalAs(UnmanagedType.Bool)] 
             public bool  fItalic; 
             
             [MarshalAs(UnmanagedType.Bool)] 
             public bool  fUnderline; 
             
             [MarshalAs(UnmanagedType.Bool)] 
             public bool fStrikethrough; 
        }


        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
        public class CHOOSECOLOR {
            public int      lStructSize = 36; //ndirect.DllLib.sizeOf(this);
            public IntPtr   hwndOwner;
            public IntPtr   hInstance;
            public int      rgbResult;
            public IntPtr   lpCustColors;
            public int      Flags;
            public IntPtr   lCustData;
            public WndProc  lpfnHook;
            public string   lpTemplateName;
        }
        
        public delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);
        
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class BITMAP {
                public int bmType;
                public int bmWidth;
                public int bmHeight;
                public int bmWidthBytes;
                public short bmPlanes;
                public short bmBitsPixel;
                public int bmBits;
        }
        
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class DIBSECTION {
            public BITMAP dsBm;
            public BITMAPINFOHEADER dsBmih;
            [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=3)]
            public int[] dsBitfields;
            public IntPtr dshSection;
            public int dsOffset;
        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class LOGPEN {
            public int  lopnStyle;
            // lopnWidth was a by-value POINT structure
            public int  lopnWidth_x;
            public int  lopnWidth_y;
            public int  lopnColor;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class LOGBRUSH {
                public int lbStyle;
                public int lbColor;
                public IntPtr lbHatch;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class LOGFONT {
                public int lfHeight;
                public int lfWidth;
                public int lfEscapement;
                public int lfOrientation;
                public int lfWeight;
                public byte lfItalic;
                public byte lfUnderline;
                public byte lfStrikeOut;
                public byte lfCharSet;
                public byte lfOutPrecision;
                public byte lfClipPrecision;
                public byte lfQuality;
                public byte lfPitchAndFamily;
                [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=32)]
                public string   lfFaceName;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class LOGPALETTE {
                public short palVersion;
                public short palNumEntries;
                public PALETTEENTRY palPalEntry;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class PALETTEENTRY {
                public byte peRed;
                public byte peGreen;
                public byte peBlue;
                public byte peFlags;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class TEXTMETRIC {
                public int tmHeight;
                public int tmAscent;
                public int tmDescent;
                public int tmInternalLeading;
                public int tmExternalLeading;
                public int tmAveCharWidth;
                public int tmMaxCharWidth;
                public int tmWeight;
                public int tmOverhang;
                public int tmDigitizedAspectX;
                public int tmDigitizedAspectY;
                public char tmFirstChar;
                public char tmLastChar;
                public char tmDefaultChar;
                public char tmBreakChar;
                public byte tmItalic;
                public byte tmUnderlined;
                public byte tmStruckOut;
                public byte tmPitchAndFamily;
                public byte tmCharSet;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
        public class NOTIFYICONDATA {
            public int      cbSize;
            public IntPtr   hWnd;
            public int      uID;
            public int      uFlags;
            public int      uCallbackMessage;
            public IntPtr   hIcon;
            [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=64)]
            public string   szTip;

            public NOTIFYICONDATA() {
                cbSize = System.Runtime.InteropServices.Marshal.SizeOf(this);
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class MENUITEMINFO_T
        {
            public int      cbSize = 44; //ndirect.DllLib.sizeOf(this);
            public int      fMask;
            public int      fType;
            public int      fState;
            public int      wID;
            public IntPtr   hSubMenu;
            public IntPtr   hbmpChecked;
            public IntPtr   hbmpUnchecked;
            public int      dwItemData;
            public string   dwTypeData;
            public int      cch;
        }
        public delegate bool EnumThreadWindowsCallback(IntPtr hWnd, IntPtr lParam);
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
        public class OPENFILENAME_I
        {
            public int      lStructSize = 0x58; //ndirect.DllLib.sizeOf(this);
            public IntPtr   hwndOwner;
            public IntPtr   hInstance;
            public string   lpstrFilter;   // use embedded nulls to separate filters
            public IntPtr   lpstrCustomFilter;
            public int      nMaxCustFilter;
            public int      nFilterIndex;
            public IntPtr   lpstrFile;
            public int      nMaxFile = NativeMethods.MAX_PATH;
            public IntPtr   lpstrFileTitle;
            public int      nMaxFileTitle = NativeMethods.MAX_PATH;
            public string   lpstrInitialDir;
            public string   lpstrTitle;
            public int      Flags;
            public short    nFileOffset;
            public short    nFileExtension;
            public string   lpstrDefExt;
            public IntPtr   lCustData;
            public WndProc  lpfnHook;
            public string   lpTemplateName;
            public IntPtr   pvReserved;
            public int      dwReserved;
            public int      FlagsEx;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto), CLSCompliantAttribute(false)]
        public class CHOOSEFONT {
            public int      lStructSize = 60;   // ndirect.DllLib.sizeOf(this);
            public IntPtr   hwndOwner;
            public IntPtr   hDC;
            public IntPtr   lpLogFont;
            public int      iPointSize;
            public int      Flags;
            public int      rgbColors;
            public IntPtr   lCustData;
            public WndProc  lpfnHook;
            public string   lpTemplateName;
            public IntPtr   hInstance;
            public string   lpszStyle;
            public short    nFontType;
            public short    ___MISSING_ALIGNMENT__;
            public int      nSizeMin;
            public int      nSizeMax;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class BITMAPINFO {
            // bmiHeader was a by-value BITMAPINFOHEADER structure
            public int      bmiHeader_biSize = 40;  // ndirect.DllLib.sizeOf( BITMAPINFOHEADER.class );
            public int      bmiHeader_biWidth;
            public int      bmiHeader_biHeight;
            public short    bmiHeader_biPlanes;
            public short    bmiHeader_biBitCount;
            public int      bmiHeader_biCompression;
            public int      bmiHeader_biSizeImage;
            public int      bmiHeader_biXPelsPerMeter;
            public int      bmiHeader_biYPelsPerMeter;
            public int      bmiHeader_biClrUsed;
            public int      bmiHeader_biClrImportant;

            // bmiColors was an embedded array of RGBQUAD structures
            public byte     bmiColors_rgbBlue;
            public byte     bmiColors_rgbGreen;
            public byte     bmiColors_rgbRed;
            public byte     bmiColors_rgbReserved;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class BITMAPINFOHEADER {
            public int      biSize = 40;    // ndirect.DllLib.sizeOf( this );
            public int      biWidth;
            public int      biHeight;
            public short    biPlanes;
            public short    biBitCount;
            public int      biCompression;
            public int      biSizeImage;
            public int      biXPelsPerMeter;
            public int      biYPelsPerMeter;
            public int      biClrUsed;
            public int      biClrImportant;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class BLENDFUNCTION {
            public byte BlendOp;
            public byte BlendFlags;
            public byte SourceConstantAlpha;
            public byte AlphaFormat;
        }
        [System.Runtime.InteropServices.ComVisible(false)]
        public class Ole {
            /*
             * Pictypes
             */
            public const int PICTYPE_UNINITIALIZED = -1;
            public const int PICTYPE_NONE          =  0;
            public const int PICTYPE_BITMAP        =  1;
            public const int PICTYPE_METAFILE      =  2;
            public const int PICTYPE_ICON          =  3;
            public const int PICTYPE_ENHMETAFILE   =  4;

            public const int STATFLAG_DEFAULT = 0;
            public const int STATFLAG_NONAME = 1;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public sealed class FORMATETC {

            
            public   short cfFormat;
            public   short dummy;
            
            public   IntPtr ptd;
            
            public   int dwAspect;
            
            public   int lindex;
            
            public   int tymed;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class STATSTG {

            [MarshalAs(UnmanagedType.LPWStr)]
            public   string pwcsName;
            
            public   int type;
            [MarshalAs(UnmanagedType.I8)]
            public   long cbSize;
            [MarshalAs(UnmanagedType.I8)]
            public   long mtime;
            [MarshalAs(UnmanagedType.I8)]
            public   long ctime;
            [MarshalAs(UnmanagedType.I8)]
            public   long atime;
            [MarshalAs(UnmanagedType.I8)]
            public   long grfMode;
            [MarshalAs(UnmanagedType.I8)]
            public   long grfLocksSupported;
            
            public   int clsid_data1;
            [MarshalAs(UnmanagedType.I2)]
            public   short clsid_data2;
            [MarshalAs(UnmanagedType.I2)]
            public   short clsid_data3;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b0;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b1;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b2;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b3;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b4;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b5;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b6;
            [MarshalAs(UnmanagedType.U1)]
            public   byte clsid_b7;
            [MarshalAs(UnmanagedType.I8)]
            public   long grfStateBits;
            [MarshalAs(UnmanagedType.I8)]
            public   long reserved;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class FILETIME {
                public int dwLowDateTime;
                public int dwHighDateTime;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class OVERLAPPED {
                public int Internal;
                public int InternalHigh;
                public int Offset;
                public int OffsetHigh;
                public IntPtr hEvent;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class SYSTEMTIME {
            public short wYear;
            public short wMonth;
            public short wDayOfWeek;
            public short wDay;
            public short wHour;
            public short wMinute;
            public short wSecond;
            public short wMilliseconds;

            public override string ToString() {
                return "[SYSTEMTIME: " 
                + wDay.ToString() +"/" + wMonth.ToString() + "/" + wYear.ToString() 
                + " " + wHour.ToString() + ":" + wMinute.ToString() + ":" + wSecond.ToString()
                + "]";
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
        public class STGMEDIUM {

            
            public   int tymed;
            
            public   IntPtr unionmember;
            
            public   IntPtr pUnkForRelease;

        }
        [
        System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential),
        CLSCompliantAttribute(false)
        ]
        public sealed class  _POINTL {

            
            public   int x;
            
            public   int y;

        }
        [StructLayout(LayoutKind.Sequential)]
        public sealed class tagSIZE {

            
            public   int cx;
            
            public   int cy;

        }
        [StructLayout(LayoutKind.Sequential)]
        public class COMRECT {
            public int left;
            public int top;
            public int right;
            public int bottom;

            public COMRECT() {
            }

            public COMRECT(int left, int top, int right, int bottom) {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }

            public static COMRECT FromXYWH(int x, int y, int width, int height) {
                return new COMRECT(x,
                                y,
                                x + width,
                                y + height);
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagOleMenuGroupWidths {
            [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=6)/*leftover(offset=0, widths)*/]
            public int[] widths = new int[6];
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class MSOCRINFOSTRUCT {
                public int cbSize;              // size of MSOCRINFO structure in bytes.
                public int uIdleTimeInterval;   // If olecrfNeedPeriodicIdleTime is registered
                                                // in grfcrf, component needs to perform
                                                // periodic idle time tasks during an idle phase
                                                // every uIdleTimeInterval milliseconds.
                public int grfcrf;              // bit flags taken from olecrf values (above)
                public int grfcadvf;            // bit flags taken from olecadvf values (above)
        }
        [System.Runtime.InteropServices.ComVisible(false), Flags]    
        public enum BrowseInfos {
            // Browsing for directory.
            ReturnOnlyFSDirs   = 0x0001,  // For finding a folder to start document searching
            DontGoBelowDomain  = 0x0002,  // For starting the Find Computer
            StatusText         = 0x0004,   // Top of the dialog has 2 lines of text for BROWSEINFO.lpszTitle and one line if
                                                                        // this flag is set.  Passing the message BFFM_SETSTATUSTEXTA to the hwnd can set the
                                                                        // rest of the text.  This is not used with USENEWUI and BROWSEINFO.lpszTitle gets
                                                                        // all three lines of text.
            ReturnFSAncestors  = 0x0008,
            EditBox            = 0x0010,   // Add an editbox to the dialog
            Validate           = 0x0020,   // insist on valid result (or CANCEL)

            NewDialogStyle     = 0x0040,   // Use the new dialog layout with the ability to resize
                                                    // Caller needs to call OleInitialize() before using this API

            UseNewUI           = (NewDialogStyle | EditBox),

            AllowUrls          = 0x0080,   // Allow URLs to be displayed or entered. (Requires USENEWUI)

            BrowseForComputer  = 0x1000,  // Browsing for Computers.
            BrowseForPrinter   = 0x2000,  // Browsing for Printers
            BrowseForEverything= 0x4000,  // Browsing for Everything
            ShowShares         = 0x8000   // sharable resources displayed (remote shares, requires USENEWUI)
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class NMLISTVIEW
        {
            public NMHDR hdr;
            public int   iItem;
            public int   iSubItem;
            public int   uNewState;
            public int   uOldState;
            public int   uChanged;
            public IntPtr lParam;
        }
        [System.Runtime.InteropServices.ComVisible(false)]
        public class ConnectionPointCookie
        {
            private UnsafeNativeMethods.IConnectionPoint connectionPoint;
            private int cookie;
    
            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.ConnectionPointCookie.ConnectionPointCookie"]/*' />
            /// <devdoc>
            /// Creates a connection point to of the given interface type.
            /// which will call on a managed code sink that implements that interface.
            /// </devdoc>
            public ConnectionPointCookie(object source, object sink, Type eventInterface) : this(source, sink, eventInterface, true){
            }
    
    
            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.ConnectionPointCookie.ConnectionPointCookie1"]/*' />
            /// <devdoc>
            /// Creates a connection point to of the given interface type.
            /// which will call on a managed code sink that implements that interface.
            /// </devdoc>
            public ConnectionPointCookie(object source, object sink, Type eventInterface, bool throwException){
                Exception ex = null;
                if (source is UnsafeNativeMethods.IConnectionPointContainer) {
                    UnsafeNativeMethods.IConnectionPointContainer cpc = (UnsafeNativeMethods.IConnectionPointContainer)source;
    
                    try {
                        Guid tmp = eventInterface.GUID;
                        connectionPoint = cpc.FindConnectionPoint(ref tmp);
                    }
                    catch (Exception) {
                        connectionPoint = null;
                    }
    
                    if (connectionPoint == null) {
                        // UNDONE (sreeramn/sburke): Localization.
                        ex = new ArgumentException("The source object does not expose the " + eventInterface.Name + " event inteface");
                    }
                    else if (!eventInterface.IsInstanceOfType(sink)) {
                        // UNDONE (sreeramn/sburke): Localization.
                        ex = new InvalidCastException("The sink object does not implement the eventInterface");
                    }
                    else if (!eventInterface.IsPublic) {
                        // UNDONE (sreeramn/sburke): Localization.
                        ex = new ArgumentException("The interface '" + eventInterface + "' must be public to be a sink for a COM connection point");
                    }
                    else {
                        int hr = connectionPoint.Advise(sink, ref cookie);
                        if (hr != S_OK) {
                            cookie = 0;
                            connectionPoint = null;
                            // UNDONE (sreeramn/sburke): Localization.
                            ex = new Exception(String.Format("IConnectionPoint::Advise failed with hr=0x{0:X} for event interface '" + eventInterface.Name + "'", hr));
                        }
                    }
                }
                else {
                    ex = new InvalidCastException("The source object does not expost IConnectionPointContainer");
                }
    
    
                if (throwException && (connectionPoint == null || cookie == 0)) {
                    if (ex == null) {
                        // UNDONE (sreeramn/sburke): Localization.
                        throw new ArgumentException("Could not create connection point for event interface '" + eventInterface.Name + "'");
                    }
                    else {
                        throw ex;
                    }
                }
            }
    
            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.ConnectionPointCookie.Disconnect"]/*' />
            /// <devdoc>
            /// Disconnect the current connection point.  If the object is not connected,
            /// this method will do nothing.
            /// </devdoc>
            public void Disconnect() {
                Disconnect(false);
            }
    
            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.ConnectionPointCookie.Disconnect1"]/*' />
            /// <devdoc>
            /// Disconnect the current connection point.  If the object is not connected,
            /// this method will do nothing.
            /// </devdoc>
            public void Disconnect(bool release) {
                if (connectionPoint != null && cookie != 0) {
                    connectionPoint.Unadvise(cookie);
                    cookie = 0;
    
                    if (release) {
                        System.Runtime.InteropServices.Marshal.ReleaseComObject(connectionPoint);
                    }
    
                    connectionPoint = null;
                }
            }
    
            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.ConnectionPointCookie.Finalize"]/*' />
            /// <internalonly/>
            protected override void Finalize(){
                Disconnect();
            }
        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagPOINTF
        {
          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.R4)/*leftover(offset=0, x)*/]
          public float x;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.R4)/*leftover(offset=4, y)*/]
          public float y;

        }

        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagOIFI
        {
          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=0, cb)*/]
          public int cb;

          
          public int fMDIApp;

          
          public IntPtr hwndFrame;

          
          public IntPtr hAccel;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=16, cAccelEntries)*/]
          public int cAccelEntries;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public class NMHDR
        {
            public IntPtr hwndFrom;
            public int idFrom;
            public int code;
        }
        [ComImport(), Guid("376BD3AA-3845-101B-84ED-08002B2EC713"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface IPerPropertyBrowsing {

            
             [PreserveSig]
             int GetDisplayString(
                    
                     int dispID,
                    [Out, MarshalAs(UnmanagedType.LPArray)]
                     string[] pBstr);

            
             [PreserveSig]
             int MapPropertyToPage(
                    
                     int dispID,
                    [Out]
                     out Guid pGuid);

            
             [PreserveSig]
             int GetPredefinedStrings(
                    
                     int dispID,
                    [Out]
                      CA_STRUCT pCaStringsOut,
                    [Out]
                      CA_STRUCT pCaCookiesOut);

            
             [PreserveSig]
             int GetPredefinedValue(
                    
                     int dispID,
                    [In, MarshalAs(UnmanagedType.U4)]
                     int dwCookie,
                    [Out]
                      VARIANT pVarOut);
        }
        [ComImport(), Guid("4D07FC10-F931-11CE-B001-00AA006884E5"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface ICategorizeProperties {

            
             [PreserveSig]
             int MapPropertyToCategory(
                    
                     int dispID,
                 ref int categoryID);

            
             [PreserveSig]
             int GetCategoryName(
                    
                     int propcat,
                    [In, MarshalAs(UnmanagedType.U4)]
                     int lcid,
                 ref string categoryName);

        }
        [StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagSIZEL
        {
          
          public int cx;

          public int cy;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagOLEVERB
        {
          
          public int lVerb;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.LPWStr)/*leftover(offset=4, customMarshal="UniStringMarshaller", lpszVerbName)*/]
          public string lpszVerbName;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=8, fuFlags)*/]
          public int fuFlags;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=12, grfAttribs)*/]
          public int grfAttribs;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagLOGPALETTE
        {
          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U2)/*leftover(offset=0, palVersion)*/]
          public short palVersion;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U2)/*leftover(offset=2, palNumEntries)*/]
          public short palNumEntries;

        // UNMAPPABLE: palPalEntry: Cannot be used as a structure field.
        //   /** @com.structmap(UNMAPPABLE palPalEntry) */
        //  public UNMAPPABLE palPalEntry;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
        public sealed class tagCONTROLINFO
        {
          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=0, cb)*/]
          public int cb = System.Runtime.InteropServices.Marshal.SizeOf(typeof(tagCONTROLINFO));

          public IntPtr hAccel;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U2)/*leftover(offset=8, cAccel)*/]
          public short cAccel;

          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=10, dwFlags)*/]
          public int dwFlags;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]


        public sealed class CA_STRUCT
        {
          public int cElems;
          public IntPtr pElems;

        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public sealed class VARIANT {

            [MarshalAs(UnmanagedType.I2)]
            public short vt;
            [MarshalAs(UnmanagedType.I2)]
            public short reserved1;
            [MarshalAs(UnmanagedType.I2)]
            public short reserved2;
            [MarshalAs(UnmanagedType.I2)]
            public short reserved3;
            
            public IntPtr data1;
            
            public IntPtr data2;


            public bool Byref{
                get{
                    return 0 != (vt & (int)tagVT.VT_BYREF);
                }
            }

            public void Clear() {
                if ((this.vt == (int)tagVT.VT_UNKNOWN || this.vt == (int)tagVT.VT_DISPATCH) && this.data1 != NullIntPtr) {
                    Marshal.Release(this.data1);
                }

                if (this.vt == (int)tagVT.VT_BSTR && this.data1 != NullIntPtr) {
                    SysFreeString(this.data1);
                }

                this.data1 = this.data2 = NullIntPtr;
                this.vt = (int)tagVT.VT_EMPTY;
            }

            protected override void Finalize() {
                Clear();
            }

            public static VARIANT FromObject(Object var) {
                VARIANT v = new VARIANT();

                if (var == null) {
                    v.vt = (int)tagVT.VT_EMPTY;
                }
                else if (Convert.IsDBNull(var)) {
                    v.vt = (int)tagVT.VT_NULL;
                }
                else {
                    Type t = var.GetType();

                    if (t == typeof(bool)) {
                        v.vt = (int)tagVT.VT_BOOL;
                        v.data1 = Convert.ToBoolean(var) ? /*VARIANT_TRUE*/InvalidIntPtr : /*VARIANT_FALSE*/NullIntPtr;
                    }
                    else if (t == typeof(byte)) {
                        v.vt = (int)tagVT.VT_UI1;
                        v.data1 = (IntPtr)Convert.ToByte(var);
                    }
                    else if (t == typeof(char)) {
                        v.vt = (int)tagVT.VT_UI2;
                        v.data1 = (IntPtr)Convert.ToChar(var);
                    }
                    else if (t == typeof(string)) {
                        v.vt = (int)tagVT.VT_BSTR;
                        v.data1 = SysAllocString(Convert.ToString(var));
                    }
                    else if (t == typeof(short)) {
                        v.vt = (int)tagVT.VT_I2;
                        v.data1 = (IntPtr)Convert.ToInt16(var);
                    }
                    else if (t == typeof(int)) {
                        v.vt = (int)tagVT.VT_I4;
                        v.data1 = (IntPtr)Convert.ToInt32(var);
                    }
                    else if (t == typeof(long)) {
                        v.vt = (int)tagVT.VT_I8;
                        v.SetLong(Convert.ToInt64(var));
                    }
                    else if (t == typeof(Decimal)) {
                        v.vt = (int)tagVT.VT_CY;
                        Decimal c = (Decimal)var;
                        // SBUrke, it's bizzare that we need to call this as a static!
                        v.SetLong(Decimal.ToInt64(c));
                    }
                    else if (t == typeof(decimal)) {
                        v.vt = (int)tagVT.VT_DECIMAL;
                        Decimal d = Convert.ToDecimal(var);
                        v.SetLong(Decimal.ToInt64(d));
                    }
                    else if (t == typeof(double)) {
                        v.vt = (int)tagVT.VT_R8;
                        // how do we handle double?
                    }
                    else if (t == typeof(float) || t == typeof(Single)) {
                        v.vt = (int)tagVT.VT_R4;
                        // how do we handle float?
                    }
                    else if (t == typeof(DateTime)) {
                        v.vt = (int)tagVT.VT_DATE;
                        v.SetLong(Convert.ToDateTime(var).ToFileTime());
                    }
                    else if (t == typeof(SByte)) {
                        v.vt = (int)tagVT.VT_I1;
                        v.data1 = (IntPtr)Convert.ToSByte(var);
                    }
                    else if (t == typeof(UInt16)) {
                        v.vt = (int)tagVT.VT_UI2;
                        v.data1 = (IntPtr)Convert.ToUInt16(var);
                    }
                    else if (t == typeof(UInt32)) {
                        v.vt = (int)tagVT.VT_UI4;
                        v.data1 = (IntPtr)Convert.ToUInt32(var);
                    }
                    else if (t == typeof(UInt64)) {
                        v.vt = (int)tagVT.VT_UI8;
                        v.SetLong((long)Convert.ToUInt64(var));
                    }
                    else if (t == typeof(object) || t == typeof(UnsafeNativeMethods.IDispatch) || t.IsCOMObject) {
                        v.vt = (t == typeof(UnsafeNativeMethods.IDispatch) ? (short)tagVT.VT_DISPATCH : (short)tagVT.VT_UNKNOWN);
                        v.data1 = Marshal.GetIUnknownForObject(var);
                    }
                    else {
                        throw new ArgumentException("Unhandled type: " + t.Name);
                    }
                }
                return v;
            }


            [DllImport("oleaut32.dll",CharSet=System.Runtime.InteropServices.CharSet.Auto)]
            private static extern IntPtr SysAllocString([In, MarshalAs(UnmanagedType.LPWStr)]string s);

            [DllImport("oleaut32.dll",CharSet=System.Runtime.InteropServices.CharSet.Auto)]
            private static extern void SysFreeString(IntPtr pbstr);


            public void SetLong(long lVal) {
                data1 = (IntPtr)(lVal & 0xFFFFFFFF);
                data2 = (IntPtr)((lVal >> 32) & 0xFFFFFFFF);
            }

            public IntPtr ToCoTaskMemPtr() {
                IntPtr mem = Marshal.AllocCoTaskMem(16);
                Marshal.WriteInt16(mem, vt);
                Marshal.WriteInt16(mem, 2, reserved1);
                Marshal.WriteInt16(mem, 4, reserved2);
                Marshal.WriteInt16(mem, 6, reserved3);
                Marshal.WriteInt32(mem, 8, (int) data1);
                Marshal.WriteInt32(mem, 12, (int) data2);
                return mem;
            }


            public object ToObject() {
                IntPtr val = data1;
                long longVal;

                int vtType = (int)(this.vt & (short)tagVT.VT_TYPEMASK);

                switch (vtType) {
                case (int)tagVT.VT_EMPTY:
                    return null;
                case (int)tagVT.VT_NULL:
                    return Convert.DBNull;

                case (int)tagVT.VT_I1:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadByte(val);
                    }
                    return (SByte) (0xFF & (SByte) val);

                case (int)tagVT.VT_UI1:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadByte(val);
                    }

                    return (byte) (0xFF & (byte) val);

                case (int)tagVT.VT_I2:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadInt16(val);
                    }
                    return (short)(0xFFFF & (short) val);

                case (int)tagVT.VT_UI2:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadInt16(val);
                    }
                    return (UInt16)(0xFFFF & (UInt16) val);

                case (int)tagVT.VT_I4:
                case (int)tagVT.VT_INT:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadInt32(val);
                    }
                    return (int)val;

                case (int)tagVT.VT_UI4:
                case (int)tagVT.VT_UINT:
                    if (Byref) {
                        val = (IntPtr) Marshal.ReadInt32(val);
                    }
                    return (UInt32)val;

                case (int)tagVT.VT_I8:
                case (int)tagVT.VT_UI8:
                    if (Byref) {
                        longVal = Marshal.ReadInt64(val);
                    }
                    else {
                        longVal = ((int)data1 & 0xffffffff) | ((int)data2 << 32);
                    }

                    if (vt == (int)tagVT.VT_I8) {
                        return (long)longVal;
                    }
                    else {
                        return (UInt64)longVal;
                    }
                }

                if (Byref) {
                    val = GetRefInt(val);
                }

                switch (vtType) {
                case (int)tagVT.VT_R4:
                case (int)tagVT.VT_R8:

                    // can I use unsafe here?
                    throw new ArgumentException("How do we convert an int to a float?");

                case (int)tagVT.VT_CY:
                    // internally currency is 8-byte int scaled by 10,000
                    longVal = ((int)data1 & 0xffffffff) | ((int)data2 << 32);
                    return new Decimal(longVal);
                case (int)tagVT.VT_DATE:
                    throw new ArgumentException("How do we convert double to date?");

                case (int)tagVT.VT_BSTR:
                case (int)tagVT.VT_LPWSTR:
                    return Marshal.PtrToStringUni(val);

                case (int)tagVT.VT_LPSTR:
                    return Marshal.PtrToStringAnsi(val);

                case (int)tagVT.VT_DISPATCH:
                case (int)tagVT.VT_UNKNOWN:
                    {
                        return Marshal.GetObjectForIUnknown(val);
                    }

                case (int)tagVT.VT_ERROR:
                case (int)tagVT.VT_HRESULT:
                    return val;

                case (int)tagVT.VT_DECIMAL:
                    longVal = ((int)data1 & 0xffffffff) | ((int)data2 << 32);
                    return new Decimal(longVal);

                case (int)tagVT.VT_BOOL:
                    return (val != NullIntPtr);

                case (int)tagVT.VT_VARIANT:
                    VARIANT varStruct = (VARIANT)UnsafeNativeMethods.PtrToStructure(val, typeof(VARIANT));
                    return varStruct.ToObject();
                case (int)tagVT.VT_CLSID:
                    // TODO(sreeramn): This will not work because Guid is a value type...
                    //Debug.Fail("PtrToStructure will not work with System.Guid...");
                    Guid guid =(Guid)UnsafeNativeMethods.PtrToStructure(val, typeof(Guid));
                    return guid;

                case (int)tagVT.VT_FILETIME:
                    longVal = ((int)data1 & 0xffffffff) | ((int)data2 << 32);
                    return new DateTime(longVal);

                case (int)tagVT.VT_USERDEFINED:
                    throw new ArgumentException("Unhandled VT_USERDEFINED!");

                case (int)tagVT.VT_ARRAY:
                    //gSAFEARRAY sa = (tagSAFEARRAY)Marshal.PtrToStructure(val), typeof(tagSAFEARRAY));
                    //return GetArrayFromSafeArray(sa);

                case (int)tagVT.VT_VOID:
                case (int)tagVT.VT_PTR:
                case (int)tagVT.VT_SAFEARRAY:
                case (int)tagVT.VT_CARRAY:

                case (int)tagVT.VT_RECORD:
                case (int)tagVT.VT_BLOB:
                case (int)tagVT.VT_STREAM:
                case (int)tagVT.VT_STORAGE:
                case (int)tagVT.VT_STREAMED_OBJECT:
                case (int)tagVT.VT_STORED_OBJECT:
                case (int)tagVT.VT_BLOB_OBJECT:
                case (int)tagVT.VT_CF:
                case (int)tagVT.VT_BSTR_BLOB:
                case (int)tagVT.VT_VECTOR:
                case (int)tagVT.VT_BYREF:
                    //case (int)tagVT.VT_RESERVED:
                default:
                    int iVt = this.vt;
                    throw new ArgumentException("Unhandled VT: " + iVt.ToString());
                }
            }

            /*private static Array GetArrayFromSafeArray(tagSAFEARRAY sa){

                // 1. create our arrays
                 int flags = (int)sa.fFeatures;

                 // what type are they
                 Type arrayType = null;

                 if ((flags & NativeMethods.FADF_BSTR) != 0){
                     arrayType = typeof(string);
                 }
                 else if ((flags & NativeMethods.FADF_DISPATCH) != 0 || (flags & NativeMethods.FADF_UNKNOWN) != 0){
                     arrayType = typeof(object);
                 }
                 else if ((flags & NativeMethods.FADF_VARIANT) != 0){
                     arrayType = typeof(Object);
                 }
                 else if ((flags & NativeMethods.FADF_HAVEVARTYPE) != 0){
                     throw new NotSupportedException("FADF_HAVEVARTYPE isn't supported.  Please contact SBurke with this scenario.");
                 }

                 if (arrayType == null){
                     return null;
                 }

                 // get the bounds information
                 int[] arraySizes = new int[sa.cDims];
                 int[] arrayLBounds = new int[sa.cDims];

                 for (int i = 0; i < sa.cDims; i++){
                     tagSAFEARRAYBOUND saBound = (tagSAFEARRAYBOUND)Marshal.PtrToStructure(Marshal.ReadInt32(sa.rgsabound, i * 4));
                     if (saBound != null){
                         arraySizes[i] = saBound.cElements;
                         arrayLBounds[i] = saBound.lLbound;
                     }
                 }

                 // crate our array
                 Array array = Array.CreateInstance(arrayType, arraySizes, arrayLBounds);

                 // walk through each dimension and setup the values
                 for (int d = 0; d < sa.cDims; d++){
                     int lbound = arrayLBounds[d];
                     int max; lbound + arraySizes[d];

                     for (int i = lbound; i < max; i++){
                         array
                     }
                 }
            }*/


            private static IntPtr GetRefInt(IntPtr value) {
#if WIN64
                return Marshal.ReadInt64(value);
#else
                return (IntPtr) Marshal.ReadInt32(value);
#endif
            }
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]


        public sealed class tagLICINFO
        {
          [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=0, cb)*/]
          public int cbLicInfo = System.Runtime.InteropServices.Marshal.SizeOf(typeof(tagLICINFO));

          
          public int fRuntimeAvailable;

          
          public int fLicVerified;

        }
        [System.Runtime.InteropServices.ComVisible(false)]
        public enum  tagVT {

                VT_EMPTY = 0,
                VT_NULL = 1,
                VT_I2 = 2,
                VT_I4 = 3,
                VT_R4 = 4,
                VT_R8 = 5,
                VT_CY = 6,
                VT_DATE = 7,
                VT_BSTR = 8,
                VT_DISPATCH = 9,
                VT_ERROR = 10,
                VT_BOOL = 11,
                VT_VARIANT = 12,
                VT_UNKNOWN = 13,
                VT_DECIMAL = 14,
                VT_I1 = 16,
                VT_UI1 = 17,
                VT_UI2 = 18,
                VT_UI4 = 19,
                VT_I8 = 20,
                VT_UI8 = 21,
                VT_INT = 22,
                VT_UINT = 23,
                VT_VOID = 24,
                VT_HRESULT = 25,
                VT_PTR = 26,
                VT_SAFEARRAY = 27,
                VT_CARRAY = 28,
                VT_USERDEFINED = 29,
                VT_LPSTR = 30,
                VT_LPWSTR = 31,
                VT_RECORD = 36,
                VT_FILETIME = 64,
                VT_BLOB = 65,
                VT_STREAM = 66,
                VT_STORAGE = 67,
                VT_STREAMED_OBJECT = 68,
                VT_STORED_OBJECT = 69,
                VT_BLOB_OBJECT = 70,
                VT_CF = 71,
                VT_CLSID = 72,
                VT_BSTR_BLOB = 4095,
                VT_VECTOR = 4096,
                VT_ARRAY = 8192,
                VT_BYREF = 16384,
                VT_RESERVED = 32768,
                VT_ILLEGAL = 65535,
                VT_ILLEGALMASKED = 4095,
                VT_TYPEMASK = 4095,
        }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public sealed class EXCEPINFO {

        [MarshalAs(UnmanagedType.U2)]
        public   short wCode;
        [MarshalAs(UnmanagedType.U2)]
        public   short wReserved;
        [MarshalAs(UnmanagedType.BStr)]
        public   string bstrSource;
        [MarshalAs(UnmanagedType.BStr)]
        public   string bstrDescription;
        [MarshalAs(UnmanagedType.BStr)]
        public   string bstrHelpFile;
        [MarshalAs(UnmanagedType.U4)]
        public   int dwHelpContext;
        
        public   int dwReserved;
        
        public   int dwFillIn;
        
        public   int scode;
    }
    public delegate void TimerProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class WNDCLASS_D {
        public int      style;
        public WndProc  lpfnWndProc;
        public int      cbClsExtra = 0;
        public int      cbWndExtra = 0;
        public IntPtr   hInstance = NullIntPtr;
        public IntPtr   hIcon = NullIntPtr;
        public IntPtr   hCursor = NullIntPtr;
        public IntPtr   hbrBackground = NullIntPtr;
        public string   lpszMenuName = null;
        public string   lpszClassName = null;
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class MSOCM {
        // MSO Component registration flags
        public const int msocrfNeedIdleTime         = 1;
        public const int msocrfNeedPeriodicIdleTime = 2;
        public const int msocrfPreTranslateKeys     = 4;
        public const int msocrfPreTranslateAll      = 8;
        public const int msocrfNeedSpecActiveNotifs = 16;
        public const int msocrfNeedAllActiveNotifs  = 32;
        public const int msocrfExclusiveBorderSpace = 64;
        public const int msocrfExclusiveActivation = 128;
        public const int msocrfNeedAllMacEvents = 256;
        public const int msocrfMaster           = 512;

        // MSO Component registration advise flags (see msocstate enumeration)
        public const int msocadvfModal              = 1;
        public const int msocadvfRedrawOff          = 2;
        public const int msocadvfWarningsOff        = 4;
        public const int msocadvfRecording          = 8;

        // MSO Component Host flags
        public const int msochostfExclusiveBorderSpace = 1;

        // MSO idle flags, passed to IMsoComponent::FDoIdle and 
        // IMsoStdComponentMgr::FDoIdle.
        public const int msoidlefPeriodic    = 1;
        public const int msoidlefNonPeriodic = 2;
        public const int msoidlefPriority    = 4;
        public const int msoidlefAll         = -1;

        // MSO Reasons for pushing a message loop, passed to 
        // IMsoComponentManager::FPushMessageLoop and 
        // IMsoComponentHost::FPushMessageLoop.  The host should remain in message
        // loop until IMsoComponent::FContinueMessageLoop 
        // (or IMsoStdComponentMgr::FContinueMessageLoop) returns FALSE.
        public const int msoloopMain      = -1; // Note this is not an official MSO loop -- it just must be distinct.
        public const int msoloopFocusWait = 1;
        public const int msoloopDoEvents  = 2;
        public const int msoloopDebug     = 3;
        public const int msoloopModalForm = 4;
        public const int msoloopModalAlert = 5;


        /* msocstate values: state IDs passed to 
            IMsoComponent::OnEnterState, 
            IMsoComponentManager::OnComponentEnterState/FOnComponentExitState/FInState,
            IMsoComponentHost::OnComponentEnterState,
            IMsoStdComponentMgr::OnHostEnterState/FOnHostExitState/FInState.
            When the host or a component is notified through one of these methods that 
            another entity (component or host) is entering or exiting a state 
            identified by one of these state IDs, the host/component should take
            appropriate action:
                msocstateModal (modal state):
                    If app is entering modal state, host/component should disable
                    its toplevel windows, and reenable them when app exits this
                    state.  Also, when this state is entered or exited, host/component
                    should notify approprate inplace objects via 
                    IOleInPlaceActiveObject::EnableModeless.
                msocstateRedrawOff (redrawOff state):
                    If app is entering redrawOff state, host/component should disable
                    repainting of its windows, and reenable repainting when app exits
                    this state.
                msocstateWarningsOff (warningsOff state):
                    If app is entering warningsOff state, host/component should disable
                    the presentation of any user warnings, and reenable this when
                    app exits this state.
                msocstateRecording (Recording state):
                    Used to notify host/component when Recording is turned on or off. */
        public const int msocstateModal       = 1;
        public const int msocstateRedrawOff   = 2;
        public const int msocstateWarningsOff = 3;
        public const int msocstateRecording   = 4;


        /*             ** Comments on State Contexts **
        IMsoComponentManager::FCreateSubComponentManager allows one to create a 
        hierarchical tree of component managers.  This tree is used to maintain 
        multiple contexts with regard to msocstateXXX states.  These contexts are 
        referred to as 'state contexts'.
        Each component manager in the tree defines a state context.  The
        components registered with a particular component manager or any of its
        descendents live within that component manager's state context.  Calls
        to IMsoComponentManager::OnComponentEnterState/FOnComponentExitState
        can be used to  affect all components, only components within the component
        manager's state context, or only those components that are outside of the
        component manager's state context.  IMsoComponentManager::FInState is used
        to query the state of the component manager's state context at its root.
    
        msoccontext values: context indicators passed to 
        IMsoComponentManager::OnComponentEnterState/FOnComponentExitState.
        These values indicate the state context that is to be affected by the
        state change. 
        In IMsoComponentManager::OnComponentEnterState/FOnComponentExitState,
        the comp mgr informs only those components/host that are within the
        specified state context. */
        public const int msoccontextAll    = 0;
        public const int msoccontextMine   = 1;
        public const int msoccontextOthers = 2; 

        /*     ** WM_MOUSEACTIVATE Note (for top level compoenents and host) **
        If the active (or tracking) comp's reg info indicates that it
        wants mouse messages, then no MA_xxxANDEAT value should be returned 
        from WM_MOUSEACTIVATE, so that the active (or tracking) comp will be able
        to process the resulting mouse message.  If one does not want to examine
        the reg info, no MA_xxxANDEAT value should be returned from 
        WM_MOUSEACTIVATE if any comp is active (or tracking).
        One can query the reg info of the active (or tracking) component at any
        time via IMsoComponentManager::FGetActiveComponent. */

        /* msogac values: values passed to 
        IMsoComponentManager::FGetActiveComponent. */
        public const int msogacActive    = 0;
        public const int msogacTracking   = 1;
        public const int msogacTrackingOrActive = 2; 

        /* msocWindow values: values passed to IMsoComponent::HwndGetWindow. */
        public const int msocWindowFrameToplevel = 0;
        public const int msocWindowFrameOwner = 1;
        public const int msocWindowComponent = 2;
        public const int msocWindowDlgOwner = 3;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class TOOLINFO_T
    {
        public int      cbSize = 44;    // ndirect.DllLib.sizeOf( this )
        public int      uFlags;
        public IntPtr   hwnd;
        public int      uId;
        public RECT     rect;
        public IntPtr   hinst;
        public string   lpszText;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public sealed class tagDVTARGETDEVICE {

        [MarshalAs(UnmanagedType.U4)]
        public   int tdSize;
        [MarshalAs(UnmanagedType.U2)]
        public   short tdDriverNameOffset;
        [MarshalAs(UnmanagedType.U2)]
        public   short tdDeviceNameOffset;
        [MarshalAs(UnmanagedType.U2)]
        public   short tdPortNameOffset;
        [MarshalAs(UnmanagedType.U2)]
        public   short tdExtDevmodeOffset;

    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class TV_ITEM {
        public int      mask;
        public IntPtr   hItem;
        public int      state;
        public int      stateMask;
        public IntPtr /* LPTSTR */ pszText;
        public int      cchTextMax;
        public int      iImage;
        public int      iSelectedImage;
        public int      cChildren;
        public IntPtr   lParam;
    }

    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class TV_INSERTSTRUCT {
        public IntPtr   hParent;
        public IntPtr   hInsertAfter;
        public int      item_mask;
        public int      item_hItem;
        public int      item_state;
        public int      item_stateMask;
        public IntPtr /* LPTSTR */ item_pszText;
        public int      item_cchTextMax;
        public int      item_iImage;
        public int      item_iSelectedImage;
        public int      item_cChildren;
        public IntPtr   item_lParam;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMTREEVIEW
    {
        public NMHDR    nmhdr;
        public int      action;
        public TV_ITEM  itemOld;
        public TV_ITEM  itemNew;
        public POINT    ptDrag;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMTVDISPINFO
    {
        public NMHDR    hdr;
        public TV_ITEM  item;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public sealed class POINTL {

        
        public   int x;
        
        public   int y;

    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public struct HIGHCONTRAST {
            public int cbSize;
            public int dwFlags;
            public string lpszDefaultScheme;
    }


    [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public struct HIGHCONTRAST_I {
            public int cbSize;
            public int dwFlags;
            public IntPtr lpszDefaultScheme;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class TCITEM_T
    {
        public int      mask;
        public int      dwState;
        public int      dwStateMask;
        public string   pszText;
        public int      cchTextMax;
        public int      iImage;
        public IntPtr   lParam;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public sealed class STATDATA {

        [MarshalAs(UnmanagedType.U4)]
        public   int advf;
        [MarshalAs(UnmanagedType.U4)]
        public   int dwConnection;

    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
    public sealed class tagDISPPARAMS
    {
      public IntPtr rgvarg;
            
            /*[MarshalAs(UnmanagedType.ByValArray, SizeConst=1)/*leftover(offset=4, rgdispidNamedArgs)]*/
      
      public IntPtr rgdispidNamedArgs;

      [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=8, cArgs)*/]
      public int cArgs;

      [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=12, cNamedArgs)*/]
      public int cNamedArgs;

    }
    public enum  tagINVOKEKIND {
        INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8,
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class tagEXCEPINFO {
            [MarshalAs(UnmanagedType.U2)]
            public short wCode;
            [MarshalAs(UnmanagedType.U2)]
            public short wReserved;
            [MarshalAs(UnmanagedType.BStr)]
            public string bstrSource;
            [MarshalAs(UnmanagedType.BStr)]
            public string bstrDescription;
            [MarshalAs(UnmanagedType.BStr)]
            public string bstrHelpFile;
            [MarshalAs(UnmanagedType.U4)]
            public int dwHelpContext;
            
            public IntPtr pvReserved;
            
            public IntPtr pfnDeferredFillIn;
            [MarshalAs(UnmanagedType.U4)]
            public int scode;
    }
    public enum  tagDESCKIND {

        DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = 1,
        DESCKIND_VARDESC = 2,
        DESCKIND_TYPECOMP = 3,
        DESCKIND_IMPLICITAPPOBJ = 4,
        DESCKIND_MAX = 5,
    }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public sealed class tagFUNCDESC {

            
            public   int memid;
            [MarshalAs(UnmanagedType.U2)]
            public   short lprgscode;

            // cpb, SBurke, COM+ bug (number): this is marked as NATIVE_TYPE_PTR,
            // but the EE doesn't look for that, tries to handle it as
            // a ELEMENT_TYPE_VALUECLASS and fails because it
            // isn't a NATIVE_TYPE_NESTEDSTRUCT
            /*[MarshalAs(UnmanagedType.PTR)]*/
            
            public    /*NativeMethods.tagELEMDESC*/ IntPtr lprgelemdescParam;

            // cpb, SBurke, the EE chokes on Enums in structs
            
            public    /*NativeMethods.tagFUNCKIND*/ int funckind;
            
            public    /*NativeMethods.tagINVOKEKIND*/ int invkind;
            
            public    /*NativeMethods.tagCALLCONV*/ int callconv;
            [MarshalAs(UnmanagedType.I2)]
            public   short cParams;
            [MarshalAs(UnmanagedType.I2)]
            public   short cParamsOpt;
            [MarshalAs(UnmanagedType.I2)]
            public   short oVft;
            [MarshalAs(UnmanagedType.I2)]
            public   short cScodes;
            public   NativeMethods.value_tagELEMDESC elemdescFunc;
            [MarshalAs(UnmanagedType.U2)]
            public   short wFuncFlags;
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public sealed class tagVARDESC {

            
            public   int memid;
                    /* SBurke, see tagTYPEATTR
            [MarshalAs(UnmanagedType.LPWStr)]
                    public   string lpstrSchema;*/

            
                    public   IntPtr lpstrSchema;
                    public   IntPtr unionMember;
                    public   NativeMethods.value_tagELEMDESC elemdescVar;
                    [MarshalAs(UnmanagedType.U2)]
                    public   short wVarFlags;

            // cbp, sburke, the EE chokes on enums in structs.
                    public    /*NativeMethods.tagVARKIND*/ int varkind;
            }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public struct  value_tagELEMDESC {
        public    NativeMethods.tagTYPEDESC tdesc;
        public    NativeMethods.tagPARAMDESC paramdesc;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public struct WINDOWPOS {
            public IntPtr hwnd;
            public IntPtr hwndInsertAfter;
            public int x;
            public int y;
            public int cx;
            public int cy;
            public int flags;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class DRAWITEMSTRUCT {
            public int CtlType;
            public int CtlID;
            public int itemID;
            public int itemAction;
            public int itemState;
            public IntPtr hwndItem;
            public IntPtr hDC;
            public RECT   rcItem;
            public IntPtr itemData;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class MEASUREITEMSTRUCT {
            public int CtlType;
            public int CtlID;
            public int itemID;
            public int itemWidth;
            public int itemHeight;
            public IntPtr itemData;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class HELPINFO {
            public int      cbSize = 28; //ndirect.DllLib.sizeOf(this);
            public int      iContextType;
            public int      iCtrlId;
            public IntPtr   hItemHandle;
            public int      dwContextId;
            public POINT    MousePos;
    }
    [
        System.Runtime.InteropServices.ComVisible(false), 
        System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode)
    ]
    public class Lang {

        /*
        *  Character Type Flags.
        */
        public const int CT_CTYPE1            = 0x00000001;     /* ctype 1 information */
        public const int CT_CTYPE2            = 0x00000002;     /* ctype 2 information */
        public const int CT_CTYPE3            = 0x00000004;     /* ctype 3 information */

        /*
        *  CType 1 Flag Bits.
        */
        public const int C1_UPPER             = 0x0001;         /* upper case */
        public const int C1_LOWER             = 0x0002;         /* lower case */
        public const int C1_DIGIT             = 0x0004;         /* decimal digits */
        public const int C1_SPACE             = 0x0008;         /* spacing characters */
        public const int C1_PUNCT             = 0x0010;         /* punctuation characters */
        public const int C1_CNTRL             = 0x0020;         /* control characters */
        public const int C1_BLANK             = 0x0040;         /* blank characters */
        public const int C1_XDIGIT            = 0x0080;         /* other digits */
        public const int C1_ALPHA             = 0x0100;         /* any letter */

        /*
        *  CType 2 Flag Bits.
        */
        public const int C2_LEFTTORIGHT       = 0x1;            /* left to right */
        public const int C2_RIGHTTOLEFT       = 0x2;            /* right to left */

        public const int C2_EUROPENUMBER      = 0x3;            /* European number, digit */
        public const int C2_EUROPESEPARATOR   = 0x4;            /* European numeric separator */
        public const int C2_EUROPETERMINATOR  = 0x5;            /* European numeric terminator */
        public const int C2_ARABICNUMBER      = 0x6;            /* Arabic number */
        public const int C2_COMMONSEPARATOR   = 0x7;            /* common numeric separator */

        public const int C2_BLOCKSEPARATOR    = 0x8;            /* block separator */
        public const int C2_SEGMENTSEPARATOR  = 0x9;            /* segment separator */
        public const int C2_WHITESPACE        = 0xA;            /* white space */
        public const int C2_OTHERNEUTRAL      = 0xB;            /* other neutrals */

        public const int C2_NOTAPPLICABLE     = 0x0;            /* no implicit directionality */

        /*
        *  CType 3 Flag Bits.
        */
        public const int C3_NONSPACING        = 0x0001;         /* nonspacing character */
        public const int C3_DIACRITIC         = 0x0002;         /* diacritic mark */
        public const int C3_VOWELMARK         = 0x0004;         /* vowel mark */
        public const int C3_SYMBOL            = 0x0008;         /* symbols */

        public const int C3_KATAKANA          = 0x0010;
        public const int C3_HIRAGANA          = 0x0020;
        public const int C3_HALFWIDTH         = 0x0040;
        public const int C3_FULLWIDTH         = 0x0080;
        public const int C3_IDEOGRAPH         = 0x0100;
        public const int C3_KASHIDA           = 0x0200;
        public const int C3_ALPHA             = 0x8000;

        public const int C3_NOTAPPLICABLE     = 0x0;            /* ctype 3 is not applicable */


        /*
        *  String Flags.
        */
        public const int NORM_IGNORECASE         = 0x00000001;  /* ignore case */
        public const int NORM_IGNORENONSPACE     = 0x00000002;  /* ignore nonspacing chars */
        public const int NORM_IGNORESYMBOLS      = 0x00000004;  /* ignore symbols */

        public const int NORM_IGNOREWIDTH        = 0x00010000;  /* ignore width */
        public const int NORM_IGNOREKANATYPE     = 0x00020000;  /* ignore kanatype */

        public const int NORM_IGNOREKASHIDA      = 0x00040000;  /* ignore Arabic kashida chars */


        /*
        *  Locale Dependent Mapping Flags.
        */
        public const int LCMAP_LOWERCASE      = 0x00000100; /* lower case letters */
        public const int LCMAP_UPPERCASE      = 0x00000200; /* upper case letters */
        public const int LCMAP_SORTKEY        = 0x00000400; /* WC sort key (normalize) */

        public const int LCMAP_HALFWIDTH      = 0x00000800;  /* narrow pitch case letters */
        public const int LCMAP_FULLWIDTH      = 0x00001000; /* wide picth case letters */
        public const int LCMAP_HIRAGANA       = 0x00002000;  /* map katakana to hiragana */
        public const int LCMAP_KATAKANA       = 0x00004000;  /* map hiragana to katakana */


        /*
        *  Language IDs.
        *
        *  The following two combinations of primary language ID and
        *  sublanguage ID have special semantics:
        *
        *    Primary Language ID   Sublanguage ID      Result
        *    -------------------   ---------------     ------------------------
        *    LANG_NEUTRAL          SUBLANG_NEUTRAL     Language neutral
        *    LANG_NEUTRAL          SUBLANG_DEFAULT     Process default language
        *    LANG_NEUTRAL          SUBLANG_SYS_DEFAULT System default language  
        */

        /*
        *  Primary language IDs.
        */
        public const int LANG_NEUTRAL                     = 0x00;

        public const int LANG_ALBANIAN                    = 0x1c;
        public const int LANG_ARABIC                      = 0x01;
        public const int LANG_BAHASA                      = 0x21;
        public const int LANG_BULGARIAN                   = 0x02;
        public const int LANG_CATALAN                     = 0x03;
        public const int LANG_CHINESE                     = 0x04;
        public const int LANG_CZECH                       = 0x05;
        public const int LANG_DANISH                      = 0x06;
        public const int LANG_DUTCH                       = 0x13;
        public const int LANG_ENGLISH                     = 0x09;
        public const int LANG_FINNISH                     = 0x0b;
        public const int LANG_FRENCH                      = 0x0c;
        public const int LANG_GERMAN                      = 0x07;
        public const int LANG_GREEK                       = 0x08;
        public const int LANG_HEBREW                      = 0x0d;
        public const int LANG_HUNGARIAN                   = 0x0e;
        public const int LANG_ICELANDIC                   = 0x0f;
        public const int LANG_ITALIAN                     = 0x10;
        public const int LANG_JAPANESE                    = 0x11;
        public const int LANG_KOREAN                      = 0x12;
        public const int LANG_NORWEGIAN                   = 0x14;
        public const int LANG_POLISH                      = 0x15;
        public const int LANG_PORTUGUESE                  = 0x16;
        public const int LANG_RHAETO_ROMAN                = 0x17;
        public const int LANG_ROMANIAN                    = 0x18;
        public const int LANG_RUSSIAN                     = 0x19;
        public const int LANG_SERBO_CROATIAN              = 0x1a;
        public const int LANG_SLOVAK                      = 0x1b;
        public const int LANG_SPANISH                     = 0x0a;
        public const int LANG_SWEDISH                     = 0x1d;
        public const int LANG_THAI                        = 0x1e;
        public const int LANG_TURKISH                     = 0x1f;
        public const int LANG_URDU                        = 0x20;

        /*
        *  Sublanguage IDs.
        *
        *  The name immediately following SUBLANG_ dictates which primary
        *  language ID that sublanguage ID can be combined with to form a
        *  valid language ID.
        */
        public const int SUBLANG_NEUTRAL                  = 0x00;    /* language neutral */
        public const int SUBLANG_DEFAULT                  = 0x01;    /* user default */
        public const int SUBLANG_SYS_DEFAULT              = 0x02;    /* system default */

        public const int SUBLANG_CHINESE_SIMPLIFIED       = 0x02;    /* Chinese (Simplified) */
        public const int SUBLANG_CHINESE_TRADITIONAL      = 0x01; /* Chinese (Traditional) */
        public const int SUBLANG_DUTCH                    = 0x01;    /* Dutch */
        public const int SUBLANG_DUTCH_BELGIAN            = 0x02;    /* Dutch (Belgian) */
        public const int SUBLANG_ENGLISH_US               = 0x01;    /* English (USA) */
        public const int SUBLANG_ENGLISH_UK               = 0x02;    /* English (UK) */
        public const int SUBLANG_ENGLISH_AUS              = 0x03;    /* English (Australian) */
        public const int SUBLANG_ENGLISH_CAN              = 0x04;    /* English (Canadian) */
        public const int SUBLANG_ENGLISH_NZ               = 0x05;    /* English (New Zealand) */
        public const int SUBLANG_ENGLISH_EIRE             = 0x06;    /* English (Irish) */
        public const int SUBLANG_FRENCH                   = 0x01;    /* French */
        public const int SUBLANG_FRENCH_BELGIAN           = 0x02;    /* French (Belgian) */
        public const int SUBLANG_FRENCH_CANADIAN          = 0x03;    /* French (Canadian) */
        public const int SUBLANG_FRENCH_SWISS             = 0x04;    /* French (Swiss) */
        public const int SUBLANG_GERMAN                   = 0x01;    /* German */
        public const int SUBLANG_GERMAN_SWISS             = 0x02;    /* German (Swiss) */
        public const int SUBLANG_GERMAN_AUSTRIAN          = 0x03;    /* German (Austrian) */
        public const int SUBLANG_ITALIAN                  = 0x01;    /* Italian */
        public const int SUBLANG_ITALIAN_SWISS            = 0x02;    /* Italian (Swiss) */
        public const int SUBLANG_NORWEGIAN_BOKMAL         = 0x01;    /* Norwegian (Bokmal) */
        public const int SUBLANG_NORWEGIAN_NYNORSK        = 0x02;    /* Norwegian (Nynorsk) */
        public const int SUBLANG_PORTUGUESE               = 0x02;    /* Portuguese */
        public const int SUBLANG_PORTUGUESE_BRAZILIAN     = 0x01;    /* Portuguese (Brazilian) */
        public const int SUBLANG_SERBO_CROATIAN_CYRILLIC  = 0x02;    /* Serbo-Croatian (Cyrillic) */
        public const int SUBLANG_SERBO_CROATIAN_LATIN     = 0x01;    /* Croato-Serbian (Latin) */
        public const int SUBLANG_SPANISH                  = 0x01;    /* Spanish */
        public const int SUBLANG_SPANISH_MEXICAN          = 0x02;    /* Spanish (Mexican) */
        public const int SUBLANG_SPANISH_MODERN           = 0x03;    /* Spanish (Modern) */


        /*
        *  Country Codes.
        */
        public const int CTRY_DEFAULT                     = 0;

        public const int CTRY_AUSTRALIA                   = 61;      /* Australia */
        public const int CTRY_AUSTRIA                     = 43;      /* Austria */
        public const int CTRY_BELGIUM                     = 32;      /* Belgium */
        public const int CTRY_BRAZIL                      = 55;      /* Brazil */
        public const int CTRY_CANADA                      = 2;       /* Canada */
        public const int CTRY_DENMARK                     = 45;      /* Denmark */
        public const int CTRY_FINLAND                     = 358;     /* Finland */
        public const int CTRY_FRANCE                      = 33;      /* France */
        public const int CTRY_GERMANY                     = 49;      /* Germany */
        public const int CTRY_ICELAND                     = 354;     /* Iceland */
        public const int CTRY_IRELAND                     = 353;     /* Ireland */
        public const int CTRY_ITALY                       = 39;      /* Italy */
        public const int CTRY_JAPAN                       = 81;      /* Japan */
        public const int CTRY_MEXICO                      = 52;      /* Mexico */
        public const int CTRY_NETHERLANDS                 = 31;      /* Netherlands */
        public const int CTRY_NEW_ZEALAND                 = 64;      /* New Zealand */
        public const int CTRY_NORWAY                      = 47;      /* Norway */
        public const int CTRY_PORTUGAL                    = 351;     /* Portugal */
        public const int CTRY_PRCHINA                     = 86;      /* PR China */
        public const int CTRY_SOUTH_KOREA                 = 82;      /* South Korea */
        public const int CTRY_SPAIN                       = 34;      /* Spain */
        public const int CTRY_SWEDEN                      = 46;      /* Sweden */
        public const int CTRY_SWITZERLAND                 = 41;      /* Switzerland */
        public const int CTRY_TAIWAN                      = 886;     /* Taiwan */
        public const int CTRY_UNITED_KINGDOM              = 44;      /* United Kingdom */
        public const int CTRY_UNITED_STATES               = 1;       /* United States */


        /*
         *  Locale Types.
         *
         *  These types are used for the GetLocaleInfoW NLS API routine.
         *
         *  LOCALE_NOUSEROVERRIDE is also used in GetTimeFormatW and GetDateFormatW.
         *
         *  LOCALE_USE_CP_ACP is used in many of the A (Ansi) apis that need to do
         *  string translation.
         */
        public const int LOCALE_NOUSEROVERRIDE       = unchecked((int)0x80000000);   /* do not use user overrides */
        public const int LOCALE_USE_CP_ACP           = 0x40000000;   /* use the system ACP */

        public const int LOCALE_ILANGUAGE            = 0x00000001;   /* language id */
        public const int LOCALE_SLANGUAGE            = 0x00000002;   /* localized name of language */
        public const int LOCALE_SENGLANGUAGE         = 0x00001001;   /* English name of language */
        public const int LOCALE_SABBREVLANGNAME      = 0x00000003;   /* abbreviated language name */
        public const int LOCALE_SNATIVELANGNAME      = 0x00000004;   /* native name of language */

        public const int LOCALE_ICOUNTRY             = 0x00000005;   /* country code */
        public const int LOCALE_SCOUNTRY             = 0x00000006;   /* localized name of country */
        public const int LOCALE_SENGCOUNTRY          = 0x00001002;   /* English name of country */
        public const int LOCALE_SABBREVCTRYNAME      = 0x00000007;   /* abbreviated country name */
        public const int LOCALE_SNATIVECTRYNAME      = 0x00000008;   /* native name of country */

        public const int LOCALE_IDEFAULTLANGUAGE     = 0x00000009;   /* default language id */
        public const int LOCALE_IDEFAULTCOUNTRY      = 0x0000000A;   /* default country code */
        public const int LOCALE_IDEFAULTCODEPAGE     = 0x0000000B;   /* default oem code page */
        public const int LOCALE_IDEFAULTANSICODEPAGE = 0x00001004;   /* default ansi code page */
        public const int LOCALE_IDEFAULTMACCODEPAGE  = 0x00001011;   /* default mac code page */

        public const int LOCALE_SLIST                = 0x0000000C;   /* list item separator */
        public const int LOCALE_IMEASURE             = 0x0000000D;   /* 0 = metric, 1 = US */

        public const int LOCALE_SDECIMAL             = 0x0000000E;   /* decimal separator */
        public const int LOCALE_STHOUSAND            = 0x0000000F;   /* thousand separator */
        public const int LOCALE_SGROUPING            = 0x00000010;   /* digit grouping */
        public const int LOCALE_IDIGITS              = 0x00000011;   /* number of fractional digits */
        public const int LOCALE_ILZERO               = 0x00000012;   /* leading zeros for decimal */
        public const int LOCALE_INEGNUMBER           = 0x00001010;   /* negative number mode */
        public const int LOCALE_SNATIVEDIGITS        = 0x00000013;   /* native ascii 0-9 */

        public const int LOCALE_SCURRENCY            = 0x00000014;   /* local monetary symbol */
        public const int LOCALE_SINTLSYMBOL          = 0x00000015;   /* intl monetary symbol */
        public const int LOCALE_SMONDECIMALSEP       = 0x00000016;   /* monetary decimal separator */
        public const int LOCALE_SMONTHOUSANDSEP      = 0x00000017;   /* monetary thousand separator */
        public const int LOCALE_SMONGROUPING         = 0x00000018;   /* monetary grouping */
        public const int LOCALE_ICURRDIGITS          = 0x00000019;   /* # local monetary digits */
        public const int LOCALE_IINTLCURRDIGITS      = 0x0000001A;   /* # intl monetary digits */
        public const int LOCALE_ICURRENCY            = 0x0000001B;   /* positive currency mode */
        public const int LOCALE_INEGCURR             = 0x0000001C;   /* negative currency mode */

        public const int LOCALE_SDATE                = 0x0000001D;   /* date separator */
        public const int LOCALE_STIME                = 0x0000001E;   /* time separator */
        public const int LOCALE_SSHORTDATE           = 0x0000001F;   /* short date format string */
        public const int LOCALE_SLONGDATE            = 0x00000020;   /* long date format string */
        public const int LOCALE_STIMEFORMAT          = 0x00001003;   /* time format string */
        public const int LOCALE_IDATE                = 0x00000021;   /* short date format ordering */
        public const int LOCALE_ILDATE               = 0x00000022;   /* long date format ordering */
        public const int LOCALE_ITIME                = 0x00000023;   /* time format specifier */
        public const int LOCALE_ITIMEMARKPOSN        = 0x00001005;   /* time marker position */
        public const int LOCALE_ICENTURY             = 0x00000024;   /* century format specifier (short date) */
        public const int LOCALE_ITLZERO              = 0x00000025;   /* leading zeros in time field */
        public const int LOCALE_IDAYLZERO            = 0x00000026;   /* leading zeros in day field (short date) */
        public const int LOCALE_IMONLZERO            = 0x00000027;   /* leading zeros in month field (short date) */
        public const int LOCALE_S1159                = 0x00000028;   /* AM designator */
        public const int LOCALE_S2359                = 0x00000029;   /* PM designator */

        public const int LOCALE_ICALENDARTYPE        = 0x00001009;   /* type of calendar specifier */
        public const int LOCALE_IOPTIONALCALENDAR    = 0x0000100B;   /* additional calendar types specifier */
        public const int LOCALE_IFIRSTDAYOFWEEK      = 0x0000100C;   /* first day of week specifier */
        public const int LOCALE_IFIRSTWEEKOFYEAR     = 0x0000100D;   /* first week of year specifier */

        public const int LOCALE_SDAYNAME1            = 0x0000002A;   /* long name for Monday */
        public const int LOCALE_SDAYNAME2            = 0x0000002B;   /* long name for Tuesday */
        public const int LOCALE_SDAYNAME3            = 0x0000002C;   /* long name for Wednesday */
        public const int LOCALE_SDAYNAME4            = 0x0000002D;   /* long name for Thursday */
        public const int LOCALE_SDAYNAME5            = 0x0000002E;   /* long name for Friday */
        public const int LOCALE_SDAYNAME6            = 0x0000002F;   /* long name for Saturday */
        public const int LOCALE_SDAYNAME7            = 0x00000030;   /* long name for Sunday */
        public const int LOCALE_SABBREVDAYNAME1      = 0x00000031;   /* abbreviated name for Monday */
        public const int LOCALE_SABBREVDAYNAME2      = 0x00000032;   /* abbreviated name for Tuesday */
        public const int LOCALE_SABBREVDAYNAME3      = 0x00000033;   /* abbreviated name for Wednesday */
        public const int LOCALE_SABBREVDAYNAME4      = 0x00000034;   /* abbreviated name for Thursday */
        public const int LOCALE_SABBREVDAYNAME5      = 0x00000035;   /* abbreviated name for Friday */
        public const int LOCALE_SABBREVDAYNAME6      = 0x00000036;   /* abbreviated name for Saturday */
        public const int LOCALE_SABBREVDAYNAME7      = 0x00000037;   /* abbreviated name for Sunday */
        public const int LOCALE_SMONTHNAME1          = 0x00000038;   /* long name for January */
        public const int LOCALE_SMONTHNAME2          = 0x00000039;   /* long name for February */
        public const int LOCALE_SMONTHNAME3          = 0x0000003A;   /* long name for March */
        public const int LOCALE_SMONTHNAME4          = 0x0000003B;   /* long name for April */
        public const int LOCALE_SMONTHNAME5          = 0x0000003C;   /* long name for May */
        public const int LOCALE_SMONTHNAME6          = 0x0000003D;   /* long name for June */
        public const int LOCALE_SMONTHNAME7          = 0x0000003E;   /* long name for July */
        public const int LOCALE_SMONTHNAME8          = 0x0000003F;   /* long name for August */
        public const int LOCALE_SMONTHNAME9          = 0x00000040;   /* long name for September */
        public const int LOCALE_SMONTHNAME10         = 0x00000041;   /* long name for October */
        public const int LOCALE_SMONTHNAME11         = 0x00000042;   /* long name for November */
        public const int LOCALE_SMONTHNAME12         = 0x00000043;   /* long name for December */
        public const int LOCALE_SMONTHNAME13         = 0x0000100E;   /* long name for 13th month (if exists) */
        public const int LOCALE_SABBREVMONTHNAME1    = 0x00000044;   /* abbreviated name for January */
        public const int LOCALE_SABBREVMONTHNAME2    = 0x00000045;   /* abbreviated name for February */
        public const int LOCALE_SABBREVMONTHNAME3    = 0x00000046;   /* abbreviated name for March */
        public const int LOCALE_SABBREVMONTHNAME4    = 0x00000047;   /* abbreviated name for April */
        public const int LOCALE_SABBREVMONTHNAME5    = 0x00000048;   /* abbreviated name for May */
        public const int LOCALE_SABBREVMONTHNAME6    = 0x00000049;   /* abbreviated name for June */
        public const int LOCALE_SABBREVMONTHNAME7    = 0x0000004A;   /* abbreviated name for July */
        public const int LOCALE_SABBREVMONTHNAME8    = 0x0000004B;   /* abbreviated name for August */
        public const int LOCALE_SABBREVMONTHNAME9    = 0x0000004C;   /* abbreviated name for September */
        public const int LOCALE_SABBREVMONTHNAME10   = 0x0000004D;   /* abbreviated name for October */
        public const int LOCALE_SABBREVMONTHNAME11   = 0x0000004E;   /* abbreviated name for November */
        public const int LOCALE_SABBREVMONTHNAME12   = 0x0000004F;   /* abbreviated name for December */
        public const int LOCALE_SABBREVMONTHNAME13   = 0x0000100F;   /* abbreviated name for 13th month (if exists) */

        public const int LOCALE_SPOSITIVESIGN        = 0x00000050;   /* positive sign */
        public const int LOCALE_SNEGATIVESIGN        = 0x00000051;   /* negative sign */
        public const int LOCALE_IPOSSIGNPOSN         = 0x00000052;   /* positive sign position */
        public const int LOCALE_INEGSIGNPOSN         = 0x00000053;   /* negative sign position */
        public const int LOCALE_IPOSSYMPRECEDES      = 0x00000054;   /* mon sym precedes pos amt */
        public const int LOCALE_IPOSSEPBYSPACE       = 0x00000055;   /* mon sym sep by space from pos amt */
        public const int LOCALE_INEGSYMPRECEDES      = 0x00000056;   /* mon sym precedes neg amt */
        public const int LOCALE_INEGSEPBYSPACE       = 0x00000057;   /* mon sym sep by space from neg amt */

        public const int LOCALE_FONTSIGNATURE        = 0x00000058;   /* font signature */
        public const int LOCALE_SISO639LANGNAME      = 0x00000059;   /* ISO abbreviated language name */
        public const int LOCALE_SISO3166CTRYNAME     = 0x0000005A;   /* ISO abbreviated country name */

        // NT5 Locale Info
        //
        public const int LOCALE_IDEFAULTEBCDICCODEPAGE = 0x00001012;   // default ebcdic code page
        public const int LOCALE_IPAPERSIZE             = 0x0000100A;   // 0 = letter, 1 = a4, 2 = legal, 3 = a3
        public const int LOCALE_SENGCURRNAME           = 0x00001007;   // english name of currency
        public const int LOCALE_SNATIVECURRNAME        = 0x00001008;   // native name of currency
        public const int LOCALE_SYEARMONTH             = 0x00001006;   // year month format string
        public const int LOCALE_SSORTNAME              = 0x00001013;   // sort name
        public const int LOCALE_IDIGITSUBSTITUTION     = 0x00001014;   // 0 = none, 1 = context, 2 = native digit

        /*
         *  Time Flags for GetTimeFormatW.
         */
        public const int TIME_NOMINUTESORSECONDS    = 0x00000001;  /* do not use minutes or seconds */
        public const int TIME_NOSECONDS             = 0x00000002;  /* do not use seconds */
        public const int TIME_NOTIMEMARKER          = 0x00000004;  /* do not use time marker */
        public const int TIME_FORCE24HOURFORMAT     = 0x00000008;  /* always use 24 hour format */


        /*
         *  Date Flags for GetDateFormatW.
         */
        public const int DATE_SHORTDATE             = 0x00000001;  /* use short date picture */
        public const int DATE_LONGDATE              = 0x00000002;  /* use long date picture */
        public const int DATE_USE_ALT_CALENDAR      = 0x00000004;  /* use alternate calendar (if any) */


        /*
         *  Calendar Types.
         *
         *  These types are used for the GetALTCalendarInfoW NLS API routine.
         */
        public const int CAL_ICALINTVALUE           = 0x00000001;   /* calendar type */
        public const int CAL_SCALNAME               = 0x00000002;   /* native name of calendar */
        public const int CAL_IYEAROFFSETRANGE       = 0x00000003;   /* starting years of eras */
        public const int CAL_SERASTRING             = 0x00000004;   /* era name for IYearOffsetRanges */
        public const int CAL_SSHORTDATE             = 0x00000005;   /* short date format string */
        public const int CAL_SLONGDATE              = 0x00000006;   /* long date format string */
        public const int CAL_SDAYNAME1              = 0x00000007;   /* native name for Monday */
        public const int CAL_SDAYNAME2              = 0x00000008;   /* native name for Tuesday */
        public const int CAL_SDAYNAME3              = 0x00000009;   /* native name for Wednesday */
        public const int CAL_SDAYNAME4              = 0x0000000a;   /* native name for Thursday */
        public const int CAL_SDAYNAME5              = 0x0000000b;   /* native name for Friday */
        public const int CAL_SDAYNAME6              = 0x0000000c;   /* native name for Saturday */
        public const int CAL_SDAYNAME7              = 0x0000000d;   /* native name for Sunday */
        public const int CAL_SABBREVDAYNAME1        = 0x0000000e;   /* abbreviated name for Monday */
        public const int CAL_SABBREVDAYNAME2        = 0x0000000f;   /* abbreviated name for Tuesday */
        public const int CAL_SABBREVDAYNAME3        = 0x00000010;   /* abbreviated name for Wednesday */
        public const int CAL_SABBREVDAYNAME4        = 0x00000011;   /* abbreviated name for Thursday */
        public const int CAL_SABBREVDAYNAME5        = 0x00000012;   /* abbreviated name for Friday */
        public const int CAL_SABBREVDAYNAME6        = 0x00000013;   /* abbreviated name for Saturday */
        public const int CAL_SABBREVDAYNAME7        = 0x00000014;   /* abbreviated name for Sunday */
        public const int CAL_SMONTHNAME1            = 0x00000015;   /* native name for January */
        public const int CAL_SMONTHNAME2            = 0x00000016;   /* native name for February */
        public const int CAL_SMONTHNAME3            = 0x00000017;   /* native name for March */
        public const int CAL_SMONTHNAME4            = 0x00000018;   /* native name for April */
        public const int CAL_SMONTHNAME5            = 0x00000019;   /* native name for May */
        public const int CAL_SMONTHNAME6            = 0x0000001a;   /* native name for June */
        public const int CAL_SMONTHNAME7            = 0x0000001b;   /* native name for July */
        public const int CAL_SMONTHNAME8            = 0x0000001c;   /* native name for August */
        public const int CAL_SMONTHNAME9            = 0x0000001d;   /* native name for September */
        public const int CAL_SMONTHNAME10           = 0x0000001e;   /* native name for October */
        public const int CAL_SMONTHNAME11           = 0x0000001f;   /* native name for November */
        public const int CAL_SMONTHNAME12           = 0x00000020;   /* native name for December */
        public const int CAL_SMONTHNAME13           = 0x00000021;   /* native name for 13th month (if any) */
        public const int CAL_SABBREVMONTHNAME1      = 0x00000022;   /* abbreviated name for January */
        public const int CAL_SABBREVMONTHNAME2      = 0x00000023;   /* abbreviated name for February */
        public const int CAL_SABBREVMONTHNAME3      = 0x00000024;   /* abbreviated name for March */
        public const int CAL_SABBREVMONTHNAME4      = 0x00000025;   /* abbreviated name for April */
        public const int CAL_SABBREVMONTHNAME5      = 0x00000026;   /* abbreviated name for May */
        public const int CAL_SABBREVMONTHNAME6      = 0x00000027;   /* abbreviated name for June */
        public const int CAL_SABBREVMONTHNAME7      = 0x00000028;   /* abbreviated name for July */
        public const int CAL_SABBREVMONTHNAME8      = 0x00000029;   /* abbreviated name for August */
        public const int CAL_SABBREVMONTHNAME9      = 0x0000002a;   /* abbreviated name for September */
        public const int CAL_SABBREVMONTHNAME10     = 0x0000002b;   /* abbreviated name for October */
        public const int CAL_SABBREVMONTHNAME11     = 0x0000002c;   /* abbreviated name for November */
        public const int CAL_SABBREVMONTHNAME12     = 0x0000002d;   /* abbreviated name for December */
        public const int CAL_SABBREVMONTHNAME13     = 0x0000002e;   /* abbreviated name for 13th month (if any) */


        /*
         *  Calendar Enumeration Value.
         */
        public const int ENUM_ALL_CALENDARS         = unchecked((int)0xffffffff);   /* enumerate all calendars */


        /*
         *  Calendar ID Values.
         */
        public const int CAL_GREGORIAN        = 1;         /* Gregorian (localized) calendar */
        public const int CAL_GREGORIAN_US     = 2;         /* Gregorian (U.S.) calendar */
        public const int CAL_JAPAN            = 3;         /* Japanese Emperor Era calendar */
        public const int CAL_TAIWAN           = 4;
        public const int CAL_KOREA            = 5;         /* Korean Tangun Era calendar */
        public const int CAL_HIJRI            = 6;         /* Hijri (Arabic Lunar) calendar */
        public const int CAL_THAI             = 7;         /* Thai calendar */
        public const int CAL_HEBREW           = 8;         /* Hebrew calendar */

        /*
         * TranslateCharSetInfo flags
         */
        public const int TCI_SRCCHARSET  = 1;
        public const int TCI_SRCCODEPAGE = 2;
        public const int TCI_SRCFONTSIG  = 3;

        /***************************************************************************\
        * Typedefs
        *
        * Define all types for the NLS component here.
        \***************************************************************************/

        /*
        *  IDs.
        */
        //typedef unsigned long  LCID;                  /* locale ID */
        //typedef unsigned short LANGID;                /* language ID */
        //typedef unsigned long  LCTYPE;                /* locale type constant */

        /***************************************************************************\
        * Macros
        *
        * Define all macros for the NLS component here.
        \***************************************************************************/

        /*
        *  A language ID is a 16 bit value which is the combination of a
        *  primary language ID and a secondary language ID.  The bits are
        *  allocated as follows:
        *
        *       +-----------------------+-------------------------+
        *       |      Sublanguage ID   |   Primary Language ID   |
        *       +-----------------------+-------------------------+
        *        15                   10 9                       0   bit
        *
        *
        *  Language ID creation/extraction macros:
        *
        *    MAKELANGID    - construct language id from primary language id and
        *                    sublanguage id.
        *    PRIMARYLANGID - extract primary language id from a language id.
        *    SUBLANGID     - extract sublanguage id from a language id.
        */
        public static int MAKELANGID(int primary, int sub) {
            return ((((short)(sub)) << 10) | (short)(primary));
        }

        public static int PRIMARYLANGID(int lgid) {
            return ((short)(lgid) & 0x3ff);
        }

        public static int SUBLANGID(int lgid) {
            return ((short)(lgid) >> 10);
        }


    //
    //  A locale ID is a 32 bit value which is the combination of a
    //  language ID, a sort ID, and a reserved area.  The bits are
    //  allocated as follows:
    //
    //       +-------------+---------+-------------------------+
    //       |   Reserved  | Sort ID |      Language ID        |
    //       +-------------+---------+-------------------------+
    //        31         20 19     16 15                      0   bit
    //
    //
    //  Locale ID creation/extraction macros:
    //
    //    MAKELCID       - construct locale id from a language id and a sort id.
    //    LANGIDFROMLCID - extract language id from a locale id.
    //    SORTIDFROMLCID - extract sort id from a locale id.
    //

        public const int NLS_VALID_LOCALE_MASK  = 0x000fffff;
        public const int SORT_DEFAULT                     =0x0;     // sorting default

        public const int SORT_JAPANESE_XJIS               =0x0;     // Japanese XJIS order
        public const int SORT_JAPANESE_UNICODE            =0x1;     // Japanese Unicode order

        public const int SORT_CHINESE_BIG5                =0x0;     // Chinese BIG5 order
        public const int SORT_CHINESE_PRCP                =0x0;     // PRC Chinese Phonetic order
        public const int SORT_CHINESE_UNICODE             =0x1;     // Chinese Unicode order
        public const int SORT_CHINESE_PRC                 =0x2;     // PRC Chinese Stroke Count order

        public const int SORT_KOREAN_KSC                  =0x0;     // Korean KSC order
        public const int SORT_KOREAN_UNICODE              =0x1;     // Korean Unicode order

        public const int SORT_GERMAN_PHONE_BOOK           =0x1;     // German Phone Book order

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.Lang.MAKELCID"]/*' />
        /// <devdoc>
        ///     Creates an LCID from a LangId
        /// </devdoc>
        public static int MAKELCID(int lgid) {
            return MAKELCID(lgid, SORT_DEFAULT);
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.Lang.MAKELCID1"]/*' />
        /// <devdoc>
        ///     Creates an LCID from a LangId
        /// </devdoc>
        public static int MAKELCID(int lgid, int sort) {
            return ((0xFFFF & lgid) | (((0x000f) & sort) << 16));
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.Lang.LANGIDFROMLCID"]/*' />
        /// <devdoc>
        ///     Get the language id from a locale id.
        /// </devdoc>
        public static int LANGIDFROMLCID(int lcid) {
            return (0xffff & lcid);
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.Lang.SORTIDFROMLCID"]/*' />
        /// <devdoc>
        ///     Returns the sortid associated with the LCID
        /// </devdoc>
        public static int SORTIDFROMLCID(int lcid) {
            return ((NLS_VALID_LOCALE_MASK & lcid) >> 16);
        }


        /*
         *  Default System and User IDs for language and locale.
         */
        public static readonly int LANG_SYSTEM_DEFAULT =MAKELANGID(LANG_NEUTRAL, SUBLANG_SYS_DEFAULT);
        public static readonly int LANG_USER_DEFAULT   =MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT);

        public static readonly int LOCALE_SYSTEM_DEFAULT=  MAKELCID(LANG_SYSTEM_DEFAULT);
        public static readonly int LOCALE_USER_DEFAULT =    MAKELCID(LANG_USER_DEFAULT);


    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class ACCEL {
            public byte fVirt;
            public short key;
            public short cmd;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class MINMAXINFO {
            public POINT    ptReserved;
            public POINT    ptMaxSize;
            public POINT    ptMaxPosition;
            public POINT    ptMinTrackSize;
            public POINT    ptMaxTrackSize;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class CREATESTRUCT {
            public IntPtr lpCreateParams;
            public IntPtr hInstance;
            public IntPtr hMenu;
            public IntPtr hwndParent;
            public int cy;
            public int cx;
            public int y;
            public int x;
            public int style;
            public string lpszName;
            public string lpszClass;
            public int dwExStyle;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class LOCALESIGNATURE
    {
        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=4)]
        public int[] lsUsb;
        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2)]
        public int[] lsCsbDefault;
        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=2)]
        public int[] lsCsbSupported;
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class StreamConsts {
        public const   int LOCK_WRITE = 0x1;
        public const   int LOCK_EXCLUSIVE = 0x2;
        public const   int LOCK_ONLYONCE = 0x4;
        public const   int STATFLAG_DEFAULT = 0x0;
        public const   int STATFLAG_NONAME = 0x1;
        public const   int STATFLAG_NOOPEN = 0x2;
        public const   int STGC_DEFAULT = 0x0;
        public const   int STGC_OVERWRITE = 0x1;
        public const   int STGC_ONLYIFCURRENT = 0x2;
        public const   int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4;
        public const   int STREAM_SEEK_SET = 0x0;
        public const   int STREAM_SEEK_CUR = 0x1;
        public const   int STREAM_SEEK_END = 0x2;
    }
    [ComImport(), Guid("B196B28B-BAB4-101A-B69C-00AA00341D07"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface ISpecifyPropertyPages {

        
         void GetPages(
                [Out] 
                  NativeMethods.tagCAUUID pPages);

    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)/*leftover(noAutoOffset)*/]
    public sealed class tagCAUUID
    {
      [MarshalAs(System.Runtime.InteropServices.UnmanagedType.U4)/*leftover(offset=0, cElems)*/]
      public int cElems;

      public IntPtr pElems;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMTOOLBAR
    {
        public NMHDR    hdr;
        public int      iItem;
        public TBBUTTON tbButton;
        public int      cchText;
        public IntPtr   pszText;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1)]
    public class TBBUTTON {
        public int      iBitmap;
        public int      idCommand;
        public byte     fsState;
        public byte     fsStyle;
        public byte     bReserved0;
        public byte     bReserved1;
        public int      dwData;
        public int      iString;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class TOOLTIPTEXT
    {
      public NMHDR  hdr;
      public IntPtr lpszText;

      [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=80)]
      public string szText;

      public IntPtr hinst;
      public int    uFlags;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi)]
    public class TOOLTIPTEXTA
    {
      public NMHDR  hdr;
      public IntPtr lpszText;

      [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=80)]
      public string szText;

      public IntPtr hinst;
      public int    uFlags;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class TBBUTTONINFO
    {
        public int      cbSize = 32;    // ndirect.DllLib.sizeOf(this);
        public int      dwMask;
        public int      idCommand;
        public int      iImage;
        public byte     fsState;
        public byte     fsStyle;
        public short    cx;
        public IntPtr   lParam;
        public IntPtr   pszText;
        public int      cchTest;
    }
    
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class TV_HITTESTINFO {
        public int      pt_x;
        public int      pt_y;
        public int      flags;
        public IntPtr   hItem;
    }
    
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMTVCUSTOMDRAW
    {
        public NMCUSTOMDRAW    nmcd;
        public int clrText;
        public int clrTextBk;
        public int iLevel;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMCUSTOMDRAW {
        public NMHDR    nmcd;
        public int      dwDrawStage;
        public IntPtr   hdc;
        public RECT     rc;
        public int      dwItemSpec;
        public int      uItemState;
        public IntPtr   lItemlParam;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class MCHITTESTINFO {
        public int      cbSize = 32; //ndirect.DllLib.sizeOf(this);
        public int      pt_x;
        public int      pt_y;
        public int      uHit;
        public short st_wYear;
        public short st_wMonth;
        public short st_wDayOfWeek;
        public short st_wDay;
        public short st_wHour;
        public short st_wMinute;
        public short st_wSecond;
        public short st_wMilliseconds;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMSELCHANGE
    {
        public NMHDR        nmhdr;
        public SYSTEMTIME   stSelStart;
        public SYSTEMTIME   stSelEnd;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDAYSTATE
    {
        public NMHDR        nmhdr;
        public SYSTEMTIME   stStart;
        public int          cDayState;
        public IntPtr       prgDayState;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMLVCUSTOMDRAW
    {
        public NMCUSTOMDRAW    nmcd;
        public int clrText;
        public int clrTextBk;
        public int iSubItem;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class LVHITTESTINFO {
        public int      pt_x;
        public int      pt_y;
        public int      flags;
        public int      iItem;
        public int      iSubItem;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class LVCOLUMN_T
    {
        public int      mask;
        public int      fmt;
        public int      cx;
        public string   pszText;
        public int      cchTextMax;
        public int      iSubItem;
        public int      iImage;
        public int      iOrder;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class LVFINDINFO {
        public int      flags;
        public IntPtr /* LPTSTR */ psz;
        public IntPtr   lParam;
        public int      ptX; // was POINT pt
        public int      ptY;
        public int      vkDirection;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class LVITEM {
        public int      mask;
        public int      iItem;
        public int      iSubItem;
        public int      state;
        public int      stateMask;
        public IntPtr /* LPTSTR */ pszText;
        public int      cchTextMax;
        public int      iImage;
        public IntPtr   lParam;
        public int      iIndent;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, Pack=1, CharSet=CharSet.Auto)]
    public class LVCOLUMN {
        public int      mask;
        public int      fmt;
        public int      cx;
        public IntPtr /* LPWSTR */ pszText;
        public int      cchTextMax;
        public int      iSubItem;
        public int      iImage;
        public int      iOrder;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMLVDISPINFO
    {
      public NMHDR  hdr;
      public LVITEM item;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class CLIENTCREATESTRUCT {
        public IntPtr hWindowMenu;
        public int idFirstChild;
    
        public CLIENTCREATESTRUCT() {
        }
    
        public CLIENTCREATESTRUCT(IntPtr hmenu, int idFirst) {
            hWindowMenu = hmenu;
            idFirstChild = idFirst;
        }
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]
    public class BROWSEINFO {
        public IntPtr   hwndOwner;       //HWND        hwndOwner;    // HWND of the owner for the dialog
        public IntPtr   pidlRoot;        //LPCITEMIDLIST pidlRoot;   // Root ITEMIDLIST

        // For interop purposes, send over a buffer of MAX_PATH size. 
        public IntPtr   pszDisplayName;  //LPWSTR       pszDisplayName;      // Return display name of item selected.

        public string   lpszTitle;       //LPCWSTR      lpszTitle;           // text to go in the banner over the tree.
        public int      ulFlags;         //UINT         ulFlags;                     // Flags that control the return stuff
        public IntPtr   lpfn;            //BFFCALLBACK  lpfn;            // Call back pointer
        public IntPtr   lParam;          //LPARAM       lParam;                      // extra info that's passed back in callbacks
        public int      iImage;          //int          iImage;                      // output var: where to return the Image index.
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class TBBUTTONINFO_T
    {
        public int      cbSize = 32; // ndirect.DllLib.sizeOf(this);
        public int      dwMask;
        public int      idCommand;
        public int      iImage;
        public byte     fsState;
        public byte     fsStyle;
        public short    cx;
        public IntPtr   lParam;
        public string   pszText;
        public int      cchText;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDATETIMECHANGE
    {
        public NMHDR        nmhdr;
        public int          dwFlags;
        public SYSTEMTIME   st;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDATETIMEFORMAT
    {
        public NMHDR      nmhdr;
        public string     pszFormat;
        public SYSTEMTIME st;
        public string     pszDisplay;

        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst=32)]
        public string     szDisplay;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDATETIMEFORMATQUERY
    {
        public NMHDR  nmhdr;
        public string pszFormat;
        public SIZE   szMax;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDATETIMESTRING
    {
        public NMHDR      nmhdr;
        [MarshalAs(UnmanagedType.LPTStr)]
        public string     pszUserString;
        public SYSTEMTIME st;
        public int        dwFlags;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class NMDATETIMEWMKEYDOWN
    {
        public NMHDR      nmhdr;
        public int        nVirtKey;
        public string     pszFormat;
        public SYSTEMTIME st;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class COPYDATASTRUCT {
            public int dwData;
            public int cbData;
            public IntPtr lpData;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class NMHEADER {
        public IntPtr hwndFrom; 
        public int idFrom; 
        public int code; 
        public int iItem;
        public int iButton;
        public IntPtr pItem;  // HDITEM*
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class Shell32 {
        [DllImport("shell32.dll", EntryPoint="SHGetSpecialFolderLocation")]
        public static extern int SHGetSpecialFolderLocation(IntPtr hwnd, int csidl, [Out, MarshalAs(UnmanagedType.LPArray)] IntPtr [] ppidl);
        //SHSTDAPI SHGetSpecialFolderLocation(HWND hwnd, int csidl, LPITEMIDLIST *ppidl);

        [DllImport("shell32.dll", EntryPoint="SHGetPathFromIDList", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SHGetPathFromIDList(IntPtr pidl, IntPtr pszPath);        
        //SHSTDAPI_(BOOL) SHGetPathFromIDListW(LPCITEMIDLIST pidl, LPWSTR pszPath);
        
        [DllImport("shell32.dll", EntryPoint="SHBrowseForFolder", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr SHBrowseForFolder([In] BROWSEINFO lpbi);        
        //SHSTDAPI_(LPITEMIDLIST) SHBrowseForFolderW(LPBROWSEINFOW lpbi);

        [DllImport("shell32.dll", EntryPoint="SHGetMalloc")]
        public static extern int SHGetMalloc([Out, MarshalAs(UnmanagedType.LPArray)] UnsafeNativeMethods.IMalloc[] ppMalloc);
        //SHSTDAPI SHGetMalloc(LPMALLOC * ppMalloc);
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class MOUSEHOOKSTRUCT {
        // pt was a by-value POINT structure
        public int      pt_x;
        public int      pt_y;
        public IntPtr   hWnd;
        public int      wHitTestCode;
        public int      dwExtraInfo;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class CHARRANGE
    {
        public int  cpMin;
        public int  cpMax;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi, Pack=4)]
    public class CHARFORMATA
    {
        public int      cbSize;
        public int      dwMask;
        public int      dwEffects;
        public int      yHeight;
        public int      yOffset;
        public int      crTextColor;
        public byte     bCharSet;
        public byte     bPitchAndFamily;
        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=32)]
        public char[]   szFaceName = new char[32];

        public CHARFORMATA() {
            cbSize = System.Runtime.InteropServices.Marshal.SizeOf( this );
        }
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class TEXTRANGE
    {
        public CHARRANGE    chrg;
        public IntPtr       lpstrText; /* allocated by caller, zero terminated by RichEdit */
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi, Pack=4)]
    public class SELCHANGE {
        public NMHDR nmhdr;
        public CHARRANGE chrg;
        public int seltyp;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class COMPCOLOR
    {
        public int      crText;
        public int      crBackground;
        public int      dwEffects;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class PARAFORMAT
    {
        public int      cbSize = 156;   // ndirect.DllLib.sizeOf( this );
        public int      dwMask;
        public short    wNumbering;
        public short    wReserved;
        public int      dxStartIndent;
        public int      dxRightIndent;
        public int      dxOffset;
        public short    wAlignment;
        public short    cTabCount;

        [MarshalAs(System.Runtime.InteropServices.UnmanagedType.ByValArray, SizeConst=32)]
        public int[]    rgxTabs;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class FINDTEXT
    {
        public CHARRANGE    chrg;
        public string       lpstrText;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Ansi)]
    public class PUNCTUATION
    {
        public int      iSize;
        public string   szPunctuation;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class REPASTESPECIAL
    {
        public int  dwAspect;
        public int  dwParam;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class ENLINK
    {
        public NMHDR    nmhdr;
        public int      msg;
        public IntPtr   wParam;
        public IntPtr   lParam;
        public CHARRANGE charrange;
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public abstract class CharBuffer {

        public static CharBuffer CreateBuffer(int size) {
            if (Marshal.SystemDefaultCharSize == 1) {
                return new AnsiCharBuffer(size);
            }
            return new UnicodeCharBuffer(size);
        }

        public abstract IntPtr AllocCoTaskMem();
        public abstract string GetString();
        public abstract void PutCoTaskMem(IntPtr ptr);
        public abstract void PutString(string s);
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class AnsiCharBuffer : CharBuffer {

        internal byte[] buffer;
        internal int offset;

        public AnsiCharBuffer(int size) {
            buffer = new byte[size];
        }

        public override IntPtr AllocCoTaskMem() {
            IntPtr result = Marshal.AllocCoTaskMem(buffer.Length);
            Marshal.Copy(buffer, 0, result, buffer.Length);
            return result;
        }

        public override string GetString() {
            int i = offset;
            while (i < buffer.Length && buffer[i] != 0)
                i++;
            string result = Encoding.Default.GetString(buffer, offset, i - offset);
            if (i < buffer.Length)
                i++;
            offset = i;
            return result;
        }

        public override void PutCoTaskMem(IntPtr ptr) {
            Marshal.Copy(ptr, buffer, 0, buffer.Length);
            offset = 0;
        }

        public override void PutString(string s) {
            byte[] bytes = Encoding.Default.GetBytes(s);
            int count = Math.Min(bytes.Length, buffer.Length - offset);
            Array.Copy(bytes, 0, buffer, offset, count);
            offset += count;
            if (offset < buffer.Length) buffer[offset++] = 0;
        }
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class UnicodeCharBuffer : CharBuffer {

        internal char[] buffer;
        internal int offset;

        public UnicodeCharBuffer(int size) {
            buffer = new char[size];
        }

        public override IntPtr AllocCoTaskMem() {
            IntPtr result = Marshal.AllocCoTaskMem(buffer.Length * 2);
            Marshal.Copy(buffer, 0, result, buffer.Length);
            return result;
        }

        public override String GetString() {
            int i = offset;
            while (i < buffer.Length && buffer[i] != 0) i++;
            string result = new string(buffer, offset, i - offset);
            if (i < buffer.Length) i++;
            offset = i;
            return result;
        }

        public override void PutCoTaskMem(IntPtr ptr) {
            Marshal.Copy(ptr, buffer, 0, buffer.Length);
            offset = 0;
        }

        public override void PutString(string s) {
            int count = Math.Min(s.Length, buffer.Length - offset);
            s.CopyTo(0, buffer, offset, count);
            offset += count;
            if (offset < buffer.Length) buffer[offset++] = (char)0;
        }
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class ENDROPFILES
    {
        public NMHDR    nmhdr;
        public IntPtr   hDrop;
        public int      cp;
        public bool     fProtected;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class REQRESIZE
    {
        public NMHDR    nmhdr;
        public RECT     rc;
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
    public class ENPROTECTED
    {
        public NMHDR    nmhdr;
        public int      msg;
        public IntPtr   wParam;
        public IntPtr   lParam;
        public CHARRANGE chrg;
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class ActiveX {

        public const   int OCM__BASE = 0x2000;
        public const   int DISPID_VALUE = unchecked((int)0x0);
        public const   int DISPID_UNKNOWN = unchecked((int)0xFFFFFFFF);
        public const   int DISPID_AUTOSIZE = unchecked((int)0xFFFFFE0C);
        public const   int DISPID_BACKCOLOR = unchecked((int)0xFFFFFE0B);
        public const   int DISPID_BACKSTYLE = unchecked((int)0xFFFFFE0A);
        public const   int DISPID_BORDERCOLOR = unchecked((int)0xFFFFFE09);
        public const   int DISPID_BORDERSTYLE = unchecked((int)0xFFFFFE08);
        public const   int DISPID_BORDERWIDTH = unchecked((int)0xFFFFFE07);
        public const   int DISPID_DRAWMODE = unchecked((int)0xFFFFFE05);
        public const   int DISPID_DRAWSTYLE = unchecked((int)0xFFFFFE04);
        public const   int DISPID_DRAWWIDTH = unchecked((int)0xFFFFFE03);
        public const   int DISPID_FILLCOLOR = unchecked((int)0xFFFFFE02);
        public const   int DISPID_FILLSTYLE = unchecked((int)0xFFFFFE01);
        public const   int DISPID_FONT = unchecked((int)0xFFFFFE00);
        public const   int DISPID_FORECOLOR = unchecked((int)0xFFFFFDFF);
        public const   int DISPID_ENABLED = unchecked((int)0xFFFFFDFE);
        public const   int DISPID_HWND = unchecked((int)0xFFFFFDFD);
        public const   int DISPID_TABSTOP = unchecked((int)0xFFFFFDFC);
        public const   int DISPID_TEXT = unchecked((int)0xFFFFFDFB);
        public const   int DISPID_CAPTION = unchecked((int)0xFFFFFDFA);
        public const   int DISPID_BORDERVISIBLE = unchecked((int)0xFFFFFDF9);
        public const   int DISPID_APPEARANCE = unchecked((int)0xFFFFFDF8);
        public const   int DISPID_MOUSEPOINTER = unchecked((int)0xFFFFFDF7);
        public const   int DISPID_MOUSEICON = unchecked((int)0xFFFFFDF6);
        public const   int DISPID_PICTURE = unchecked((int)0xFFFFFDF5);
        public const   int DISPID_VALID = unchecked((int)0xFFFFFDF4);
        public const   int DISPID_READYSTATE = unchecked((int)0xFFFFFDF3);
        public const   int DISPID_REFRESH = unchecked((int)0xFFFFFDDA);
        public const   int DISPID_DOCLICK = unchecked((int)0xFFFFFDD9);
        public const   int DISPID_ABOUTBOX = unchecked((int)0xFFFFFDD8);
        public const   int DISPID_CLICK = unchecked((int)0xFFFFFDA8);
        public const   int DISPID_DBLCLICK = unchecked((int)0xFFFFFDA7);
        public const   int DISPID_KEYDOWN = unchecked((int)0xFFFFFDA6);
        public const   int DISPID_KEYPRESS = unchecked((int)0xFFFFFDA5);
        public const   int DISPID_KEYUP = unchecked((int)0xFFFFFDA4);
        public const   int DISPID_MOUSEDOWN = unchecked((int)0xFFFFFDA3);
        public const   int DISPID_MOUSEMOVE = unchecked((int)0xFFFFFDA2);
        public const   int DISPID_MOUSEUP = unchecked((int)0xFFFFFDA1);
        public const   int DISPID_ERROREVENT = unchecked((int)0xFFFFFDA0);
        public const   int DISPID_RIGHTTOLEFT = unchecked((int)0xFFFFFD9D);
        public const   int DISPID_READYSTATECHANGE = unchecked((int)0xFFFFFD9F);
        public const   int DISPID_AMBIENT_BACKCOLOR = unchecked((int)0xFFFFFD43);
        public const   int DISPID_AMBIENT_DISPLAYNAME = unchecked((int)0xFFFFFD42);
        public const   int DISPID_AMBIENT_FONT = unchecked((int)0xFFFFFD41);
        public const   int DISPID_AMBIENT_FORECOLOR = unchecked((int)0xFFFFFD40);
        public const   int DISPID_AMBIENT_LOCALEID = unchecked((int)0xFFFFFD3F);
        public const   int DISPID_AMBIENT_MESSAGEREFLECT = unchecked((int)0xFFFFFD3E);
        public const   int DISPID_AMBIENT_SCALEUNITS = unchecked((int)0xFFFFFD3D);
        public const   int DISPID_AMBIENT_TEXTALIGN = unchecked((int)0xFFFFFD3C);
        public const   int DISPID_AMBIENT_USERMODE = unchecked((int)0xFFFFFD3B);
        public const   int DISPID_AMBIENT_UIDEAD = unchecked((int)0xFFFFFD3A);
        public const   int DISPID_AMBIENT_SHOWGRABHANDLES = unchecked((int)0xFFFFFD39);
        public const   int DISPID_AMBIENT_SHOWHATCHING = unchecked((int)0xFFFFFD38);
        public const   int DISPID_AMBIENT_DISPLAYASDEFAULT = unchecked((int)0xFFFFFD37);
        public const   int DISPID_AMBIENT_SUPPORTSMNEMONICS = unchecked((int)0xFFFFFD36);
        public const   int DISPID_AMBIENT_AUTOCLIP = unchecked((int)0xFFFFFD35);
        public const   int DISPID_AMBIENT_APPEARANCE = unchecked((int)0xFFFFFD34);
        public const   int DISPID_AMBIENT_PALETTE = unchecked((int)0xFFFFFD2A);
        public const   int DISPID_AMBIENT_TRANSFERPRIORITY = unchecked((int)0xFFFFFD28);
        public const   int DISPID_Name = unchecked((int)0xFFFFFCE0);
        public const   int DISPID_Delete = unchecked((int)0xFFFFFCDF);
        public const   int DISPID_Object = unchecked((int)0xFFFFFCDE);
        public const   int DISPID_Parent = unchecked((int)0xFFFFFCDD);
        public const   int DVASPECT_CONTENT = 0x1;
        public const   int DVASPECT_THUMBNAIL = 0x2;
        public const   int DVASPECT_ICON = 0x4;
        public const   int DVASPECT_DOCPRINT = 0x8;
        public const   int OLEMISC_RECOMPOSEONRESIZE = 0x1;
        public const   int OLEMISC_ONLYICONIC = 0x2;
        public const   int OLEMISC_INSERTNOTREPLACE = 0x4;
        public const   int OLEMISC_STATIC = 0x8;
        public const   int OLEMISC_CANTLINKINSIDE = 0x10;
        public const   int OLEMISC_CANLINKBYOLE1 = 0x20;
        public const   int OLEMISC_ISLINKOBJECT = 0x40;
        public const   int OLEMISC_INSIDEOUT = 0x80;
        public const   int OLEMISC_ACTIVATEWHENVISIBLE = 0x100;
        public const   int OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200;
        public const   int OLEMISC_INVISIBLEATRUNTIME = 0x400;
        public const   int OLEMISC_ALWAYSRUN = 0x800;
        public const   int OLEMISC_ACTSLIKEBUTTON = 0x1000;
        public const   int OLEMISC_ACTSLIKELABEL = 0x2000;
        public const   int OLEMISC_NOUIACTIVATE = 0x4000;
        public const   int OLEMISC_ALIGNABLE = 0x8000;
        public const   int OLEMISC_SIMPLEFRAME = 0x10000;
        public const   int OLEMISC_SETCLIENTSITEFIRST = 0x20000;
        public const   int OLEMISC_IMEMODE = 0x40000;
        public const   int OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000;
        public const   int OLEMISC_WANTSTOMENUMERGE = 0x100000;
        public const   int OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000;
        public const   int QACONTAINER_SHOWHATCHING = 0x1;
        public const   int QACONTAINER_SHOWGRABHANDLES = 0x2;
        public const   int QACONTAINER_USERMODE = 0x4;
        public const   int QACONTAINER_DISPLAYASDEFAULT = 0x8;
        public const   int QACONTAINER_UIDEAD = 0x10;
        public const   int QACONTAINER_AUTOCLIP = 0x20;
        public const   int QACONTAINER_MESSAGEREFLECT = 0x40;
        public const   int QACONTAINER_SUPPORTSMNEMONICS = 0x80;
        public const   int XFORMCOORDS_POSITION = 0x1;
        public const   int XFORMCOORDS_SIZE = 0x2;
        public const   int XFORMCOORDS_HIMETRICTOCONTAINER = 0x4;
        public const   int XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8;
        public const   int PROPCAT_Nil = unchecked((int)0xFFFFFFFF);
        public const   int PROPCAT_Misc = unchecked((int)0xFFFFFFFE);
        public const   int PROPCAT_Font = unchecked((int)0xFFFFFFFD);
        public const   int PROPCAT_Position = unchecked((int)0xFFFFFFFC);
        public const   int PROPCAT_Appearance = unchecked((int)0xFFFFFFFB);
        public const   int PROPCAT_Behavior = unchecked((int)0xFFFFFFFA);
        public const   int PROPCAT_Data = unchecked((int)0xFFFFFFF9);
        public const   int PROPCAT_List = unchecked((int)0xFFFFFFF8);
        public const   int PROPCAT_Text = unchecked((int)0xFFFFFFF7);
        public const   int PROPCAT_Scale = unchecked((int)0xFFFFFFF6);
        public const   int PROPCAT_DDE = unchecked((int)0xFFFFFFF5);
        public const   int GC_WCH_SIBLING = 0x1;
        public const   int GC_WCH_CONTAINER = 0x2;
        public const   int GC_WCH_CONTAINED = 0x3;
        public const   int GC_WCH_ALL = 0x4;
        public const   int GC_WCH_FREVERSEDIR = 0x8000000;
        public const   int GC_WCH_FONLYNEXT = 0x10000000;
        public const   int GC_WCH_FONLYPREV = 0x20000000;
        public const   int GC_WCH_FSELECTED = 0x40000000;
        public const   int OLECONTF_EMBEDDINGS = 0x1;
        public const   int OLECONTF_LINKS = 0x2;
        public const   int OLECONTF_OTHERS = 0x4;
        public const   int OLECONTF_ONLYUSER = 0x8;
        public const   int OLECONTF_ONLYIFRUNNING = 0x10;
        public const   int ALIGN_MIN = 0x0;
        public const   int ALIGN_NO_CHANGE = 0x0;
        public const   int ALIGN_TOP = 0x1;
        public const   int ALIGN_BOTTOM = 0x2;
        public const   int ALIGN_LEFT = 0x3;
        public const   int ALIGN_RIGHT = 0x4;
        public const   int ALIGN_MAX = 0x4;
        public const   int OLEVERBATTRIB_NEVERDIRTIES = 0x1;
        public const   int OLEVERBATTRIB_ONCONTAINERMENU = 0x2;

        public static Guid IID_IUnknown = new Guid("{00000000-0000-0000-C000-000000000046}");
    }
    [System.Runtime.InteropServices.ComVisible(false), 
        System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode)
   ]
    public class Util {
        public static int MAKELONG(int low, int high) {
            return (high << 16) | (low & 0xffff);
        }

        public static IntPtr MAKELPARAM(int low, int high) {
            return (IntPtr) ((high << 16) | (low & 0xffff));
        }

        public static int HIWORD(int n) {
            return (n >> 16) & 0xffff;
        }

        public static int HIWORD(IntPtr n) {
            return HIWORD( (int) n );
        }

        public static int LOWORD(int n) {
            return n & 0xffff;
        }

        public static int LOWORD(IntPtr n) {
            return LOWORD( (int) n );
        }

        public static int SignedHIWORD(IntPtr n) {
            return SignedHIWORD( (int) n );
        }
        public static int SignedLOWORD(IntPtr n) {
            return SignedLOWORD( (int) n );
        }
        
        public static int SignedHIWORD(int n) {
            int i = (int)(short)((n >> 16) & 0xffff);

            // UNDONE : BrianPe, 5/18/99 - HACK.  Our compiler has a bug
            //        : and isn't recognizing signed shorts.  We must do
            //        : this to get proper sign extension.
            //
            i = i << 16;
            i = i >> 16;

            return i;
        }

        public static int SignedLOWORD(int n) {
            int i = (int)(short)(n & 0xFFFF);

            // UNDONE : BrianPe, 5/18/99 - HACK.  Our compiler has a bug
            //        : and isn't recognizing signed shorts.  We must do
            //        : this to get proper sign extension.
            //
            i = i << 16;
            i = i >> 16;

            return i;
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.Util.GetPInvokeStringLength"]/*' />
        /// <devdoc>
        ///     Computes the string size that should be passed to a typical Win32 call.
        ///     This will be the character count under NT, and the ubyte count for Win95.
        /// </devdoc>
        public static int GetPInvokeStringLength(String s) {
            if (s == null) {
                return 0;
            }

            if (System.Runtime.InteropServices.Marshal.SystemDefaultCharSize == 2) {
                return s.Length;
            }
            else {
                if (s.Length == 0) {
                    return 0;
                }
                if (s.IndexOf('\0') > -1) {
                    return GetEmbededNullStringLengthAnsi(s);
                }
                else {
                    return lstrlen(s);
                }
            }
        }

        private static int GetEmbededNullStringLengthAnsi(String s) {
            int n = s.IndexOf('\0');
            if (n > -1) {
                String left = s.Substring(0, n);
                String right = s.Substring(n+1);
                return GetPInvokeStringLength(left) + GetEmbededNullStringLengthAnsi(right) + 1;
            }
            else {
                return GetPInvokeStringLength(s);
            }
        }

        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern int lstrlen(String s);

        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        internal static extern int RegisterWindowMessage(string msg);
    }
    
    public enum  tagTYPEKIND {
            TKIND_ENUM = 0,
            TKIND_RECORD = 1,
            TKIND_MODULE = 2,
            TKIND_INTERFACE = 3,
            TKIND_DISPATCH = 4,
            TKIND_COCLASS = 5,
            TKIND_ALIAS = 6,
            TKIND_UNION = 7,
            TKIND_MAX = 8,
    }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class  tagTLIBATTR {

            public   Guid guid;
            [MarshalAs(UnmanagedType.U4)]
            public   int lcid;
            public   NativeMethods.tagSYSKIND syskind;
            [MarshalAs(UnmanagedType.U2)]
            public   short wMajorVerNum;
            [MarshalAs(UnmanagedType.U2)]
            public   short wMinorVerNum;
            [MarshalAs(UnmanagedType.U2)]
            public   short wLibFlags;
    }
    
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public  class  tagTYPEDESC {
        public   IntPtr unionMember;
        public   short vt;
    }
    
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public struct  tagPARAMDESC {

        // cpb, SBurke, COM+ bug (number): this is marked as NATIVE_TYPE_PTR,
        // but the EE doesn't look for that, tries to handle it as
        // a ELEMENT_TYPE_VALUECLASS and fails because it
        // isn't a NATIVE_TYPE_NESTEDSTRUCT
                //[MarshalAs(UnmanagedType.PTR)]
                //public    NativeMethods.tagPARAMDESCEX pparamdescex;
        
                public   IntPtr pparamdescex;
        
        [MarshalAs(UnmanagedType.U2)]
                public   short wParamFlags;
    }
    public sealed class CommonHandles {
        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Accelerator"]/*' />
        /// <devdoc>
        ///     Handle type for accelerator tables.
        /// </devdoc>
        public static readonly int Accelerator  = HandleCollector.RegisterType("Accelerator", 80, 50);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Cursor"]/*' />
        /// <devdoc>
        ///     handle type for cursors.
        /// </devdoc>
        public static readonly int Cursor       = HandleCollector.RegisterType("Cursor", 20, 500);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.EMF"]/*' />
        /// <devdoc>
        ///     Handle type for enhanced metafiles.
        /// </devdoc>
        public static readonly int EMF          = HandleCollector.RegisterType("EnhancedMetaFile", 20, 500);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Find"]/*' />
        /// <devdoc>
        ///     Handle type for file find handles.
        /// </devdoc>
        public static readonly int Find         = HandleCollector.RegisterType("Find", 0, 1000);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.GDI"]/*' />
        /// <devdoc>
        ///     Handle type for GDI objects.
        /// </devdoc>
        public static readonly int GDI          = HandleCollector.RegisterType("GDI", 90, 50);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.HDC"]/*' />
        /// <devdoc>
        ///     Handle type for HDC's that count against the Win98 limit of five DC's.  HDC's
        ///     which are not scarce, such as HDC's for bitmaps, are counted as GDIHANDLE's.
        /// </devdoc>
        public static readonly int HDC          = HandleCollector.RegisterType("HDC", 100, 2); // wait for 2 dc's before collecting

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Icon"]/*' />
        /// <devdoc>
        ///     Handle type for icons.
        /// </devdoc>
        public static readonly int Icon         = HandleCollector.RegisterType("Icon", 20, 500);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Kernel"]/*' />
        /// <devdoc>
        ///     Handle type for kernel objects.
        /// </devdoc>
        public static readonly int Kernel       = HandleCollector.RegisterType("Kernel", 0, 1000);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Menu"]/*' />
        /// <devdoc>
        ///     Handle type for files.
        /// </devdoc>
        public static readonly int Menu         = HandleCollector.RegisterType("Menu", 30, 1000);

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.CommonHandles.Window"]/*' />
        /// <devdoc>
        ///     Handle type for windows.
        /// </devdoc>
        public static readonly int Window       = HandleCollector.RegisterType("Window", 5, 1000);
    }
    
    [System.Runtime.InteropServices.ComVisible(false)]
    public sealed class HandleCollector {
        private static HandleType[]             handleTypes = null;
        private static int                      handleTypeCount = 0;
        private static HandleChangeEventHandler handleAdd = null;
        private static HandleChangeEventHandler handleRemove = null;

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.Add"]/*' />
        /// <devdoc>
        ///     Adds the given handle to the handle collector.  This keeps the
        ///     handle on a "hot list" of objects that may need to be garbage
        ///     collected.
        /// </devdoc>
        public static IntPtr Add(IntPtr handle, int type) {
            handleTypes[type - 1].Add(handle);
            return handle;
        }


        public static event HandleChangeEventHandler HandleAdded {
            add {
                handleAdd += value;
            }
            remove {
                handleAdd -= value;
            }
        }


        public static event HandleChangeEventHandler HandleRemoved {
            add {
                handleRemove += value;
            }
            remove {
                handleRemove -= value;
            }
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.RegisterType"]/*' />
        /// <devdoc>
        ///     Registers a new type of handle with the handle collector.
        /// </devdoc>
        public static int RegisterType(string typeName, int expense, int initialThreshold) {
            lock(typeof(HandleCollector)) {
                if (handleTypeCount == 0 || handleTypeCount == handleTypes.Length) {
                    HandleType[] newTypes = new HandleType[handleTypeCount + 10];
                    if (handleTypes != null) {
                        Array.Copy(handleTypes, 0, newTypes, 0, handleTypeCount);
                    }
                    handleTypes = newTypes;
                }

                handleTypes[handleTypeCount++] = new HandleType(typeName, expense, initialThreshold);
                return handleTypeCount;
            }
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.Remove"]/*' />
        /// <devdoc>
        ///     Removes the given handle from the handle collector.  Removing a
        ///     handle removes it from our "hot list" of objects that should be
        ///     frequently garbage collected.
        /// </devdoc>
        public static IntPtr Remove(IntPtr handle, int type) {
            return handleTypes[type - 1].Remove(handle);
        }

        /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType"]/*' />
        /// <devdoc>
        ///     Represents a specific type of handle.
        /// </devdoc>
        private class HandleType {
            public readonly string name;

            private int threshHold;
            private int handleCount;
            private readonly int deltaPercent;

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.HandleType"]/*' />
            /// <devdoc>
            ///     Creates a new handle type.
            /// </devdoc>
            public HandleType(string name, int expense, int initialThreshold) {
                this.name = name;
                this.threshHold = initialThreshold;
                this.handleCount = 0;
                this.deltaPercent = 100 - expense;
            }

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.Add"]/*' />
            /// <devdoc>
            ///     Adds a handle to this handle type for monitoring.
            /// </devdoc>
            public void Add(IntPtr handle) {
                lock(this) {
                    handleCount++;
                    if (NeedCollection()) {
    #if DEBUG_HANDLECOLLECTOR
                        Debug.WriteLine("HC> Forcing GC");
                        Debug.WriteLine("HC>     name        :" + name);
                        Debug.WriteLine("HC>     threshHold  :" + (threshHold).ToString());
                        Debug.WriteLine("HC>     handleCount :" + (handleCount).ToString());
                        Debug.WriteLine("HC>     deltaPercent:" + (deltaPercent).ToString());
    #endif
                        GC.Collect();
                        Collected();
                    }

                    if (HandleCollector.handleAdd != null) {
                        HandleCollector.handleAdd(name, handle, GetHandleCount());
                    }
                }
            }

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.Collected"]/*' />
            /// <devdoc>
            ///     Called after the collector has finished it's work.  Here,
            ///     we look at the number of objects currently outstanding
            ///     and establish a new cleanup threshhold.
            /// </devdoc>
            public void Collected() {
                lock(this) {
                    threshHold = handleCount + ((handleCount * deltaPercent) / 100);
                }
            }

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.GetHandleCount"]/*' />
            /// <devdoc>
            ///     Retrieves the outstanding handle count for this
            ///     handle type.
            /// </devdoc>
            public int GetHandleCount() {
                lock(this) {
                    return handleCount;
                }
            }

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.NeedCollection"]/*' />
            /// <devdoc>
            ///     Determines if this handle type needs a GC pass.
            /// </devdoc>
            public  bool NeedCollection() {
                lock(this) {
                    return handleCount > threshHold;
                }
            }

            /// <include file='doc\NativeMethods.uex' path='docs/doc[@for="NativeMethods.HandleCollector.HandleType.Remove"]/*' />
            /// <devdoc>
            ///     Removes the given handle from our monitor list.
            /// </devdoc>
            public IntPtr Remove(IntPtr handle) {
                lock(this) {
                    handleCount--;
                    if (HandleCollector.handleRemove != null) {
                        HandleCollector.handleRemove(name, handle, GetHandleCount());
                    }
                    return handle;
                }
            }
        }
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public enum StructFormat {
        Ansi = 1,
        Unicode = 2,
        Auto = 3,
    }
    
    public delegate void HandleChangeEventHandler(string handleType, IntPtr handleValue, int currentHandleCount);
    [System.Runtime.InteropServices.ComVisible(false)]
    public enum  tagSYSKIND {

            SYS_WIN16 = 0,
            SYS_WIN32 = 1,
            SYS_MAC = 2,
    }
    public delegate bool MonitorEnumProc(IntPtr monitor, IntPtr hdc, IntPtr lprcMonitor, IntPtr lParam);
    [ComImport(), Guid("A7ABA9C1-8983-11cf-8F20-00805F2CD064"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IProvideMultipleClassInfo /*: IProvideClassInfo2*/ {
         //cpp_quote("#define MULTICLASSINFO_GETTYPEINFO           0x00000001")
         //cpp_quote("#define MULTICLASSINFO_GETNUMRESERVEDDISPIDS 0x00000002")
         //cpp_quote("#define MULTICLASSINFO_GETIIDPRIMARY         0x00000004")
         //cpp_quote("#define MULTICLASSINFO_GETIIDSOURCE          0x00000008")
         //cpp_quote("#define TIFLAGS_EXTENDDISPATCHONLY           0x00000001")
     
         //typedef IProvideMultipleClassInfo * LPPROVIDEMULTIPLECLASSINFO;
         
         
         // since the inheritance doesn't seem to work...
         // these are from IProvideClassInfo & IProvideClassInfo2
         [PreserveSig]
         UnsafeNativeMethods.ITypeInfo GetClassInfo();
         
         [PreserveSig]
         int GetGUID(int dwGuidKind, [In, Out] ref Guid pGuid);
     
         [PreserveSig]
         int GetMultiTypeInfoCount([In, Out] ref int pcti);
     
         // we use arrays for most of these since we never use them anyway.
         [PreserveSig]
         int GetInfoOfIndex(int iti, int dwFlags, 
                            [In, Out]
                            ref UnsafeNativeMethods.ITypeInfo pTypeInfo, 
                            int       pTIFlags,
                            int       pcdispidReserved,
                            IntPtr piidPrimary,
                            IntPtr piidSource);
   }
    [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public class EVENTMSG {
      public int message;
      public IntPtr paramL;
      public IntPtr paramH;
      public int time;
      public IntPtr hwnd;
    }
    [System.Runtime.InteropServices.ComVisible(false)]
    public class StandardGuids {

     //
     //  GUIDs for standard types (see olectl.h)
     //

     public static readonly Guid GUID_HIMETRIC = new Guid("{66504300-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_COLOR = new Guid("{66504301-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_XPOSPIXEL = new Guid("{66504302-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_YPOSPIXEL = new Guid("{66504303-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_XSIZEPIXEL = new Guid("{66504304-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_YSIZEPIXEL = new Guid("{66504305-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_XPOS = new Guid("{66504306-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_YPOS = new Guid("{66504307-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_XSIZE = new Guid("{66504308-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_YSIZE = new Guid("{66504309-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_TRISTATE = new Guid("{6650430A-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_OPTIONVALUEEXCLUSIVE = new Guid("{6650430B-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_CHECKVALUEEXCLUSIVE = new Guid("{6650430C-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTNAME = new Guid("{6650430D-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTSIZE = new Guid("{6650430E-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTBOLD = new Guid("{6650430F-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTITALIC = new Guid("{66504310-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTUNDERSCORE = new Guid("{66504311-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_FONTSTRIKETHROUGH = new Guid("{66504312-BE0F-101A-8BBB-00AA00300CAB}");

     public static readonly Guid GUID_HANDLE = new Guid("{66504313-BE0F-101A-8BBB-00AA00300CAB}");
}
    [ComImport(), Guid("B196B283-BAB4-101A-B69C-00AA00341D07"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
    public interface IProvideClassInfo {
        [return: MarshalAs(UnmanagedType.Interface)]
         UnsafeNativeMethods.ITypeInfo GetClassInfo();
    }
[System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
    public  sealed class  tagTYPEATTR {

        // SBurke, because the GUID is inline
          
        [MarshalAs(UnmanagedType.U4)]
        public    int guid_data1;
        [MarshalAs(UnmanagedType.U2)]
        public    short guid_data2;
        [MarshalAs(UnmanagedType.U2)]
        public    short guid_data3;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab1;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab2;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab3;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab4;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab5;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab6;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab7;
        [MarshalAs(UnmanagedType.U1)]
        public    byte guid_datab8;
        
        
                [MarshalAs(UnmanagedType.U4)]
                public   int lcid;
                [MarshalAs(UnmanagedType.U4)]
                public   int dwReserved;
                
                public   int memidConstructor;
                
                public   int memidDestructor;
                /*
          We get a TYPEATTR from COM through ITypeInfo::GetTypeAttr,
          inspect it, then give it back to ITypeInfo::ReleaseTypeAttr.
          Appearently, ITypeInfo::ReleaseTypeAttr blows away the structure completely.
          Well, after that happens, COM+ does it's unmarshaling code and tries
          to release the memory that COM has already freed.  Boom.
          
          So, since we don't need this thing, we use an int.
        [MarshalAs(UnmanagedType.LPWStr)]
                public   string lpstrSchema;*/
        
        
                public   IntPtr lpstrSchema;
        
                [MarshalAs(UnmanagedType.U4)]
                public   int cbSizeInstance;
                public    /*NativeMethods.tagTYPEKIND*/ int typekind;
                [MarshalAs(UnmanagedType.U2)]
                public   short cFuncs;
                [MarshalAs(UnmanagedType.U2)]
                public   short cVars;
                [MarshalAs(UnmanagedType.U2)]
                public   short cImplTypes;
                [MarshalAs(UnmanagedType.U2)]
                public   short cbSizeVft;
                [MarshalAs(UnmanagedType.U2)]
                public   short cbAlignment;
                [MarshalAs(UnmanagedType.U2)]
                public   short wTypeFlags;
                [MarshalAs(UnmanagedType.U2)]
                public   short wMajorVerNum;
                [MarshalAs(UnmanagedType.U2)]
                public   short wMinorVerNum;
        
        // SBurke these are inline too
                //public    NativeMethods.tagTYPEDESC tdescAlias;
        [MarshalAs(UnmanagedType.U4)]
                public   int tdescAlias_unionMember;
        
        [MarshalAs(UnmanagedType.U2)]
                public   short tdescAlias_vt;
        
                //public    NativeMethods.tagIDLDESC idldescType;
        [MarshalAs(UnmanagedType.U4)]
                public   int idldescType_dwReserved;
        
        [MarshalAs(UnmanagedType.U2)]
                public   short idldescType_wIDLFlags;
        
        public Guid GetGuid(){
            return new Guid(guid_data1, guid_data2, guid_data3, guid_datab1,
                                                 guid_datab2,
                                                 guid_datab3,
                                                 guid_datab4,
                                                 guid_datab5,
                                                 guid_datab6,
                                                 guid_datab7,
                                                 guid_datab8);
        }
        
        public tagTYPEDESC Get_tdescAlias(){
            tagTYPEDESC td = new tagTYPEDESC();
            td.unionMember = (IntPtr)this.tdescAlias_unionMember;
            td.vt = this.tdescAlias_vt;
            return td;
        }
        
        public tagIDLDESC Get_idldescType(){
            tagIDLDESC id = new tagIDLDESC();
            id.dwReserved = this.idldescType_dwReserved;
            id.wIDLFlags = this.idldescType_wIDLFlags;
            return id;
        } 
        }
        [System.Runtime.InteropServices.ComVisible(false)]
    public enum tagVARFLAGS {
         VARFLAG_FREADONLY         =    1,
         VARFLAG_FSOURCE           =    0x2,
         VARFLAG_FBINDABLE         =    0x4,
         VARFLAG_FREQUESTEDIT      =    0x8,
         VARFLAG_FDISPLAYBIND      =    0x10,
         VARFLAG_FDEFAULTBIND      =    0x20,
         VARFLAG_FHIDDEN           =    0x40,
         VARFLAG_FUSESGETLASTERROR =    0x80,
         VARFLAG_FDEFAULTCOLLELEM  =    0x100,
         VARFLAG_FUIDEFAULT        =    0x200,
         VARFLAG_FNONBROWSABLE     =    0x400,
         VARFLAG_FREPLACEABLE      =    0x800,
         VARFLAG_FIMMEDIATEBIND    =    0x1000
   }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
        public sealed class tagELEMDESC {
            public    NativeMethods.tagTYPEDESC tdesc;
            public    NativeMethods.tagPARAMDESC paramdesc;
        }
        [System.Runtime.InteropServices.ComVisible(false)]
        public enum  tagVARKIND {

                VAR_PERINSTANCE = 0,
                VAR_STATIC = 1,
                VAR_CONST = 2,
                VAR_DISPATCH = 3,
        }
        [System.Runtime.InteropServices.ComVisible(false), StructLayout(LayoutKind.Sequential)]
            public struct  tagIDLDESC {

                    [MarshalAs(UnmanagedType.U4)]
                    public   int dwReserved;
                    [MarshalAs(UnmanagedType.U2)]
                    public   short wIDLFlags;
            }
    }
}

