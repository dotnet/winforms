// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

namespace System.Windows.Forms {
    using System.Runtime.InteropServices;
    using System;
    using System.Security.Permissions;
    using System.Collections;
    using System.IO;
    using System.Text;

    [
    System.Runtime.InteropServices.ComVisible(false), 
    System.Security.SuppressUnmanagedCodeSecurityAttribute()
    ]
    internal class SafeNativeMethods {
        [DllImport("uxtheme.dll", CharSet=CharSet.Unicode)]
        public static extern int IsAppThemed();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool GetScrollInfo(IntPtr hWnd, int fnBar, [In, Out] NativeMethods.SCROLLINFO si);
        [DllImport("ole32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool IsAccelerator(IntPtr hAccel, int cAccelEntries, [In] ref NativeMethods.MSG lpMsg, short[] lpwCmd);
        [DllImport("comdlg32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ChooseFont([In, Out] NativeMethods.CHOOSEFONT cf);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetBitmapBits(IntPtr hbmp, int cbBuffer, byte[] lpvBits);
        [DllImport("comdlg32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto, SetLastError=true)]
        public static extern int CommDlgExtendedError();
        [DllImport("oleaut32.dll", ExactSpelling=true, CharSet=CharSet.Unicode)]
        public static extern void SysFreeString(IntPtr bstr);
        [DllImport("oleaut32.dll", CharSet = CharSet.Unicode)]
        public static extern int RegisterTypeLib(UCOMITypeLib typelib, string path, string helpPath);

        [DllImport("olepro32.dll", PreserveSig=false)]
        public static extern void OleCreatePropertyFrame(IntPtr hwndOwner, int x, int y, [MarshalAs(UnmanagedType.LPWStr)]string caption, int objects, [MarshalAs(UnmanagedType.Interface)] ref object pobjs, int pages, IntPtr pClsid, int locale, int reserved1, IntPtr reserved2);
        [DllImport("olepro32.dll", PreserveSig=false)]
        public static extern void OleCreatePropertyFrame(IntPtr hwndOwner, int x, int y, [MarshalAs(UnmanagedType.LPWStr)]string caption, int objects, [MarshalAs(UnmanagedType.Interface)] ref object pobjs, int pages, Guid[] pClsid, int locale, int reserved1, IntPtr reserved2);
        [DllImport("olepro32.dll", PreserveSig=false)]
        public static extern void OleCreatePropertyFrame(IntPtr hwndOwner, int x, int y, [MarshalAs(UnmanagedType.LPWStr)]string caption, int objects, IntPtr lplpobjs, int pages, IntPtr pClsid, int locale, int reserved1, IntPtr reserved2);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern IntPtr ExtCreateRegion(int xform, int size, ref IntPtr regionData);
        [DllImport("hhctrl.ocx", CharSet=CharSet.Auto)]
        public static extern int HtmlHelp(IntPtr hwndCaller, string pszFile, int uCommand, int dwData);
        [DllImport("hhctrl.ocx", CharSet=CharSet.Auto)]
        public static extern int HtmlHelp(IntPtr hwndCaller, string pszFile, int uCommand, string dwData);
        [DllImport("hhctrl.ocx", CharSet=CharSet.Auto)]
        public static extern int HtmlHelp(IntPtr hwndCaller, string pszFile, int uCommand, NativeMethods.HH_POPUP dwData);
        [DllImport("user32.dll", CharSet=CharSet.Auto)]
        public static extern bool WinHelp(IntPtr hWndMain, string lpszHelp, int uCommand, int dwData);
        [DllImport("user32.dll", CharSet=CharSet.Auto)]
        public static extern bool WinHelp(IntPtr hWndMain, string lpszHelp, int uCommand, string dwData);
        [DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern void VariantInit(IntPtr pObject);
        [ DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern void VariantClear(IntPtr pObject);
        [DllImport("oleaut32.dll", ExactSpelling=true, CharSet=CharSet.Unicode)]
        public static extern void VarFormat(object pobjIn, string pstrFormat, int iFirstDay, int iFirstWeek, int dwFlags, ref IntPtr pbstrOut);
        [DllImport("oleaut32.dll", ExactSpelling=true, CharSet=CharSet.Unicode)]
        public static extern void VarFormatNumber(object pobjIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, ref IntPtr pbstrOut);
        [DllImport("oleaut32.dll", ExactSpelling=true, CharSet=CharSet.Unicode)]
        public static extern void VarFormatCurrency(object pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, int dwFlags, ref IntPtr pbstrOut);
        [DllImport("oleaut32.dll", ExactSpelling=true, CharSet=CharSet.Unicode)]
        public static extern int VarR8FromStr(string strIn, int lcid, int dwFlags, double[] pdblOut);

        [DllImport("gdi32.dll", CharSet=CharSet.Auto)]
        internal static extern bool ExtTextOut(
                                              IntPtr hdc, int x, int y, int options, ref NativeMethods.RECT rect,string str, int length, int[] spacing);

        [DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern int FrameRect(
                                          IntPtr hdc, ref NativeMethods.RECT lprc, IntPtr hbr);

        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern bool LineTo(IntPtr hdc, int x, int y);

        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern bool MoveToEx(IntPtr hdc, int x, int y, NativeMethods.POINT pt);

        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern bool Rectangle(
                                           IntPtr hdc, int left, int top, int right, int bottom);

        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern IntPtr SelectObject(IntPtr hdc, int obj);

        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern IntPtr ExtCreatePen(
                                             int dwPenStyle, int dwWidth, NativeMethods.LOGBRUSH logbrush,
                                             int dwStyleCount, int[] pStyle);


        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern bool PatBlt(IntPtr hdc, int left, int top, int width, int height, int rop);
        [DllImport("kernel32.dll", EntryPoint="CompareStringW", CharSet=System.Runtime.InteropServices.CharSet.Unicode)]
        public static extern int CompareStringW(int Locale, int dwCmpFlags, string String1, int cchCount1, string String2, int cchCount2);
        [DllImport("kernel32.dll", EntryPoint="CompareStringA", CharSet=System.Runtime.InteropServices.CharSet.Ansi)]
        public static extern int CompareStringA(int Locale, int dwCmpFlags, byte[] String1, int cchCount1, byte[] String2, int cchCount2);
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int LCMapString(int Locale, int dwMapFlags, string lpSrcStr, int cchSrc, StringBuilder lpDestStr, int cchDest);
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetLocaleInfo(int Locale, int LCType, StringBuilder lpLCData, int cchData);
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetLocaleInfo(int Locale, int LCType, [In, Out] NativeMethods.LOCALESIGNATURE lpLCData, int cchData);
        public static int GetLocaleInfo(int Locale, int LCType, NativeMethods.LOCALESIGNATURE lpLCData) {
            return GetLocaleInfo(Locale, LCType, lpLCData, Marshal.SizeOf(typeof(NativeMethods.LOCALESIGNATURE)));
        }
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetStringType(int Locale, int dwInfoType, String lpSrcStr, int cchSrc, int[] lpCharType);
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetSystemDefaultLangID();
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetUserDefaultLangID();
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetSystemDefaultLCID();
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetUserDefaultLCID();
        [DllImport("kernel32.dll", EntryPoint="GetThreadLocale", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetThreadLCID();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetMessagePos();

        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreatePalette", CharSet=System.Runtime.InteropServices.CharSet.Auto, SetLastError=true)]
        private static extern IntPtr /*HPALETTE*/ IntCreatePalette(NativeMethods.LOGPALETTE lplgpl);
        public static IntPtr /*HPALETTE*/ CreatePalette(NativeMethods.LOGPALETTE lplgpl) {
            return NativeMethods.HandleCollector.Add(IntCreatePalette(lplgpl), NativeMethods.CommonHandles.GDI);
        }


        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreatePalette", CharSet=System.Runtime.InteropServices.CharSet.Auto, SetLastError=true)]
        private static extern IntPtr /*HPALETTE*/ IntCreatePalette(IntPtr ptrlgpl);
        public static IntPtr /*HPALETTE*/ CreatePalette(IntPtr ptrlgpl) {
            return NativeMethods.HandleCollector.Add(IntCreatePalette(ptrlgpl), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int RegisterClipboardFormat(string format);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetClipboardFormatName(int format, StringBuilder lpString, int cchMax);
        
        [DllImport("comdlg32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ChooseColor([In, Out] NativeMethods.CHOOSECOLOR cc);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int RegisterWindowMessage(string msg);
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="DeleteObject", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern bool IntDeleteObject(IntPtr hObject);
        public static bool DeleteObject(IntPtr hObject) {
            NativeMethods.HandleCollector.Remove(hObject, NativeMethods.CommonHandles.GDI);
            return IntDeleteObject(hObject);
        }

        [DllImport("olepro32.dll", EntryPoint="OleCreateFontIndirect", ExactSpelling=true, PreserveSig=false)]
        public static extern SafeNativeMethods.IFont OleCreateIFontIndirect(NativeMethods.FONTDESC fd, ref Guid iid);
        [DllImport("olepro32.dll", EntryPoint="OleCreateFontIndirect", ExactSpelling=true, PreserveSig=false)]
        public static extern SafeNativeMethods.IFontDisp OleCreateIFontDispIndirect(NativeMethods.FONTDESC fd, ref Guid iid);

        [DllImport("olepro32.dll", EntryPoint="OleCreatePictureIndirect", ExactSpelling=true, PreserveSig=false)]
        public static extern SafeNativeMethods.IPicture OleCreateIPictureIndirect([MarshalAs(UnmanagedType.AsAny)]object pictdesc, ref Guid iid, bool fOwn);
        [DllImport("olepro32.dll", EntryPoint="OleCreatePictureIndirect", ExactSpelling=true, PreserveSig=false)]
        public static extern SafeNativeMethods.IPictureDisp OleCreateIPictureDispIndirect([MarshalAs(UnmanagedType.AsAny)] object pictdesc, ref Guid iid, bool fOwn);
        
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateSolidBrush", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateSolidBrush(int crColor);
        public static IntPtr CreateSolidBrush(int crColor) {
            return NativeMethods.HandleCollector.Add(IntCreateSolidBrush(crColor), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SetWindowExtEx(IntPtr hDC, int x, int y, [In, Out] NativeMethods.SIZE size);

        [DllImport("oleaut32.dll", CharSet = CharSet.Unicode)]
        public static extern int LoadTypeLib(string file, out UCOMITypeLib typelib);
        
        [DllImport("kernel32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int FormatMessage(int dwFlags, IntPtr lpSource, int dwMessageId,
                                               int dwLanguageId, StringBuilder lpBuffer, int nSize, IntPtr arguments);
        
        
        // cpb: #8309 -- next three methods, refiid arg must be IPicture.iid
        [DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern SafeNativeMethods.IPicture OleLoadPicture(UnsafeNativeMethods.IStream pStream, int lSize, bool fRunmode, ref Guid refiid);
        
        [DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern SafeNativeMethods.IPicture OleLoadPictureEx(UnsafeNativeMethods.IStream pStream, int lSize, bool fRunmode, ref Guid refiid, int width, int height, int dwFlags);
#if CUSTOM_MARSHALING_ISTREAM
        [DllImport("oleaut32.dll"), PreserveSig=false]
        public static extern SafeNativeMethods.IPicture OleLoadPictureEx(
                                                        [MarshalAs(UnmanagedType.CustomMarshaler,MarshalType="StreamToIStreamMarshaler")] Stream pStream, 
                                                        int lSize, bool fRunmode, ref Guid refiid, int width, int height, int dwFlags);
#endif

        
        [DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern SafeNativeMethods.IPicture OleCreatePictureIndirect(NativeMethods.PICTDESC pictdesc, [In]ref Guid refiid, bool fOwn);

        [DllImport("oleaut32.dll", PreserveSig=false)]
        public static extern SafeNativeMethods.IFont OleCreateFontIndirect(NativeMethods.tagFONTDESC fontdesc, [In]ref Guid refiid);
        
        [DllImport("oleacc.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int CreateStdAccessibleObject(IntPtr hWnd, int objID, ref Guid refiid, [In, Out, MarshalAs(UnmanagedType.Interface)] ref object pAcc);
        [DllImport("comctl32.dll")]
        public static extern void InitCommonControls();

        [DllImport("comctl32.dll")]
        public static extern bool InitCommonControlsEx(NativeMethods.INITCOMMONCONTROLSEX icc);

        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_Create(int cx, int cy, int flags, int cInitial, int cGrow);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_Destroy(IntPtr himl);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_Duplicate(IntPtr himl);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_GetImageCount(IntPtr himl);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_SetImageCount(IntPtr himl, int uNewCount);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_Add(IntPtr himl, IntPtr hbmImage, IntPtr hbmMask);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_ReplaceIcon(IntPtr himl, int i, IntPtr hicon);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_SetBkColor(IntPtr himl, int clrBk);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_GetBkColor(IntPtr himl);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_SetOverlayImage(IntPtr himl, int iImage, int iOverlay);
        [DllImport("comctl32.dll")]

        public static extern bool ImageList_Draw(IntPtr himl, int i, IntPtr hdcDst, int x, int y, int fStyle);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_Replace(IntPtr himl, int i, IntPtr hbmImage, IntPtr hbmMask);
        [DllImport("comctl32.dll")]
        public static extern int ImageList_AddMasked(IntPtr himl, IntPtr hbmImage, int crMask);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DrawEx(IntPtr himl, int i, IntPtr hdcDst, int x, int y, int dx, int dy, int rgbBk, int rgbFg, int fStyle);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DrawIndirect(NativeMethods.IMAGELISTDRAWPARAMS pimldp);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_Remove(IntPtr himl, int i);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_GetIcon(IntPtr himl, int i, int flags);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_LoadImage(IntPtr hi, string lpbmp, int cx, int cGrow, int crMask, int uType, int uFlags);

        [DllImport("comctl32.dll")]
        public static extern bool ImageList_Copy(IntPtr himlDst, int iDst, IntPtr himlSrc, int iSrc, int uFlags);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_BeginDrag(IntPtr himlTrack, int iTrack, int dxHotspot, int dyHotspot);
        [DllImport("comctl32.dll")]
        public static extern void ImageList_EndDrag();
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DragEnter(IntPtr hwndLock, int x, int y);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DragLeave(IntPtr hwndLock);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DragMove(int x, int y);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_SetDragCursorImage(IntPtr himlDrag, int iDrag, int dxHotspot, int dyHotspot);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_DragShowNolock(bool fShow);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_GetDragImage(IntPtr ppt, IntPtr pptHotspot);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_GetIconSize(IntPtr himl, int cx, int cy);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_SetIconSize(IntPtr himl, int cx, int cy);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_GetImageInfo(IntPtr himl, int i, NativeMethods.IMAGEINFO pImageInfo);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_Merge(IntPtr himl1, int i1, IntPtr himl2, int i2, int dx, int dy);
        [DllImport("comctl32.dll")]
        public static extern IntPtr ImageList_Read(UnsafeNativeMethods.IStream pstm);
        [DllImport("comctl32.dll")]
        public static extern bool ImageList_Write(IntPtr himl, UnsafeNativeMethods.IStream pstm);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool TrackPopupMenuEx(IntPtr hmenu, int fuFlags, int x, int y, IntPtr hwnd, NativeMethods.TPMPARAMS tpm);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern IntPtr GetKeyboardLayout(int dwLayout);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto, SetLastError=true)]
        public static extern IntPtr ActivateKeyboardLayout(IntPtr hkl, int uFlags);
        [DllImport("user32.dll", CharSet=CharSet.Auto, SetLastError=true)]
        public static extern bool GetKeyboardLayoutName(StringBuilder name);
        
        // this will blow up unmarhsalling the IntPtr[]
        //[DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        //public static extern int GetKeyboardLayoutList(int size, [Out, MarshalAs(UnmanagedType.LPArray)] IntPtr [] hkls);
        
        [DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern int GetKeyboardLayoutList(int size, [Out, MarshalAs(UnmanagedType.LPArray)] int [] hkls);
        
        
        [DllImport("user32.dll")]
        public static extern bool GetMonitorInfo(IntPtr hmonitor, [In, Out]NativeMethods.MONITORINFO info);
        [DllImport("user32.dll")]
        public static extern bool GetMonitorInfo(IntPtr hmonitor, [In, Out]NativeMethods.MONITORINFOEX info);
        [DllImport("user32.dll", ExactSpelling=true)]
        public static extern IntPtr MonitorFromPoint(int x, int y, int flags);
        [DllImport("user32.dll", ExactSpelling=true)]
        public static extern IntPtr MonitorFromRect(ref NativeMethods.RECT rect, int flags);
        [DllImport("user32.dll", ExactSpelling=true)]
        public static extern IntPtr MonitorFromWindow(IntPtr handle, int flags);
        [DllImport("user32.dll", ExactSpelling=true)]
        public static extern bool EnumDisplayMonitors(IntPtr hdc, ref NativeMethods.RECT rcClip, NativeMethods.MonitorEnumProc lpfnEnum, IntPtr dwData);
        [DllImport("user32.dll", ExactSpelling=true)]
        public static extern bool EnumDisplayMonitors(IntPtr hdc, NativeMethods.COMRECT rcClip, NativeMethods.MonitorEnumProc lpfnEnum, IntPtr dwData);
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateHalftonePalette", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr /*HPALETTE*/ IntCreateHalftonePalette(IntPtr hdc);
        public static IntPtr /*HPALETTE*/ CreateHalftonePalette(IntPtr hdc) {
            return NativeMethods.HandleCollector.Add(IntCreateHalftonePalette(hdc), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetPaletteEntries(IntPtr hpal, int iStartIndex, int nEntries, int[] lppe);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetPaletteEntries(IntPtr hpal, int iStartIndex, int nEntries, IntPtr lppe);
        [DllImport("gdi32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool GetTextMetrics(IntPtr hdc, NativeMethods.TEXTMETRIC tm);
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateDIBSection", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateDIBSection(IntPtr hdc, NativeMethods.BITMAPINFO bmi, int iUsage, ref IntPtr ppvBits, IntPtr hSection, int dwOffset);
        public static IntPtr CreateDIBSection(IntPtr hdc, NativeMethods.BITMAPINFO bmi, int iUsage, ref IntPtr ppvBits, IntPtr hSection, int dwOffset) {
            return NativeMethods.HandleCollector.Add(IntCreateDIBSection(hdc, bmi, iUsage, ref ppvBits, hSection, dwOffset), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateBitmap", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr /*HBITMAP*/ IntCreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, int [] lpvBits);
        public static IntPtr /*HBITMAP*/ CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, int [] lpvBits) {
            return NativeMethods.HandleCollector.Add(IntCreateBitmap(nWidth, nHeight, nPlanes, nBitsPerPixel, lpvBits), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateDIBSection", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateDIBSection(IntPtr hdc, IntPtr pbmi, int iUsage, byte[] ppvBits, IntPtr hSection, int dwOffset);
        public static IntPtr CreateDIBSection(IntPtr hdc, IntPtr pbmi, int iUsage, byte[] ppvBits, IntPtr hSection, int dwOffset) {
            return NativeMethods.HandleCollector.Add(IntCreateDIBSection(hdc, pbmi, iUsage, ppvBits, hSection, dwOffset), NativeMethods.CommonHandles.GDI);
        }

        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateDIBSection", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateDIBSection(IntPtr hdc, IntPtr pbmi, int iUsage, int [] ppvBits, IntPtr hSection, int dwOffset);
        public static IntPtr CreateDIBSection(IntPtr hdc, IntPtr pbmi, int iUsage, int [] ppvBits, IntPtr hSection, int dwOffset) {
            return NativeMethods.HandleCollector.Add(IntCreateDIBSection(hdc, pbmi, iUsage, ppvBits, hSection, dwOffset), NativeMethods.CommonHandles.GDI);
        }

        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateBitmap", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr /*HBITMAP*/ IntCreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, short[] lpvBits);
        public static IntPtr /*HBITMAP*/ CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, short[] lpvBits) {
            return NativeMethods.HandleCollector.Add(IntCreateBitmap(nWidth, nHeight, nPlanes, nBitsPerPixel, lpvBits), NativeMethods.CommonHandles.GDI);
        }

        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateBitmap", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr /*HBITMAP*/ IntCreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, byte[] lpvBits);
        public static IntPtr /*HBITMAP*/ CreateBitmap(int nWidth, int nHeight, int nPlanes, int nBitsPerPixel, byte[] lpvBits) {
            return NativeMethods.HandleCollector.Add(IntCreateBitmap(nWidth, nHeight, nPlanes, nBitsPerPixel, lpvBits), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreatePatternBrush", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr /*HBRUSH*/ IntCreatePatternBrush(IntPtr hbmp);
        public static IntPtr /*HBRUSH*/ CreatePatternBrush(IntPtr hbmp) {
            return NativeMethods.HandleCollector.Add(IntCreatePatternBrush(hbmp), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetTextExtentPoint32(IntPtr hDC, string str, int len, [In, Out] NativeMethods.SIZE size);
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateBrushIndirect", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateBrushIndirect(NativeMethods.LOGBRUSH lb);
        public static IntPtr CreateBrushIndirect(NativeMethods.LOGBRUSH lb) {
            return NativeMethods.HandleCollector.Add(IntCreateBrushIndirect(lb), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreatePen", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreatePen(int nStyle, int nWidth, int crColor);
        public static IntPtr CreatePen(int nStyle, int nWidth, int crColor) {
            return NativeMethods.HandleCollector.Add(IntCreatePen(nStyle, nWidth, crColor), NativeMethods.CommonHandles.GDI);
        }


        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SetViewportExtEx(IntPtr hDC, int x, int y, NativeMethods.SIZE size);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr LoadCursor(IntPtr hInst, int iconId);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public extern static bool GetClipCursor([In, Out] ref NativeMethods.RECT lpRect);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr GetCursor();
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int IntersectClipRect(IntPtr hDC, int x1, int y1, int x2, int y2);
        [DllImport("user32.dll", ExactSpelling=true, EntryPoint="CopyImage", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCopyImage(IntPtr hImage, int uType, int cxDesired, int cyDesired, int fuFlags);
        public static IntPtr CopyImage(IntPtr hImage, int uType, int cxDesired, int cyDesired, int fuFlags) {
            return NativeMethods.HandleCollector.Add(IntCopyImage(hImage, uType, cxDesired, cyDesired, fuFlags), NativeMethods.CommonHandles.GDI);
        }
        

        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool AdjustWindowRectEx(ref NativeMethods.RECT lpRect, int dwStyle, bool bMenu, int dwExStyle);
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetACP();
        [DllImport("ole32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int DoDragDrop(UnsafeNativeMethods.IOleDataObject dataObject, UnsafeNativeMethods.IOleDropSource dropSource, int allowedEffects, int[] finalEffect);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr GetSysColorBrush(int nIndex);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool EnableWindow(IntPtr hWnd, bool enable);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool GetClientRect(IntPtr hWnd, [In, Out] ref NativeMethods.RECT rect);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=CharSet.Auto)]
        public static extern int GetDoubleClickTime();
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public extern static int GetLastError();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int FillRect(IntPtr hdc, [In] ref NativeMethods.RECT rect, IntPtr hbrush);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr LoadIcon(IntPtr hInst, int resID);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int /*COLORREF*/ SetTextColor(IntPtr hDC, int crColor);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int SetBkColor(IntPtr hDC, int clr);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr /* HPALETTE */SelectPalette(IntPtr hdc, IntPtr hpal, bool bForceBackground);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SetViewportOrgEx(IntPtr hDC, int x, int y, [In, Out] NativeMethods.POINT point);

        [DllImport("gdi32.dll", ExactSpelling=true, EntryPoint="CreateRectRgn", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        private static extern IntPtr IntCreateRectRgn(int x1, int y1, int x2, int y2);
        public static IntPtr CreateRectRgn(int x1, int y1, int x2, int y2) {
            return NativeMethods.HandleCollector.Add(IntCreateRectRgn(x1, y1, x2, y2), NativeMethods.CommonHandles.GDI);
        }
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int CombineRgn(IntPtr hRgn, IntPtr hRgn1, IntPtr hRgn2, int nCombineMode);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int RealizePalette(IntPtr hDC);
        [DllImport("gdi32.dll")]
        public static extern bool LPtoDP(IntPtr hDC, [In, Out] NativeMethods.POINT lpPoint, int nCount);
        [DllImport("gdi32.dll")]
        public static extern bool LPtoDP(IntPtr hDC, int lpPoints, int nCount);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool LPtoDP(IntPtr hDC, [In, Out] NativeMethods.SIZE lpSize, int nCount);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool LPtoDP(IntPtr hDC, [In, Out] ref NativeMethods.RECT lpRect, int nCount);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SetWindowOrgEx(IntPtr hDC, int x, int y, [In, Out] NativeMethods.POINT point);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool GetWindowExtEx(IntPtr hDC, [In, Out] NativeMethods.SIZE s);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool GetViewportExtEx(IntPtr hDC, [In, Out] NativeMethods.SIZE s);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int SetMapMode(IntPtr hDC, int nMapMode);

        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool IsWindowEnabled(IntPtr hWnd);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool IsWindowVisible(IntPtr hWnd);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ReleaseCapture();
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetCurrentThreadId();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter,
                                               int x, int y, int cx, int cy, int flags);

        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetWindowTextLength(IntPtr hWnd);
        // this is a wrapper that comctl exposes for the NT function since it doesn't exist natively on 95.
        [DllImport("comctl32.dll", ExactSpelling=true), CLSCompliantAttribute(false)]
        private static extern bool _TrackMouseEvent(NativeMethods.TRACKMOUSEEVENT tme);
        public static bool TrackMouseEvent(NativeMethods.TRACKMOUSEEVENT tme) {
            // only on NT - not on 95 - comctl32 has a wrapper for 95 and NT.
            return _TrackMouseEvent(tme);
        }
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool RedrawWindow(IntPtr hwnd, ref NativeMethods.RECT rcUpdate, IntPtr hrgnUpdate, int flags);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool RedrawWindow(IntPtr hwnd, NativeMethods.COMRECT rcUpdate, IntPtr hrgnUpdate, int flags);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool InvalidateRect(IntPtr hWnd, ref NativeMethods.RECT rect, bool erase);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool InvalidateRect(IntPtr hWnd, NativeMethods.COMRECT rect, bool erase);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool InvalidateRgn(IntPtr hWnd, IntPtr hrgn, bool erase);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool UpdateWindow(IntPtr hWnd);
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetCurrentProcessId();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ScrollWindowEx(IntPtr hWnd, int nXAmount, int nYAmount, ref NativeMethods.RECT rectScrollRegion, ref NativeMethods.RECT rectClip, IntPtr hrgnUpdate, ref NativeMethods.RECT prcUpdate, int flags);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ScrollWindowEx(IntPtr hWnd, int nXAmount, int nYAmount, NativeMethods.COMRECT rectScrollRegion, ref NativeMethods.RECT rectClip, IntPtr hrgnUpdate, ref NativeMethods.RECT prcUpdate, int flags);
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetThreadLocale();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool MessageBeep(int type);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool DrawMenuBar(IntPtr hWnd);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public extern static bool IsChild(IntPtr parent, IntPtr child);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr SetTimer(IntPtr hWnd, int nIDEvent, int uElapse, NativeMethods.TimerProc lpTimerFunc);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool KillTimer(IntPtr hwnd, int idEvent);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int MessageBox(IntPtr hWnd, string text, string caption, int type);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr SelectObject(IntPtr hDC, IntPtr hObject);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetRegionData(IntPtr hRgn, int size, byte[] data);
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int GetTickCount();
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool ScrollWindow(IntPtr hWnd, int nXAmount, int nYAmount, ref NativeMethods.RECT rectScrollRegion, ref NativeMethods.RECT rectClip);
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr GetCurrentProcess();
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern IntPtr GetCurrentThread();
        [DllImport("kernel32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public extern static bool SetThreadLocale(int Locale);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool IsWindowUnicode(IntPtr hWnd);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool DrawEdge(IntPtr hDC, ref NativeMethods.RECT rect, int edge, int flags);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool DrawFrameControl(IntPtr hDC, ref NativeMethods.RECT rect, int type, int state);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int SetROP2(IntPtr hDC, int nDrawMode);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool DrawIcon(IntPtr hDC, int x, int y, IntPtr hIcon);
        [DllImport("user32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool DrawIconEx(IntPtr hDC, int x, int y, IntPtr hIcon, int width, int height, int iStepIfAniCursor, IntPtr hBrushFlickerFree, int diFlags);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int SetBkMode(IntPtr hDC, int nBkMode);
        [DllImport("user32.dll", CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern int DrawText(IntPtr hDC, string lpszString, int nCount, ref NativeMethods.RECT lpRect, int nFormat);
        [DllImport("gdi32.dll", ExactSpelling=true, CharSet=System.Runtime.InteropServices.CharSet.Auto)]
        public static extern bool BitBlt(IntPtr hDC, int x, int y, int nWidth, int nHeight,
                                         IntPtr hSrcDC, int xSrc, int ySrc, int dwRop);
                                         
                                         
        public static int RGBToCOLORREF(int rgbValue) {
        
            // clear the A value, swap R & B values 
            int bValue = (rgbValue & 0xFF) << 16;
            
            rgbValue &= 0xFFFF00;
            rgbValue |= ((rgbValue >> 16) & 0xFF);
            rgbValue &= 0x00FFFF;
            rgbValue |= bValue;
            return rgbValue;
        }                                         
    
        [ComImport(), Guid("7BF80980-BF32-101A-8BBB-00AA00300CAB"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface IPicture {

            //C#r: UNDONE (Field in interface) public static readonly    NativeMethods.GUID iid;
            
             IntPtr GetHandle();

            
             IntPtr GetHPal();

            [return: MarshalAs(UnmanagedType.I2)]
             short GetPictureType();

            
             int GetWidth();

            
             int GetHeight();

            
             void Render(
                IntPtr hDC,
                int x,
                int y,
                int cx,
                int cy,
                int xSrc,
                int ySrc,
                int cxSrc,
                int cySrc,
                NativeMethods.RECT rcBounds
                );

            
             void SetHPal(
                    
                     IntPtr phpal);

            
             IntPtr GetCurDC();

            
             void SelectPicture(
                    
                     IntPtr hdcIn,
                    [Out, MarshalAs(UnmanagedType.LPArray)] 
                     IntPtr [] phdcOut,
                    [Out, MarshalAs(UnmanagedType.LPArray)] 
                     IntPtr [] phbmpOut);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetKeepOriginalFormat();

            
             void SetKeepOriginalFormat(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool pfkeep);

            
             void PictureChanged();

            
             [PreserveSig]
             int SaveAsFile(
                    [In, MarshalAs(UnmanagedType.Interface)] 
                     UnsafeNativeMethods.IStream pstm,
                     
                     int fSaveMemCopy,
                    [Out]
                     out int pcbSize);

            
             int GetAttributes();

            
             void SetHdc(
                    
                     IntPtr hdc);
        }
        [
        ComImport(), 
        Guid("BEF6E002-A874-101A-8BBA-00AA00300CAB"), 
        System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface IFont {

            //C#r: UNDONE (Field in interface) public static readonly    Guid iid;
            [return: MarshalAs(UnmanagedType.BStr)]
             string GetName();

            
             void SetName(
                    [In, MarshalAs(UnmanagedType.BStr)] 
                      string pname);

            [return: MarshalAs(UnmanagedType.U8)]
             long GetSize();

            
             void SetSize(
                    [In, MarshalAs(UnmanagedType.U8)] 
                     long psize);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetBold();

            
             void SetBold(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool pbold);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetItalic();

            
             void SetItalic(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool pitalic);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetUnderline();

            
             void SetUnderline(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool punderline);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetStrikethrough();

            
             void SetStrikethrough(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool pstrikethrough);

            [return: MarshalAs(UnmanagedType.I2)]
             short GetWeight();

            
             void SetWeight(
                    [In, MarshalAs(UnmanagedType.I2)] 
                     short pweight);

            [return: MarshalAs(UnmanagedType.I2)]
             short GetCharset();

            
             void SetCharset(
                    [In, MarshalAs(UnmanagedType.I2)] 
                     short pcharset);

            
             IntPtr GetHFont();

            
             void Clone(
                    [Out, MarshalAs(UnmanagedType.LPArray)] 
                       SafeNativeMethods.IFont[] ppfont);

             [System.Runtime.InteropServices.PreserveSig]
             int IsEqual(
                    [In, MarshalAs(UnmanagedType.Interface)] 
                      SafeNativeMethods.IFont pfontOther);

            
             void SetRatio(
                     
                     int cyLogical,
                     
                     int cyHimetric);

            
             void AddRefHfont(
                    
                     IntPtr hFont);

            
             void ReleaseHfont(
                    
                     IntPtr hFont);


        }
        [ComImport(), Guid("BEF6E003-A874-101A-8BBA-00AA00300CAB"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface IFontDisp {

            [return: MarshalAs(UnmanagedType.BStr)]
             string GetName();

            
             void SetName(
                    [In, MarshalAs(UnmanagedType.BStr)] 
                      string newValue);

            
             Decimal GetSize();

            
             void SetSize(
                    [In] 
                     Decimal newValue);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetBold();

            
             void SetBold(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool newValue);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetItalic();

            
             void SetItalic(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool newValue);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetUnderline();

            
             void SetUnderline(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool newValue);

            [return: MarshalAs(UnmanagedType.Bool)]
             bool GetStrikethrough();

            
             void SetStrikethrough(
                    [In, MarshalAs(UnmanagedType.Bool)] 
                     bool newValue);

            [return: MarshalAs(UnmanagedType.I2)]
             short GetWeight();

            
             void SetWeight(
                    [In, MarshalAs(UnmanagedType.I2)] 
                     short newValue);

            [return: MarshalAs(UnmanagedType.I2)]
             short GetCharset();

            
             void SetCharset(
                    [In, MarshalAs(UnmanagedType.I2)] 
                     short newValue);

        }
        [ComImport(), Guid("7BF80981-BF32-101A-8BBB-00AA00300CAB"), System.Runtime.InteropServices.InterfaceTypeAttribute(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]
        public interface IPictureDisp {

            
             IntPtr GetHandle();

            
             IntPtr GetHPal();

            
             void SetHPal(
                    
                     IntPtr newValue);

            [return: MarshalAs(UnmanagedType.I2)]
             short GetPictureType();

            
             int GetWidth();

            
             int GetHeight();

            
             void Render(
                    
                     IntPtr hdc,
                     
                     int x,
                     
                     int y,
                     
                     int cx,
                     
                     int cy,
                     
                     int xSrc,
                     
                     int ySrc,
                     
                     int cxSrc,
                     
                     int cySrc);

        }
    }
}

